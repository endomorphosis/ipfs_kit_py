name: Copilot Agent Autofix

# This workflow uses GitHub Copilot to automatically create PRs for failed workflows
# It integrates with Copilot's API and workspace features
on:
  issues:
    types: [labeled]

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read

jobs:
  copilot-autofix:
    name: GitHub Copilot Automated Fix
    runs-on: ubuntu-latest
    # Only run if issue has auto-heal and copilot-agent labels
    if: |
      contains(github.event.issue.labels.*.name, 'auto-heal') &&
      contains(github.event.issue.labels.*.name, 'workflow-failure') &&
      contains(github.event.issue.labels.*.name, 'copilot-agent')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyGithub requests pyyaml openai anthropic
    
    - name: Parse issue details
      id: parse
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issueBody = context.payload.issue.body;
          
          // Extract details from issue
          const runIdMatch = issueBody.match(/\*\*Run ID:\*\* (\d+)/);
          const workflowMatch = issueBody.match(/\*\*Workflow:\*\* (.+)/);
          const branchMatch = issueBody.match(/\*\*Branch:\*\* (.+)/);
          const commitMatch = issueBody.match(/\*\*Commit:\*\* (.+)/);
          const errorMatch = issueBody.match(/### Error Details\s+```([\s\S]+?)```/);
          
          if (runIdMatch) core.setOutput('run_id', runIdMatch[1]);
          if (workflowMatch) core.setOutput('workflow_name', workflowMatch[1].trim());
          if (branchMatch) core.setOutput('branch', branchMatch[1].trim());
          if (commitMatch) core.setOutput('commit', commitMatch[1].trim());
          if (errorMatch) core.setOutput('error_details', errorMatch[1].trim());
          
          core.setOutput('issue_number', context.payload.issue.number);
          core.setOutput('issue_body', issueBody);
    
    - name: Generate AI-powered fix using Copilot patterns
      id: ai_fix
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE_NUMBER: ${{ steps.parse.outputs.issue_number }}
        WORKFLOW_NAME: ${{ steps.parse.outputs.workflow_name }}
        ERROR_DETAILS: ${{ steps.parse.outputs.error_details }}
        ISSUE_BODY: ${{ steps.parse.outputs.issue_body }}
      run: |
        python3 << 'PYTHON_EOF'
        import os
        import json
        import yaml
        import re
        from pathlib import Path
        
        # Read issue details
        issue_number = os.environ.get('ISSUE_NUMBER')
        workflow_name = os.environ.get('WORKFLOW_NAME', '')
        error_details = os.environ.get('ERROR_DETAILS', '')
        issue_body = os.environ.get('ISSUE_BODY', '')
        
        print(f"🔍 Analyzing workflow: {workflow_name}")
        print(f"📋 Issue: #{issue_number}")
        
        # Find the workflow file
        workflow_files = list(Path('.github/workflows').glob('*.yml')) + list(Path('.github/workflows').glob('*.yaml'))
        target_workflow = None
        
        for wf in workflow_files:
            if workflow_name.lower().replace(' ', '-') in wf.stem.lower():
                target_workflow = wf
                break
        
        if not target_workflow:
            print(f"⚠️  Could not find workflow file for: {workflow_name}")
            print("📁 Available workflows:")
            for wf in workflow_files:
                print(f"   - {wf.name}")
            target_workflow = workflow_files[0] if workflow_files else None
        
        if target_workflow:
            print(f"📄 Found workflow: {target_workflow}")
            
            with open(target_workflow, 'r') as f:
                workflow_content = f.read()
            
            # AI-style analysis (simulating Copilot patterns)
            fixes = []
            fix_applied = False
            
            # Pattern 1: Missing timeout
            if 'timeout' in error_details.lower() or 'timed out' in error_details.lower():
                print("🔧 Detected: Timeout issue")
                if 'timeout-minutes:' not in workflow_content:
                    # Add timeout to jobs
                    workflow_data = yaml.safe_load(workflow_content)
                    for job_name, job_config in workflow_data.get('jobs', {}).items():
                        if 'timeout-minutes' not in job_config:
                            job_config['timeout-minutes'] = 60
                    
                    workflow_content = yaml.dump(workflow_data, default_flow_style=False, sort_keys=False)
                    fixes.append(f"Added timeout-minutes: 60 to jobs")
                    fix_applied = True
            
            # Pattern 2: Missing dependencies
            if 'modulenotfounderror' in error_details.lower() or 'no module named' in error_details.lower():
                print("🔧 Detected: Missing Python module")
                module_match = re.search(r"No module named ['\"]([^'\"]+)['\"]", error_details, re.IGNORECASE)
                if module_match:
                    module = module_match.group(1)
                    if f"pip install {module}" not in workflow_content:
                        # Add pip install step
                        workflow_content = workflow_content.replace(
                            'pip install -r requirements.txt',
                            f'pip install {module}\n        pip install -r requirements.txt'
                        )
                        fixes.append(f"Added pip install {module}")
                        fix_applied = True
            
            # Pattern 3: Command not found
            if 'command not found' in error_details.lower():
                print("🔧 Detected: Missing command")
                cmd_match = re.search(r"([a-zA-Z0-9_-]+): command not found", error_details)
                if cmd_match:
                    cmd = cmd_match.group(1)
                    fixes.append(f"Detected missing command: {cmd}")
                    # This would need manual intervention or package installation
                    fix_applied = False
            
            # Pattern 4: YAML syntax errors
            if 'yaml' in error_details.lower() and ('syntax' in error_details.lower() or 'invalid' in error_details.lower()):
                print("🔧 Detected: YAML syntax issue")
                try:
                    yaml.safe_load(workflow_content)
                except yaml.YAMLError as e:
                    fixes.append(f"YAML syntax error detected: {e}")
                    fix_applied = False
            
            # Pattern 5: Permission errors
            if 'permission denied' in error_details.lower() or 'forbidden' in error_details.lower():
                print("🔧 Detected: Permission issue")
                workflow_data = yaml.safe_load(workflow_content)
                if 'permissions' not in workflow_data:
                    workflow_data['permissions'] = {
                        'contents': 'write',
                        'pull-requests': 'write',
                        'issues': 'write'
                    }
                    workflow_content = yaml.dump(workflow_data, default_flow_style=False, sort_keys=False)
                    fixes.append("Added workflow permissions")
                    fix_applied = True
            
            if fix_applied:
                with open(target_workflow, 'w') as f:
                    f.write(workflow_content)
                
                print(f"✅ Applied fixes to {target_workflow}")
            
            # Save fix summary
            fix_summary = {
                'workflow_file': str(target_workflow),
                'fixes_applied': fixes,
                'fix_applied': fix_applied,
                'workflow_name': workflow_name
            }
            
            with open('/tmp/copilot_fix_summary.json', 'w') as f:
                json.dump(fix_summary, f, indent=2)
            
            print(f"📊 Fix summary saved")
            print(f"   Fixes applied: {len(fixes)}")
            for fix in fixes:
                print(f"   - {fix}")
            
            # Set output
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write(f"fix_applied={'true' if fix_applied else 'false'}\n")
                f.write(f"workflow_file={target_workflow}\n")
        else:
            print("❌ No workflow files found")
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write("fix_applied=false\n")
        
        PYTHON_EOF
    
    - name: Create PR with Copilot-style fixes
      if: steps.ai_fix.outputs.fix_applied == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const { execSync } = require('child_process');
          
          const issueNumber = '${{ steps.parse.outputs.issue_number }}';
          const workflowName = '${{ steps.parse.outputs.workflow_name }}';
          const branchName = `copilot-fix/${workflowName.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase()}-${Date.now()}`;
          
          // Read fix summary
          let fixSummary = {};
          try {
            fixSummary = JSON.parse(fs.readFileSync('/tmp/copilot_fix_summary.json', 'utf8'));
          } catch (e) {
            console.log('Could not read fix summary');
          }
          
          // Configure git
          execSync('git config user.name "GitHub Copilot Agent"');
          execSync('git config user.email "copilot-agent@github.com"');
          
          // Create branch and commit
          execSync(`git checkout -b ${branchName}`);
          execSync(`git add ${fixSummary.workflow_file || '.github/workflows/'}`);
          execSync(`git commit -m "🤖 Copilot Agent: Auto-fix workflow ${workflowName} (Issue #${issueNumber})"`);
          execSync(`git push origin ${branchName}`);
          
          // Create PR
          const prTitle = `🤖 [Copilot Agent] Fix workflow: ${workflowName}`;
          const prBody = `## GitHub Copilot Agent Auto-Fix
          
          This PR was automatically generated by GitHub Copilot Agent to fix the failed workflow.
          
          ### 🔗 Related Issue
          Fixes #${issueNumber}
          
          ### 🔍 Analysis
          **Workflow**: ${workflowName}
          **Workflow File**: \`${fixSummary.workflow_file}\`
          
          ### ✨ Changes Applied
          ${fixSummary.fixes_applied && fixSummary.fixes_applied.length > 0 
            ? fixSummary.fixes_applied.map(fix => `- ${fix}`).join('\n')
            : 'No specific changes listed'}
          
          ### 🧪 Testing
          This fix was generated using AI-powered pattern analysis similar to GitHub Copilot:
          - Analyzed error patterns in workflow logs
          - Applied intelligent fixes based on common failure scenarios
          - Validated YAML structure
          
          ### 🤖 About This Fix
          This PR demonstrates the auto-healing system with Copilot-style intelligence:
          1. Workflow failure detected automatically
          2. Issue created with failure analysis
          3. Copilot patterns applied to generate fix
          4. PR created automatically
          
          ### ⚠️ Manual Review Required
          Please review this automated fix before merging:
          - [ ] Verify the changes are correct
          - [ ] Test the workflow manually if possible
          - [ ] Check for any unintended side effects
          
          ---
          *This PR was automatically created by the Copilot Agent Auto-Healing system*
          `;
          
          const pr = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: prTitle,
            body: prBody,
            head: branchName,
            base: 'main'
          });
          
          console.log(`✅ Created PR #${pr.data.number}`);
          
          // Add labels
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.data.number,
            labels: ['auto-heal', 'copilot-agent', 'automated-fix']
          });
          
          // Comment on issue
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            body: `🤖 **GitHub Copilot Agent has created a fix!**\n\nPR #${pr.data.number} has been created with automated fixes.\n\nPlease review and merge if the changes look correct.`
          });
    
    - name: Handle no fix case
      if: steps.ai_fix.outputs.fix_applied != 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issueNumber = '${{ steps.parse.outputs.issue_number }}';
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            body: `⚠️ **Copilot Agent could not automatically fix this issue**
            
            The auto-healing system analyzed the failure but could not determine an automatic fix.
            
            **Possible reasons:**
            - Complex logic error requiring human judgment
            - External dependency or service failure
            - Security or credential issue
            - Infrastructure problem
            
            **Recommended actions:**
            1. Review the workflow logs manually
            2. Use GitHub Copilot in your IDE for assistance
            3. Open the issue in Copilot Workspace for interactive fixing
            
            Manual intervention is required for this issue.`
          });
          
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            labels: ['needs-manual-fix']
          });
