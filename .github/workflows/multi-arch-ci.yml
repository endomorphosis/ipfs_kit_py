name: Multi-Architecture CI/CD

on:
  push:
    branches: [ main, develop, copilot/** ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Test on multiple architectures using QEMU
  test-multi-arch:
    name: Test on ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64, armv7]
        python-version: ['3.9', '3.10', '3.11']
        exclude:
          # Skip some combinations to save CI time
          - arch: armv7
            python-version: '3.9'
          - arch: armv7
            python-version: '3.11'
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up QEMU
      if: matrix.arch != 'amd64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: ${{ matrix.arch }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and test in container
      run: |
        cat > Dockerfile.test <<'EOF'
        ARG BUILDPLATFORM
        ARG TARGETPLATFORM
        ARG PYTHON_VERSION=3.11
        
        FROM --platform=$TARGETPLATFORM python:${PYTHON_VERSION}-slim
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            gcc \
            g++ \
            make \
            libffi-dev \
            libssl-dev \
            git \
            curl \
            && rm -rf /var/lib/apt/lists/*
        
        WORKDIR /app
        
        # Copy dependency files
        COPY requirements.txt setup.py pyproject.toml ./
        COPY ipfs_kit_py ipfs_kit_py/
        
        # Install dependencies with retries for flaky network
        RUN --mount=type=cache,target=/root/.cache/pip \
            pip install --upgrade pip setuptools wheel && \
            pip install -e . && \
            pip install -e .[libp2p] || \
            (sleep 5 && pip install -e .[libp2p]) || \
            (sleep 10 && pip install -e .[libp2p])
        
        # Copy test files
        COPY tests tests/
        COPY pytest.ini ./
        
        # Run tests (excluding integration tests)
        CMD ["python", "-m", "pytest", "tests/", "-v", "--tb=short", "-k", "not test_full", "-x"]
        EOF
        
        docker buildx build \
          --platform linux/${{ matrix.arch }} \
          --build-arg PYTHON_VERSION=${{ matrix.python-version }} \
          -f Dockerfile.test \
          -t test-${{ matrix.arch }}:${{ matrix.python-version }} \
          --load \
          .
        
        docker run --rm test-${{ matrix.arch }}:${{ matrix.python-version }}
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.arch }}-py${{ matrix.python-version }}
        path: test-results/
        retention-days: 7

  # Native ARM64 testing on self-hosted runner
  test-arm64-native:
    name: Test on Native ARM64 (NVIDIA DGX)
    runs-on: [self-hosted, arm64]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Wait for package manager locks (if any)
      run: |
        echo "Checking for package manager locks..."
        timeout=300
        elapsed=0
        while [ $elapsed -lt $timeout ]; do
          if ! fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 && \
             ! fuser /var/lib/dpkg/lock >/dev/null 2>&1 && \
             ! fuser /var/lib/apt/lists/lock >/dev/null 2>&1; then
            echo "No locks found"
            break
          fi
          echo "Waiting for locks to be released... ($elapsed/$timeout seconds)"
          sleep 5
          elapsed=$((elapsed + 5))
        done
        
        if [ $elapsed -ge $timeout ]; then
          echo "Warning: Timeout waiting for locks, proceeding anyway"
        fi
    
    - name: Install system dependencies
      run: |
        sudo apt-get update || true
        sudo apt-get install -y \
          gcc \
          g++ \
          make \
          libffi-dev \
          libssl-dev \
          git \
          curl \
          golang-go \
          pkg-config \
          wget \
          unzip \
          tar \
          gzip \
          || echo "Some system packages failed to install, continuing..."
    
    - name: Verify build tools
      run: |
        echo "Checking build tools availability..."
        go version || echo "⚠️  Go not available"
        make --version || echo "⚠️  Make not available"
        gcc --version || echo "⚠️  GCC not available"
        git --version || echo "⚠️  Git not available"
    
    - name: Create virtual environment
      run: |
        python -m venv .venv
        source .venv/bin/activate
        pip install --upgrade pip setuptools wheel
    
    - name: Install dependencies
      run: |
        source .venv/bin/activate
        
        # Install main package
        pip install -e . || (sleep 5 && pip install -e .)
        
        # Install libp2p extras with retries
        for i in 1 2 3; do
          if pip install -e .[libp2p]; then
            echo "libp2p dependencies installed successfully"
            break
          else
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
        done
        
        # Install test dependencies
        pip install pytest pytest-asyncio pytest-cov || true
    
    - name: Verify installations
      run: |
        source .venv/bin/activate
        echo "Checking installed packages..."
        pip list | grep -E "(libp2p|protobuf|eth-hash|eth-keys)" || echo "Some optional packages not installed"
        
        echo "Testing imports..."
        python -c "import ipfs_kit_py; print('✓ ipfs_kit_py imported')" || echo "✗ Failed to import ipfs_kit_py"
        python -c "from cryptography.fernet import Fernet; print('✓ cryptography available')" || echo "✗ cryptography not available"
        python -c "import multiaddr; print('✓ multiaddr available')" || echo "✗ multiaddr not available"
    
    - name: Run tests
      run: |
        source .venv/bin/activate
        python -m pytest tests/ -v --tb=short -k "not test_full" -x || true
      continue-on-error: true
    
    - name: Run ARM64 specific tests
      run: |
        source .venv/bin/activate
        if [ -f test_arm64_complete.py ]; then
          python test_arm64_complete.py || echo "ARM64 tests had issues"
        fi
        if [ -f test_arm64_installation.py ]; then
          python test_arm64_installation.py || echo "ARM64 installation tests had issues"
        fi
      continue-on-error: true
    
    - name: Generate test report
      if: always()
      run: |
        echo "## Test Summary for ARM64 Python ${{ matrix.python-version }}" > test-summary.md
        echo "" >> test-summary.md
        echo "- Platform: $(uname -m)" >> test-summary.md
        echo "- Python: ${{ matrix.python-version }}" >> test-summary.md
        echo "- Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> test-summary.md
        cat test-summary.md
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-arm64-native-py${{ matrix.python-version }}
        path: |
          test-summary.md
          test-results/
        retention-days: 7

  # Native AMD64 testing on self-hosted runner
  test-amd64-native:
    name: Test on Native AMD64 (x86_64)
    runs-on: [self-hosted, amd64]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Wait for package manager locks (if any)
      run: |
        echo "Checking for package manager locks..."
        timeout=300
        elapsed=0
        while [ $elapsed -lt $timeout ]; do
          if ! fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 && \
             ! fuser /var/lib/dpkg/lock >/dev/null 2>&1 && \
             ! fuser /var/lib/apt/lists/lock >/dev/null 2>&1; then
            echo "No locks found"
            break
          fi
          echo "Waiting for locks to be released... ($elapsed/$timeout seconds)"
          sleep 5
          elapsed=$((elapsed + 5))
        done
        
        if [ $elapsed -ge $timeout ]; then
          echo "Warning: Timeout waiting for locks, proceeding anyway"
        fi
    
    - name: Install system dependencies
      run: |
        sudo apt-get update || true
        sudo apt-get install -y \
          gcc \
          g++ \
          make \
          libffi-dev \
          libssl-dev \
          git \
          curl \
          golang-go \
          pkg-config \
          wget \
          unzip \
          tar \
          gzip \
          || echo "Some system packages failed to install, continuing..."
    
    - name: Verify build tools
      run: |
        echo "Checking build tools availability..."
        go version || echo "⚠️  Go not available"
        make --version || echo "⚠️  Make not available"
        gcc --version || echo "⚠️  GCC not available"
        git --version || echo "⚠️  Git not available"
    
    - name: Create virtual environment
      run: |
        python -m venv .venv
        source .venv/bin/activate
        pip install --upgrade pip setuptools wheel
    
    - name: Install dependencies
      run: |
        source .venv/bin/activate
        
        # Install main package
        pip install -e . || (sleep 5 && pip install -e .)
        
        # Install libp2p extras with retries
        for i in 1 2 3; do
          if pip install -e .[libp2p]; then
            echo "libp2p dependencies installed successfully"
            break
          else
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
        done
        
        # Install test dependencies
        pip install pytest pytest-asyncio pytest-cov || true
    
    - name: Verify installations
      run: |
        source .venv/bin/activate
        echo "Checking installed packages..."
        pip list | grep -E "(libp2p|protobuf|eth-hash|eth-keys)" || echo "Some optional packages not installed"
        
        echo "Testing imports..."
        python -c "import ipfs_kit_py; print('✓ ipfs_kit_py imported')" || echo "✗ Failed to import ipfs_kit_py"
        python -c "from cryptography.fernet import Fernet; print('✓ cryptography available')" || echo "✗ cryptography not available"
        python -c "import multiaddr; print('✓ multiaddr available')" || echo "✗ multiaddr not available"
    
    - name: Run tests
      run: |
        source .venv/bin/activate
        python -m pytest tests/ -v --tb=short -k "not test_full" -x || true
      continue-on-error: true
    
    - name: Run AMD64 specific tests
      run: |
        source .venv/bin/activate
        if [ -f test_amd64_complete.py ]; then
          python test_amd64_complete.py || echo "AMD64 tests had issues"
        fi
        if [ -f test_amd64_installation.py ]; then
          python test_amd64_installation.py || echo "AMD64 installation tests had issues"
        fi
      continue-on-error: true
    
    - name: Generate test report
      if: always()
      run: |
        echo "## Test Summary for AMD64 Python ${{ matrix.python-version }}" > test-summary.md
        echo "" >> test-summary.md
        echo "- Platform: $(uname -m)" >> test-summary.md
        echo "- Python: ${{ matrix.python-version }}" >> test-summary.md
        echo "- Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> test-summary.md
        cat test-summary.md
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-amd64-native-py${{ matrix.python-version }}
        path: |
          test-summary.md
          test-results/
        retention-days: 7

  # Test on RISC-V using QEMU (experimental)
  test-riscv:
    name: Test on RISC-V (Experimental)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'  # Only run manually
    strategy:
      matrix:
        python-version: ['3.10']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU for RISC-V
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static binfmt-support
        
    - name: Test RISC-V compatibility
      run: |
        cat > Dockerfile.riscv <<'EOF'
        FROM riscv64/ubuntu:latest
        
        RUN apt-get update && apt-get install -y \
            python3 \
            python3-pip \
            python3-venv \
            gcc \
            g++ \
            make \
            && rm -rf /var/lib/apt/lists/*
        
        WORKDIR /app
        COPY . .
        
        RUN python3 -m pip install --upgrade pip setuptools wheel
        RUN python3 -m pip install -e . || echo "Main install failed"
        
        CMD ["python3", "-c", "import ipfs_kit_py; print('RISC-V: ipfs_kit_py imported successfully')"]
        EOF
        
        docker buildx build --platform linux/riscv64 \
          -f Dockerfile.riscv \
          -t test-riscv:latest \
          --load \
          . || echo "RISC-V build not fully supported yet"

  # Dependency verification job
  verify-dependencies:
    name: Verify Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install and verify all dependencies
      run: |
        pip install --upgrade pip setuptools wheel
        
        echo "Installing base package..."
        pip install -e .
        
        echo "Installing libp2p extras..."
        pip install -e .[libp2p]
        
        echo "Verifying critical dependencies..."
        python -c "import multiaddr; print('✓ multiaddr')"
        python -c "import cryptography; print('✓ cryptography')"
        python -c "from google.protobuf import descriptor; print('✓ protobuf')"
        python -c "import eth_hash; print('✓ eth-hash')"
        python -c "import eth_keys; print('✓ eth-keys')"
        
        echo "Creating dependency report..."
        pip list > dependency-report.txt
        pip check || echo "Some dependency conflicts detected"
    
    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-report
        path: dependency-report.txt
        retention-days: 7

  # Summary job
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-multi-arch, test-arm64-native, test-amd64-native, verify-dependencies]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Multi-architecture testing completed"
        echo "Check individual job results for details"
        echo ""
        echo "Self-hosted runner tests:"
        echo "- ARM64 native: ${{ needs.test-arm64-native.result }}"
        echo "- AMD64 native: ${{ needs.test-amd64-native.result }}"
