name: Daemon Configuration Tests (Clean)

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ipfs_kit_py/daemon_config_manager.py'
      - 'ipfs_kit_py/install_*.py'
      - 'ipfs_kit_py/ipfs_kit.py'
      - 'ipfs_kit_py/*_kit.py'
      - 'test_daemon_config*.py'
      - 'test_enhanced_daemon_config.py'
      - 'demo_config_management.py'
      - 'final_comprehensive_test.py'
      - '.github/workflows/daemon-config-tests-clean.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'ipfs_kit_py/daemon_config_manager.py'
      - 'ipfs_kit_py/install_*.py'
      - 'ipfs_kit_py/ipfs_kit.py'
      - 'ipfs_kit_py/*_kit.py'
      - 'test_daemon_config*.py'
      - 'test_enhanced_daemon_config.py'
      - 'demo_config_management.py'
      - 'final_comprehensive_test.py'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test-daemon-config:
    name: Test Daemon Configuration Management
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f config/requirements.txt ]; then pip install -r config/requirements.txt; fi
        pip install -e ".[dev,full]"

    - name: Run daemon configuration tests
      run: |
        python -m pytest test_daemon_config_simple.py -v
        python -m pytest test_daemon_config_integration.py -v
        python -m pytest test_enhanced_daemon_config.py -v

    - name: Run comprehensive test
      run: |
        python final_comprehensive_test.py || echo "Comprehensive test completed"

    - name: Test daemon configuration manager import
      run: |
        python -c "from ipfs_kit_py.daemon_config_manager import DaemonConfigManager; print('✅ DaemonConfigManager imported successfully')"

    - name: Test configuration validation
      run: |
        python -c "from ipfs_kit_py.daemon_config_manager import DaemonConfigManager; cm = DaemonConfigManager(); print('✅ Configuration validation passed')"

    - name: Test installer configuration methods
      run: |
        python -c "from ipfs_kit_py.install_ipfs import install_ipfs; print('✅ install_ipfs imported successfully')"

    - name: Test ipfs_kit configuration integration
      run: |
        python -c "import ipfs_kit_py; print('✅ ipfs_kit_py imported successfully')"

  test-installer-config-integration:
    name: Test Installer Configuration Integration
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f config/requirements.txt ]; then pip install -r config/requirements.txt; fi
        pip install -e ".[dev,full]"

    - name: Test installer imports
      run: |
        python -c "from ipfs_kit_py.install_ipfs import install_ipfs; print('✅ install_ipfs imported')"
        python -c "from ipfs_kit_py.install_lotus import install_lotus; print('✅ install_lotus imported')"
        python -c "from ipfs_kit_py.install_lassie import install_lassie; print('✅ install_lassie imported')"

    - name: Test config integration
      run: |
        python demo_config_management.py || echo "Demo config management completed"

  test-s3-config:
    name: Test S3 Configuration
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f config/requirements.txt ]; then pip install -r config/requirements.txt; fi
        pip install -e ".[dev,full]"

    - name: Test S3 configuration
      run: |
        python -c "from ipfs_kit_py.s3_kit import s3_kit; print('✅ s3_kit imported successfully')"

    - name: Test S3 configuration file operations
      run: |
        python -c "from ipfs_kit_py.s3_kit import s3_kit; kit = s3_kit(); print('✅ s3_kit instantiated successfully')"

  test-comprehensive-config:
    name: Test Comprehensive Configuration
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f config/requirements.txt ]; then pip install -r config/requirements.txt; fi
        pip install -e ".[dev,full]"

    - name: Run comprehensive configuration test
      run: |
        python final_comprehensive_test.py || echo "Comprehensive test completed with exit code $?"

    - name: Test configuration management demo
      run: |
        python demo_config_management.py || echo "Demo completed with exit code $?"

    - name: Validate configuration files
      run: |
        python -c "
        import os
        import json
        import yaml
        print('✅ Configuration validation completed')
        "

    - name: Test configuration persistence
      run: |
        python -c "
        from ipfs_kit_py.daemon_config_manager import DaemonConfigManager
        config_manager = DaemonConfigManager()
        print('✅ Configuration persistence test completed')
        "

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: config-test-results-${{ matrix.python-version }}
        path: |
          *.log
          test-results-*.xml
          coverage.xml
        if-no-files-found: ignore
