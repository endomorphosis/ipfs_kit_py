name: ARM64 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-arm64:
    runs-on: [self-hosted, arm64, dgx]
    
    strategy:
      matrix:
        python-version: ['3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Display system information
      run: |
        echo "System Architecture: $(uname -m)"
        echo "Python Version: $(python --version)"
        echo "OS Information: $(lsb_release -a)"
        echo "CPU Information:"
        lscpu | grep -E "(Architecture|CPU|Model name)"
        echo "Memory Information:"
        free -h
        echo "GPU Information:"
        nvidia-smi || echo "nvidia-smi not available"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f pyproject.toml ]; then pip install -e .; fi
    
    - name: Install test dependencies
      run: |
        pip install pytest pytest-cov pytest-asyncio
        pip install flake8 mypy black isort
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type checking with mypy
      run: |
        mypy --install-types --non-interactive . || echo "MyPy check completed with warnings"
    
    - name: Code formatting check
      continue-on-error: true  # Temporarily non-blocking while we fix formatting across the codebase
      run: |
        black --check --diff .
        isort --check-only --diff .
    
    - name: Run tests
      run: |
        pytest --cov=ipfs_kit_py --cov-report=xml --cov-report=html -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: arm64
        name: codecov-arm64
    
    - name: Test package installation
      run: |
        python setup.py bdist_wheel
        pip install dist/*.whl --force-reinstall
        python -c "import ipfs_kit_py; print('Package imported successfully on ARM64')"
    
    - name: Performance test
      run: |
        echo "Running ARM64-specific performance tests..."
        python -c "
        import time
        import sys
        start = time.time()
        # Add any ARM64-specific performance tests here
        print(f'ARM64 Performance test completed in {time.time() - start:.2f}s')
        "

  build-docker-arm64:
    runs-on: [self-hosted, arm64, dgx]
    needs: test-arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build ARM64 Docker image
      run: |
        docker buildx build \
          --platform linux/arm64 \
          --tag ipfs-kit-py:arm64-latest \
          --load \
          .
    
    - name: Test Docker image
      run: |
        docker run --rm ipfs-kit-py:arm64-latest python -c "import ipfs_kit_py; print('Docker ARM64 build successful')"
    
    - name: Clean up Docker images
      run: |
        docker image prune -f