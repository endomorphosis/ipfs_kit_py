name: Python Package

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  id-token: write  # For trusted publishing to PyPI

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.arch }}
    runs-on: ${{ matrix.arch == 'arm64' && fromJSON('["self-hosted", "arm64", "dgx"]') || 'ubuntu-20.04' }}
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }} (AMD64)
      if: matrix.arch == 'amd64'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Python ${{ matrix.python-version }} (ARM64)
      if: matrix.arch == 'arm64'
      run: |
        if command -v python${{ matrix.python-version }} >/dev/null 2>&1; then
          python${{ matrix.python-version }} -m venv venv
        else
          python3 -m venv venv
        fi
        source venv/bin/activate
        echo "venv/bin" >> $GITHUB_PATH
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-cov black isort
        if [ -f config/requirements.txt ]; then pip install -r config/requirements.txt; fi
        python -m pip install -e .[dev]
    - name: Check formatting with black
      run: |
        black --check ipfs_kit_py test
    - name: Check imports with isort
      run: |
        isort --check ipfs_kit_py test
    - name: Test with pytest
      run: |
        pytest
        # Test configuration management
        python -m pytest test_daemon_config_simple.py -v
        python -m pytest test_daemon_config_integration.py -v
        python -m pytest test_enhanced_daemon_config.py -v

  build-and-publish:
    needs: test
    name: Build and publish Python distributions to PyPI
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    - name: Build package
      run: |
        python -m build
    - name: Check package
      run: |
        twine check dist/*
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  build-and-publish-testpypi:
    needs: test
    name: Build and publish Python distributions to TestPyPI
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    - name: Build package
      run: |
        python -m build
    - name: Check package
      run: |
        twine check dist/*
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true