name: Daemon Tests and Health Checks

on:
  push:
    paths:
      - 'ipfs_kit_daemon.py'
      - 'ipfs_kit_daemon_client.py'
      - 'test_daemon_*.py'
      - 'docker/**'
  pull_request:
    paths:
      - 'ipfs_kit_daemon.py'
      - 'ipfs_kit_daemon_client.py'
      - 'test_daemon_*.py'
      - 'docker/**'
  schedule:
    # Run daily at 06:00 UTC
    - cron: '0 6 * * *'

permissions:
  contents: read

jobs:
  daemon-unit-tests:
    name: Daemon Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libffi-dev libssl-dev
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-timeout psutil
          pip install -r requirements.txt
          pip install -e .
          
      - name: Run daemon comprehensive tests
        run: |
          pytest tests/unit/test_daemon_manager_complete.py -v
          pytest tests/unit/test_daemon_startup.py -v
          pytest tests/integration/test_daemon_status.py -v
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: daemon-test-results-${{ matrix.python-version }}
          path: test-results.json

  daemon-performance-tests:
    name: Daemon Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          
      - name: Run performance tests
        run: |
          pytest tests/integration/test_performance_metrics.py -v
          pytest tests/performance/test_vfs_performance.py -v
          
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: daemon-performance-results
          path: performance-results.json

  daemon-docker-tests:
    name: Daemon Docker Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.enhanced
          tags: ipfs-kit:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test daemon-only mode
        run: |
          docker run --rm --name ipfs-kit-daemon-test \
            -d -p 9999:9999 \
            ipfs-kit:test daemon-only
          
          # Wait for daemon to start
          sleep 15
          
          # Test daemon API
          for i in {1..10}; do
            if curl -f http://localhost:9999/api/v1/status; then
              echo "✅ Daemon API responding"
              break
            fi
            echo "⏳ Waiting for daemon... ($i/10)"
            sleep 3
          done
          
          # Stop container
          docker stop ipfs-kit-daemon-test
          
      - name: Test full stack mode
        run: |
          docker run --rm --name ipfs-kit-full-test \
            -d -p 9998:9999 -p 5001:5001 \
            ipfs-kit:test all
          
          # Wait for all services to start
          sleep 45
          
          # Test IPFS API
          curl -f http://localhost:5001/api/v0/version || exit 1
          echo "✅ IPFS API responding"
          
          # Test daemon API
          curl -f http://localhost:9998/api/v1/status || exit 1
          echo "✅ Daemon API responding"
          
          # Test health check
          curl -f http://localhost:9998/api/v1/health || exit 1
          echo "✅ Health check responding"
          
          # Stop container
          docker stop ipfs-kit-full-test

  daemon-cluster-tests:
    name: Daemon Cluster Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.enhanced
          tags: ipfs-kit:test
          load: true
          
      - name: Test cluster deployment
        run: |
          cd docker
          docker-compose -f docker-compose.enhanced.yml up -d ipfs-kit
          
          # Wait for services to be ready
          sleep 60
          
          # Test primary node
          curl -f http://localhost:9999/api/v1/status || exit 1
          echo "✅ Primary node responding"
          
          # Check health
          curl -f http://localhost:9999/api/v1/health || exit 1
          echo "✅ Primary node healthy"
          
          # Cleanup
          docker-compose -f docker-compose.enhanced.yml down
          
  daemon-stress-tests:
    name: Daemon Stress Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[stress-test]')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          
      - name: Run stress tests
        run: |
          # Create stress test script
          cat > stress_test.py << 'EOF'
          import asyncio
          import time
          import concurrent.futures
          from ipfs_kit_daemon import IPFSKitDaemon
          
          async def stress_test():
              print("🔥 Starting daemon stress test...")
              
              # Start daemon
              daemon = IPFSKitDaemon()
              
              # Simulate high load
              start_time = time.time()
              
              tasks = []
              for i in range(100):
                  task = asyncio.create_task(simulate_load(i))
                  tasks.append(task)
              
              await asyncio.gather(*tasks)
              
              duration = time.time() - start_time
              print(f"✅ Stress test completed in {duration:.2f}s")
          
          async def simulate_load(task_id):
              # Simulate various daemon operations
              await asyncio.sleep(0.1)
              return f"Task {task_id} completed"
          
          if __name__ == "__main__":
              asyncio.run(stress_test())
          EOF
          
          python stress_test.py
          
      - name: Upload stress test results
        uses: actions/upload-artifact@v4
        with:
          name: stress-test-results
          path: stress-test-results.json

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [daemon-unit-tests, daemon-performance-tests, daemon-docker-tests, daemon-cluster-tests]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Send notification
        run: |
          echo "❌ Daemon tests failed on main branch"
          echo "This would send a notification to the team"
          # Add actual notification logic here (Slack, email, etc.)
