name: IPFS-Kit Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop, new_cope ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, develop ]

permissions:
  contents: read
  packages: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security
  lint-and-security:
    name: Lint and Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort bandit safety mypy
          pip install -r requirements.txt
          
      - name: Run Black
        run: black --check --diff .
        
      - name: Run isort
        run: isort --check-only --diff .
        
      - name: Run flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
      - name: Run bandit security scan
        run: bandit -r . -f json -o bandit-report.json || true
        
      - name: Run safety check
        run: safety check --json --output safety-report.json || true
        
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libffi-dev libssl-dev
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov
          pip install -r requirements.txt
          pip install -e .
          
      - name: Run comprehensive tests
        run: |
          pytest tests/unit/test_daemon_manager_complete.py -v
          
      - name: Run performance tests
        run: |
          pytest tests/integration/test_performance_metrics.py -v
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            test-results.xml
            .coverage

  # Docker Build and Test
  docker-build:
    name: Build and Test Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-security, test]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.enhanced
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test Docker image
        run: |
          docker run --rm --name ipfs-kit-test \
            -d -p 9999:9999 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Wait for container to start
          sleep 30
          
          # Test daemon API
          curl -f http://localhost:9999/api/v1/status || exit 1
          
          # Stop container
          docker stop ipfs-kit-test

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    services:
      ipfs-kit:
        image: ghcr.io/${{ github.repository }}:${{ github.sha }}
        ports:
          - 9999:9999
          - 5001:5001
        options: >-
          --health-cmd "/healthcheck.sh"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pytest pytest-asyncio aiohttp
          pip install -r requirements.txt
          
      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:9999/api/v1/status; do sleep 2; done'
          
      - name: Run integration tests
        run: |
          # Test daemon API
          python -c "
          import requests
          import sys
          
          # Test status endpoint
          response = requests.get('http://localhost:9999/api/v1/status')
          if response.status_code != 200:
              print(f'Status check failed: {response.status_code}')
              sys.exit(1)
          
          print('âœ… Daemon API responding')
          
          # Test health endpoint
          response = requests.get('http://localhost:9999/api/v1/health')
          if response.status_code != 200:
              print(f'Health check failed: {response.status_code}')
              sys.exit(1)
          
          print('âœ… Health check responding')
          print('ðŸŽ‰ Integration tests passed!')
          "

  # Performance Benchmarks
  performance-test:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          
      - name: Run performance benchmarks
        run: |
          pytest tests/integration/test_performance_metrics.py -v
          echo "Note: VFS performance test is deprecated and skipped"
          
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            performance-results.json
            performance-*.png

  # Security Scan
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [integration-test, performance-test, security-scan]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: IPFS-Kit ${{ github.ref_name }}
          body: |
            ## What's Changed
            
            ### Features
            - Enhanced daemon management
            - Improved multiprocessing performance
            - Comprehensive CLI tools
            - Docker container support
            
            ### Performance
            - 3.4x CPU speedup with multiprocessing
            - 22.9x I/O performance improvement
            - Optimized memory usage
            
            ### Docker Images
            - `ghcr.io/${{ github.repository }}:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository }}:latest`
            
            See [DOCUMENTATION.md](DOCUMENTATION.md) for complete usage guide.
          draft: false
          prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}

  # Deployment
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [release]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Deploy to staging environment
        run: |
          echo "ðŸš€ Deploying IPFS-Kit to staging..."
          # Add deployment steps here
          # For example: kubectl, docker-compose, etc.
          
  # Cleanup
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ github.event.repository.name }}
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true
