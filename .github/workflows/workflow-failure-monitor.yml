name: Workflow Failure Monitor

# This workflow monitors other workflows for failures and creates issues
# to track them for auto-healing
on:
  workflow_run:
    workflows: ["*"]  # Monitor all workflows
    types:
      - completed

permissions:
  contents: read
  actions: read
  issues: write

jobs:
  check-failure:
    name: Check for Workflow Failures
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyGithub requests pyyaml
    
    - name: Analyze workflow failure
      id: analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
        WORKFLOW_NAME: ${{ github.event.workflow_run.name }}
        WORKFLOW_PATH: ${{ github.event.workflow_run.path }}
        REPOSITORY: ${{ github.repository }}
      run: |
        python scripts/ci/analyze_workflow_failure.py
    
    - name: Create issue for failure
      if: steps.analyze.outputs.should_create_issue == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const analysisFile = '/tmp/failure_analysis.json';
          
          let analysis = {};
          if (fs.existsSync(analysisFile)) {
            analysis = JSON.parse(fs.readFileSync(analysisFile, 'utf8'));
          }
          
          const title = `[Auto-Heal] Workflow Failure: ${context.payload.workflow_run.name}`;
          const body = `## Workflow Failure Detected
          
          **Workflow:** ${context.payload.workflow_run.name}
          **Run ID:** ${context.payload.workflow_run.id}
          **Run URL:** ${context.payload.workflow_run.html_url}
          **Conclusion:** ${context.payload.workflow_run.conclusion}
          **Triggered by:** ${context.payload.workflow_run.triggering_actor.login}
          **Branch:** ${context.payload.workflow_run.head_branch}
          **Commit:** ${context.payload.workflow_run.head_sha}
          
          ### Failure Analysis
          
          ${analysis.summary || 'Analysis not available'}
          
          ### Failed Jobs
          
          ${analysis.failed_jobs ? analysis.failed_jobs.map(job => `- ${job.name}: ${job.conclusion}`).join('\n') : 'No job details available'}
          
          ### Error Details
          
          \`\`\`
          ${analysis.error_details || 'No error details available'}
          \`\`\`
          
          ### Next Steps
          
          This issue has been automatically created to track the workflow failure. The auto-healing system will attempt to create a pull request to fix this issue.
          
          ---
          *This issue was automatically created by the Workflow Failure Monitor*
          `;
          
          // Check if a similar issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'auto-heal,workflow-failure'
          });
          
          const existingIssue = issues.data.find(issue => 
            issue.title.includes(context.payload.workflow_run.name) &&
            issue.created_at > new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
          );
          
          if (!existingIssue) {
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['auto-heal', 'workflow-failure', 'needs-fix', 'copilot-agent']
            });
            
            console.log(`Created issue #${issue.data.number}`);
            
            // Store issue number for next workflow
            fs.writeFileSync('/tmp/issue_number.txt', issue.data.number.toString());
          } else {
            console.log(`Issue already exists: #${existingIssue.number}`);
            
            // Add a comment with new failure details
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `### Additional Failure\n\n**Run ID:** ${context.payload.workflow_run.id}\n**Run URL:** ${context.payload.workflow_run.html_url}\n**Time:** ${new Date().toISOString()}`
            });
            
            fs.writeFileSync('/tmp/issue_number.txt', existingIssue.number.toString());
          }
