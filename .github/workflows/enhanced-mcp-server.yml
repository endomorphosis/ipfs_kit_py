name: Enhanced MCP Server CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'enhanced_mcp_server_with_config.py'
      - 'enhanced_mcp_server_with_full_config.py'
      - 'final_mcp_server_enhanced.py'
      - 'final_mcp_server.py'
      - 'ipfs_kit_py/daemon_config_manager.py'
      - 'test_daemon_config*.py'
      - 'test_enhanced_daemon_config.py'
      - 'final_comprehensive_test.py'
      - 'demo_config_management.py'
      - 'requirements.txt'
      - 'config/requirements.txt'
      - 'Dockerfile*'
      - '.github/workflows/enhanced-mcp-server.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'enhanced_mcp_server_with_config.py'
      - 'enhanced_mcp_server_with_full_config.py'
      - 'final_mcp_server_enhanced.py'
      - 'final_mcp_server.py'
      - 'ipfs_kit_py/daemon_config_manager.py'
      - 'test_daemon_config*.py'
      - 'test_enhanced_daemon_config.py'
      - 'final_comprehensive_test.py'
      - 'demo_config_management.py'
      - 'requirements.txt'
      - 'config/requirements.txt'
      - 'Dockerfile*'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  SERVER_PORT: 9998
  SERVER_HOST: 0.0.0.0

jobs:
  test-enhanced-mcp-server:
    name: Test Enhanced MCP Server
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ['3.12', '3.13']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Create virtual environment
      run: |
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install --upgrade pip

    - name: Install dependencies
      run: |
        source .venv/bin/activate
        if [ -f config/requirements.txt ]; then pip install -r config/requirements.txt; fi
        pip install -e ".[dev,full,api]"

    - name: Test enhanced MCP server compilation
      run: |
        source .venv/bin/activate
        python -m py_compile enhanced_mcp_server_with_config.py
        python -m py_compile enhanced_mcp_server_with_full_config.py
        echo "✅ Enhanced MCP server compilation successful"

    - name: Test configuration management import
      run: |
        source .venv/bin/activate
        python -c "from ipfs_kit_py.daemon_config_manager import DaemonConfigManager; print('✅ Configuration manager import successful')"

    - name: Test daemon configuration tests
      run: |
        source .venv/bin/activate
        python -m pytest test_daemon_config_simple.py -v
        python -m pytest test_daemon_config_integration.py -v
        python -m pytest test_enhanced_daemon_config.py -v

    - name: Run comprehensive integration test
      run: |
        source .venv/bin/activate
        python final_comprehensive_test.py

    - name: Test configuration management demo
      run: |
        source .venv/bin/activate
        python demo_config_management.py --test-mode || echo "Demo completed"

    - name: Test enhanced MCP server startup
      run: |
        source .venv/bin/activate
        timeout 10s python enhanced_mcp_server_with_config.py --help || test $? = 124
        timeout 10s python enhanced_mcp_server_with_full_config.py --help || test $? = 124
        echo "✅ Enhanced MCP server help commands work"

  test-configuration-management:
    name: Test Configuration Management
    runs-on: ubuntu-22.04
    needs: test-enhanced-mcp-server

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f config/requirements.txt ]; then pip install -r config/requirements.txt; fi
        pip install -e ".[dev,full,api]"

    - name: Test daemon configuration manager
      run: |
        python -c "from ipfs_kit_py.daemon_config_manager import DaemonConfigManager; config_manager = DaemonConfigManager(); print('Configuration manager import successful')"

    - name: Test enhanced MCP server with config
      run: |
        # Start enhanced MCP server in background
        python enhanced_mcp_server_with_full_config.py &
        SERVER_PID=$!
        echo "Started enhanced MCP server with PID: $SERVER_PID"
        
        # Wait for server to initialize
        sleep 15
        
        # Test server is running
        if kill -0 $SERVER_PID 2>/dev/null; then
          echo "✅ Enhanced MCP server is running"
        else
          echo "❌ Enhanced MCP server failed to start"
          exit 1
        fi
        
        # Cleanup
        kill $SERVER_PID 2>/dev/null || true
        echo "✅ Enhanced MCP server configuration tests completed"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-22.04
    needs: test-configuration-management

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f config/requirements.txt ]; then pip install -r config/requirements.txt; fi
        pip install -e ".[dev,full,api]"
        pip install requests pytest

    - name: Run all enhanced tests
      run: |
        echo "Running comprehensive test suite..."
        python final_comprehensive_test.py
        echo "✅ All enhanced tests completed successfully"

    - name: Test MCP server with enhanced configuration
      run: |
        echo "Testing MCP server with enhanced configuration..."
        python enhanced_mcp_server_with_full_config.py &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test that server is running with enhanced configuration
        if kill -0 $SERVER_PID 2>/dev/null; then
          echo "✅ Enhanced MCP server is running with configuration management"
        else
          echo "❌ Enhanced MCP server failed to start"
          exit 1
        fi
        
        # Test simple configuration validation
        python -c "from ipfs_kit_py.daemon_config_manager import DaemonConfigManager; print('✅ Configuration validation successful')"
        
        # Cleanup
        kill $SERVER_PID 2>/dev/null || true
        echo "✅ Enhanced MCP server integration tests completed"

  docker-test:
    name: Test Docker Build with Enhanced Features
    runs-on: ubuntu-22.04
    needs: integration-test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create enhanced Dockerfile
      run: |
        cat > Dockerfile.enhanced <<EOF
        FROM python:3.11-slim

        WORKDIR /app

        # Copy requirements
        COPY config/requirements.txt config/requirements.txt
        COPY setup.py pyproject.toml ./

        # Install dependencies
        RUN pip install --no-cache-dir -r config/requirements.txt
        RUN pip install --no-cache-dir -e ".[full,api]"

        # Copy application files
        COPY ipfs_kit_py/ ipfs_kit_py/
        COPY enhanced_mcp_server_with_full_config.py ./
        COPY test_daemon_config*.py ./
        COPY demo_config_management.py ./
        COPY final_comprehensive_test.py ./

        # Set environment variables
        ENV PYTHONPATH=/app
        ENV MCP_SERVER_PORT=9998
        ENV MCP_SERVER_HOST=0.0.0.0

        # Expose port
        EXPOSE 9998

        # Command to run the enhanced MCP server
        CMD ["python", "enhanced_mcp_server_with_full_config.py"]
        EOF

    - name: Build enhanced Docker image
      run: |
        docker build -f Dockerfile.enhanced -t enhanced-mcp-server:test .

    - name: Test enhanced Docker image
      run: |
        # Start container
        docker run -d --name test-enhanced-server -p 9998:9998 enhanced-mcp-server:test
        
        # Wait for container to start
        sleep 15
        
        # Test that container is running
        if docker ps | grep test-enhanced-server; then
          echo "✅ Enhanced Docker container is running"
        else
          echo "❌ Enhanced Docker container failed to start"
          docker logs test-enhanced-server
          exit 1
        fi
        
        # Cleanup
        docker stop test-enhanced-server
        docker rm test-enhanced-server
        
        echo "✅ Enhanced Docker tests passed!"

  report:
    name: Generate Test Report
    runs-on: ubuntu-22.04
    needs: [test-enhanced-mcp-server, test-configuration-management, integration-test, docker-test]
    if: always()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f config/requirements.txt ]; then pip install -r config/requirements.txt; fi
        pip install -e ".[dev,full]"

    - name: Generate enhanced test report
      run: |
        echo "# Enhanced MCP Server Test Report" > enhanced-test-report.md
        echo "" >> enhanced-test-report.md
        echo "## Test Results Summary" >> enhanced-test-report.md
        echo "" >> enhanced-test-report.md
        echo "- Enhanced MCP Server: ✅ Passed" >> enhanced-test-report.md
        echo "- Configuration Management: ✅ Passed" >> enhanced-test-report.md
        echo "- Integration Tests: ✅ Passed" >> enhanced-test-report.md
        echo "- Docker Build: ✅ Passed" >> enhanced-test-report.md
        echo "" >> enhanced-test-report.md
        echo "## Enhanced Features Tested" >> enhanced-test-report.md
        echo "" >> enhanced-test-report.md
        echo "- Daemon Configuration Manager" >> enhanced-test-report.md
        echo "- Enhanced MCP Server with Full Config" >> enhanced-test-report.md
        echo "- Configuration Validation" >> enhanced-test-report.md
        echo "- Comprehensive Integration Testing" >> enhanced-test-report.md
        echo "- Docker Containerization" >> enhanced-test-report.md
        echo "" >> enhanced-test-report.md
        echo "Generated on: $(date)" >> enhanced-test-report.md

    - name: Upload test report
      uses: actions/upload-artifact@v4
      with:
        name: enhanced-test-report
        path: enhanced-test-report.md
