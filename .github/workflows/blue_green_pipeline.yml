name: MCP Blue/Green CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ipfs_kit_py/mcp/**'
      - 'ipfs_kit_py/mcp_server/**'
      - 'test/mcp/**'
      - 'test/integration/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'ipfs_kit_py/mcp/**'
      - 'ipfs_kit_py/mcp_server/**'
      - 'test/mcp/**'
      - 'test/integration/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - production
      deployment_mode:
        description: 'Deployment mode'
        required: true
        default: 'gradual'
        type: choice
        options:
          - blue
          - green
          - gradual
          - parallel
          - auto
      green_percentage:
        description: 'Green traffic percentage (for gradual mode)'
        required: false
        default: '10'
        type: string

permissions:
  contents: read
  packages: write

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-20.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Create test directories
        run: |
          mkdir -p test/data/storage_blue test/data/storage_green test/data/stats test/logs
      
      - name: Run unit tests
        run: |
          pytest test/unit/ --cov=ipfs_kit_py/mcp_server --cov-report=xml
      
      - name: Run integration tests
        run: |
          pytest test/integration/test_blue_green_deployment.py -v
      
      - name: Run end-to-end tests
        run: |
          python test/integration/run_blue_green_e2e_test.py --config test/integration/test_blue_green_config.json
      
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
      
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test/logs/
            test/data/stats/
            .coverage
            coverage.xml

  build:
    name: Build Docker Image
    needs: test
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-20.04
    if: github.event_name == 'workflow_dispatch'
    
    environment:
      name: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
          context: ${{ secrets.K8S_CONTEXT }}
      
      - name: Deploy blue/green infrastructure
        run: |
          ./scripts/ci/deploy_blue_green_infra.sh \
            --environment ${{ github.event.inputs.environment }} \
            --registry ${{ env.REGISTRY }} \
            --image-name ${{ env.IMAGE_NAME }} \
            --image-sha ${{ github.sha }}
      
      - name: Configure deployment
        run: |
          ./scripts/ci/configure_blue_green_deployment.sh \
            --environment ${{ github.event.inputs.environment }} \
            --mode ${{ github.event.inputs.deployment_mode }} \
            --green-percentage ${{ github.event.inputs.green_percentage }}

  monitor:
    name: Monitor Deployment
    needs: deploy
    runs-on: ubuntu-20.04
    if: github.event_name == 'workflow_dispatch'
    
    environment:
      name: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install requests matplotlib pandas
      
      - name: Monitor deployment health
        run: |
          python scripts/ci/monitor_deployment.py \
            --environment ${{ github.event.inputs.environment }} \
            --duration 15 \
            --threshold 99.0
      
      - name: Generate performance report
        run: |
          python scripts/ci/generate_performance_report.py \
            --environment ${{ github.event.inputs.environment }} \
            --output monitoring_report.md
      
      - name: Upload monitoring artifacts
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-report
          path: |
            monitoring_report.md
            performance_charts/