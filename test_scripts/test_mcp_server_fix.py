#!/usr/bin/env python3
"""
Test MCP Server Fix

This script is used to create and run comprehensive tests for the MCP server.
It can generate a test file with all the necessary tests to verify IPFS and VFS
functionality through MCP tools.
"""

import argparse
import json
import os
import sys
import requests
from datetime import datetime

# Default configuration
MCP_BASE_URL = "http://localhost:9996"
TEST_FILE = "comprehensive_mcp_test.py"
RESULTS_FILE = "mcp_test_results.json"

def parse_args():
    """Parse command-line arguments."""
    parser = argparse.ArgumentParser(description="Test MCP Server Integration")
    parser.add_argument("--create-test-file", action="store_true", help="Create a comprehensive test file")
    parser.add_argument("--base-url", default=MCP_BASE_URL, help="Base URL for MCP server")
    parser.add_argument("--output", default=TEST_FILE, help="Output test file name")
    parser.add_argument("--verbose", action="store_true", help="Enable verbose output")
    return parser.parse_args()

def create_test_file(base_url, output_file, verbose=False):
    """
    Create a comprehensive test file for testing MCP tools.
    This will dynamically inspect available tools and create tests for each.
    """
    if verbose:
        print(f"Creating test file: {output_file}")
        print(f"Using MCP base URL: {base_url}")
    
    # First check if server is accessible
    try:
        health_response = requests.get(f"{base_url}/health", timeout=5)
        if health_response.status_code != 200:
            print(f"Error: MCP server health check failed with status {health_response.status_code}")
            print("Make sure the MCP server is running and accessible.")
            return False
    except requests.RequestException as e:
        print(f"Error connecting to MCP server: {e}")
        print("Make sure the MCP server is running and accessible.")
        return False
    
    # Get list of available tools by introspection
    try:
        tools_response = requests.post(
            f"{base_url}/jsonrpc",
            json={"jsonrpc": "2.0", "method": "rpc.discover", "params": {}, "id": 1},
            timeout=5
        )
        tools_data = tools_response.json()
        
        if "error" in tools_data:
            print(f"Error retrieving tools: {tools_data['error']['message']}")
            return False
        
        if "result" not in tools_data or "methods" not in tools_data["result"]:
            print("Error: Unexpected response format from server")
            return False
        
        available_methods = tools_data["result"]["methods"]
        if verbose:
            print(f"Found {len(available_methods)} available methods")
    except Exception as e:
        print(f"Error retrieving tool list: {e}")
        return False
    
    # Start writing the test file
    with open(output_file, "w") as f:
        f.write('''#!/usr/bin/env python3
"""
Comprehensive MCP Test

This file was automatically generated by test_mcp_server_fix.py.
It contains tests for all available MCP tools with a focus on
IPFS and VFS functionality.
"""

import argparse
import json
import os
import sys
import requests
from datetime import datetime

# Configuration
MCP_BASE_URL = "http://localhost:9996"
RESULTS_FILE = "mcp_test_results.json"

# Test result tracking
TEST_RESULTS = {
    "timestamp": datetime.now().isoformat(),
    "base_url": MCP_BASE_URL,
    "total_tools": 0,
    "ipfs_tools": 0,
    "mfs_tools": 0, 
    "vfs_tools": 0,
    "other_tools": 0,
    "passed": 0,
    "failed": 0,
    "skipped": 0,
    "tests": []
}

# Utility functions
def call_jsonrpc(method, params=None):
    """Make a JSON-RPC call to the MCP server."""
    if params is None:
        params = {}
    
    try:
        response = requests.post(
            f"{MCP_BASE_URL}/jsonrpc",
            json={"jsonrpc": "2.0", "method": method, "params": params, "id": 1},
            timeout=10
        )
        return response.json()
    except Exception as e:
        return {"error": {"message": str(e)}}

def record_test_result(test_name, result, message, category=None):
    """Record a test result."""
    if category is None:
        if test_name.startswith("ipfs_"):
            category = "ipfs"
            TEST_RESULTS["ipfs_tools"] += 1
        elif test_name.startswith("mfs_"):
            category = "mfs"
            TEST_RESULTS["mfs_tools"] += 1
        elif test_name.startswith("vfs_"):
            category = "vfs"
            TEST_RESULTS["vfs_tools"] += 1
        else:
            category = "other"
            TEST_RESULTS["other_tools"] += 1
    
    TEST_RESULTS["total_tools"] += 1
    
    if result == "PASS":
        TEST_RESULTS["passed"] += 1
    elif result == "FAIL":
        TEST_RESULTS["failed"] += 1
    elif result == "SKIP":
        TEST_RESULTS["skipped"] += 1
    
    TEST_RESULTS["tests"].append({
        "name": test_name,
        "result": result,
        "message": message,
        "category": category
    })
    
    result_color = {
        "PASS": "\\033[92m",  # Green
        "FAIL": "\\033[91m",  # Red
        "SKIP": "\\033[93m"   # Yellow
    }.get(result, "\\033[0m")
    
    print(f"{result_color}{result}\\033[0m: {test_name} - {message}")

def parse_args():
    """Parse command-line arguments."""
    parser = argparse.ArgumentParser(description="Comprehensive MCP Tool Tests")
    parser.add_argument("--base-url", default=MCP_BASE_URL, help="Base URL for MCP server")
    parser.add_argument("--verbose", action="store_true", help="Enable verbose output")
    return parser.parse_args()

# Test implementations
''')

        # Add tests for each category
        test_implementations = []
        
        # IPFS Core Tests
        test_implementations.append('''
# =====================================
# IPFS Core Tests
# =====================================

def test_ipfs_version():
    """Test ipfs_version method."""
    method = "ipfs_version"
    try:
        result = call_jsonrpc(method)
        if "result" in result and isinstance(result["result"], dict) and "Version" in result["result"]:
            record_test_result(method, "PASS", f"IPFS version: {result['result']['Version']}")
            return True
        else:
            record_test_result(method, "FAIL", f"Unexpected result format: {result}")
            return False
    except Exception as e:
        record_test_result(method, "FAIL", f"Exception: {e}")
        return False

def test_ipfs_add():
    """Test ipfs_add method."""
    method = "ipfs_add"
    test_content = f"Test content {datetime.now().isoformat()}"
    try:
        result = call_jsonrpc(method, {"content": test_content})
        if "result" in result and isinstance(result["result"], dict) and "Hash" in result["result"]:
            record_test_result(method, "PASS", f"Successfully added content, CID: {result['result']['Hash']}")
            # Return the hash for use in subsequent tests
            return result["result"]["Hash"]
        else:
            record_test_result(method, "FAIL", f"Unexpected result format: {result}")
            return None
    except Exception as e:
        record_test_result(method, "FAIL", f"Exception: {e}")
        return None

def test_ipfs_cat(cid=None):
    """Test ipfs_cat method."""
    method = "ipfs_cat"
    if cid is None:
        # Try to add content first
        cid = test_ipfs_add()
        if cid is None:
            record_test_result(method, "SKIP", "Skipped because ipfs_add failed")
            return False
    
    try:
        result = call_jsonrpc(method, {"cid": cid})
        if "result" in result:
            record_test_result(method, "PASS", f"Successfully retrieved content for CID: {cid}")
            return True
        else:
            record_test_result(method, "FAIL", f"Unexpected result format: {result}")
            return False
    except Exception as e:
        record_test_result(method, "FAIL", f"Exception: {e}")
        return False
''')

        # MFS Tests
        test_implementations.append('''
# =====================================
# MFS (Mutable File System) Tests
# =====================================

def test_mfs_mkdir():
    """Test mfs_mkdir method."""
    method = "mfs_mkdir"
    test_dir = f"/test-dir-{datetime.now().timestamp()}"
    try:
        result = call_jsonrpc(method, {"path": test_dir})
        if "result" in result:
            record_test_result(method, "PASS", f"Successfully created directory: {test_dir}")
            return test_dir
        else:
            record_test_result(method, "FAIL", f"Unexpected result format: {result}")
            return None
    except Exception as e:
        record_test_result(method, "FAIL", f"Exception: {e}")
        return None

def test_mfs_write(dir_path=None):
    """Test mfs_write method."""
    method = "mfs_write"
    if dir_path is None:
        dir_path = test_mfs_mkdir()
        if dir_path is None:
            record_test_result(method, "SKIP", "Skipped because mfs_mkdir failed")
            return None
    
    file_path = f"{dir_path}/test-file.txt"
    test_content = f"Test content {datetime.now().isoformat()}"
    
    try:
        result = call_jsonrpc(method, {"path": file_path, "content": test_content})
        if "result" in result:
            record_test_result(method, "PASS", f"Successfully wrote to file: {file_path}")
            return {"path": file_path, "content": test_content}
        else:
            record_test_result(method, "FAIL", f"Unexpected result format: {result}")
            return None
    except Exception as e:
        record_test_result(method, "FAIL", f"Exception: {e}")
        return None

def test_mfs_ls(dir_path=None):
    """Test mfs_ls method."""
    method = "mfs_ls"
    if dir_path is None:
        # Create a directory with a file
        dir_path = test_mfs_mkdir()
        if dir_path is None:
            record_test_result(method, "SKIP", "Skipped because mfs_mkdir failed")
            return False
        
        # Write a file to the directory
        file_info = test_mfs_write(dir_path)
        if file_info is None:
            record_test_result(method, "SKIP", "Skipped because mfs_write failed")
            return False
    
    try:
        result = call_jsonrpc(method, {"path": dir_path})
        if "result" in result and isinstance(result["result"], list):
            record_test_result(method, "PASS", f"Successfully listed directory: {dir_path}")
            return True
        else:
            record_test_result(method, "FAIL", f"Unexpected result format: {result}")
            return False
    except Exception as e:
        record_test_result(method, "FAIL", f"Exception: {e}")
        return False

def test_mfs_read(file_info=None):
    """Test mfs_read method."""
    method = "mfs_read"
    if file_info is None:
        # Create a file
        file_info = test_mfs_write()
        if file_info is None:
            record_test_result(method, "SKIP", "Skipped because mfs_write failed")
            return False
    
    try:
        result = call_jsonrpc(method, {"path": file_info["path"]})
        if "result" in result:
            if result["result"] == file_info["content"]:
                record_test_result(method, "PASS", f"Successfully read file with correct content: {file_info['path']}")
                return True
            else:
                record_test_result(method, "FAIL", f"Content mismatch. Expected: {file_info['content']}, Got: {result['result']}")
                return False
        else:
            record_test_result(method, "FAIL", f"Unexpected result format: {result}")
            return False
    except Exception as e:
        record_test_result(method, "FAIL", f"Exception: {e}")
        return False

def test_mfs_rm(path=None):
    """Test mfs_rm method."""
    method = "mfs_rm"
    if path is None:
        # Create a directory
        path = test_mfs_mkdir()
        if path is None:
            record_test_result(method, "SKIP", "Skipped because mfs_mkdir failed")
            return False
    
    try:
        result = call_jsonrpc(method, {"path": path})
        if "result" in result:
            record_test_result(method, "PASS", f"Successfully removed: {path}")
            return True
        else:
            record_test_result(method, "FAIL", f"Unexpected result format: {result}")
            return False
    except Exception as e:
        record_test_result(method, "FAIL", f"Exception: {e}")
        return False
''')

        # VFS Tests
        test_implementations.append('''
# =====================================
# VFS (Virtual File System) Tests
# =====================================

def test_vfs_mount():
    """Test vfs_mount method."""
    method = "vfs_mount"
    mount_point = f"/vfs-mount-{datetime.now().timestamp()}"
    try:
        result = call_jsonrpc(method, {"path": mount_point})
        if "result" in result:
            record_test_result(method, "PASS", f"Successfully created mount point: {mount_point}")
            return mount_point
        else:
            record_test_result(method, "FAIL", f"Unexpected result format: {result}")
            return None
    except Exception as e:
        record_test_result(method, "FAIL", f"Exception: {e}")
        return None

def test_vfs_mkdir():
    """Test vfs_mkdir method."""
    method = "vfs_mkdir"
    test_dir = f"/vfs-test-dir-{datetime.now().timestamp()}"
    try:
        result = call_jsonrpc(method, {"path": test_dir})
        if "result" in result:
            record_test_result(method, "PASS", f"Successfully created directory: {test_dir}")
            return test_dir
        else:
            record_test_result(method, "FAIL", f"Unexpected result format: {result}")
            return None
    except Exception as e:
        record_test_result(method, "FAIL", f"Exception: {e}")
        return None

def test_vfs_write(dir_path=None):
    """Test vfs_write method."""
    method = "vfs_write"
    if dir_path is None:
        dir_path = test_vfs_mkdir()
        if dir_path is None:
            record_test_result(method, "SKIP", "Skipped because vfs_mkdir failed")
            return None
    
    file_path = f"{dir_path}/test-file.txt"
    test_content = f"Test content {datetime.now().isoformat()}"
    
    try:
        result = call_jsonrpc(method, {"path": file_path, "content": test_content})
        if "result" in result:
            record_test_result(method, "PASS", f"Successfully wrote to file: {file_path}")
            return {"path": file_path, "content": test_content}
        else:
            record_test_result(method, "FAIL", f"Unexpected result format: {result}")
            return None
    except Exception as e:
        record_test_result(method, "FAIL", f"Exception: {e}")
        return None

def test_vfs_ls(dir_path=None):
    """Test vfs_ls method."""
    method = "vfs_ls"
    if dir_path is None:
        # Create a directory with a file
        dir_path = test_vfs_mkdir()
        if dir_path is None:
            record_test_result(method, "SKIP", "Skipped because vfs_mkdir failed")
            return False
        
        # Write a file to the directory
        file_info = test_vfs_write(dir_path)
        if file_info is None:
            record_test_result(method, "SKIP", "Skipped because vfs_write failed")
            return False
    
    try:
        result = call_jsonrpc(method, {"path": dir_path})
        if "result" in result and isinstance(result["result"], list):
            record_test_result(method, "PASS", f"Successfully listed directory: {dir_path}")
            return True
        else:
            record_test_result(method, "FAIL", f"Unexpected result format: {result}")
            return False
    except Exception as e:
        record_test_result(method, "FAIL", f"Exception: {e}")
        return False

def test_vfs_read(file_info=None):
    """Test vfs_read method."""
    method = "vfs_read"
    if file_info is None:
        # Create a file
        file_info = test_vfs_write()
        if file_info is None:
            record_test_result(method, "SKIP", "Skipped because vfs_write failed")
            return False
    
    try:
        result = call_jsonrpc(method, {"path": file_info["path"]})
        if "result" in result:
            if result["result"] == file_info["content"]:
                record_test_result(method, "PASS", f"Successfully read file with correct content: {file_info['path']}")
                return True
            else:
                record_test_result(method, "FAIL", f"Content mismatch. Expected: {file_info['content']}, Got: {result['result']}")
                return False
        else:
            record_test_result(method, "FAIL", f"Unexpected result format: {result}")
            return False
    except Exception as e:
        record_test_result(method, "FAIL", f"Exception: {e}")
        return False

def test_vfs_rm(path=None):
    """Test vfs_rm method."""
    method = "vfs_rm"
    if path is None:
        # Create a directory
        path = test_vfs_mkdir()
        if path is None:
            record_test_result(method, "SKIP", "Skipped because vfs_mkdir failed")
            return False
    
    try:
        result = call_jsonrpc(method, {"path": path})
        if "result" in result:
            record_test_result(method, "PASS", f"Successfully removed: {path}")
            return True
        else:
            record_test_result(method, "FAIL", f"Unexpected result format: {result}")
            return False
    except Exception as e:
        record_test_result(method, "FAIL", f"Exception: {e}")
        return False
''')

        # Integration Tests
        test_implementations.append('''
# =====================================
# Integration Tests
# =====================================

def test_ipfs_vfs_integration():
    """Test end-to-end integration between IPFS and VFS."""
    method = "ipfs_vfs_integration"
    
    # 1. Add content to IPFS
    test_content = f"Integration test content {datetime.now().isoformat()}"
    result = call_jsonrpc("ipfs_add", {"content": test_content})
    if "error" in result or "result" not in result or "Hash" not in result["result"]:
        record_test_result(method, "FAIL", "Failed to add content to IPFS")
        return False
    
    cid = result["result"]["Hash"]
    
    # 2. Create a directory in VFS
    vfs_dir = f"/vfs-integration-test-{datetime.now().timestamp()}"
    result = call_jsonrpc("vfs_mkdir", {"path": vfs_dir})
    if "error" in result:
        record_test_result(method, "FAIL", f"Failed to create directory in VFS: {result}")
        return False
    
    # 3. Write CID to a file in VFS
    vfs_file = f"{vfs_dir}/cid.txt"
    result = call_jsonrpc("vfs_write", {"path": vfs_file, "content": cid})
    if "error" in result:
        record_test_result(method, "FAIL", f"Failed to write CID to VFS file: {result}")
        return False
    
    # 4. Read CID from VFS file
    result = call_jsonrpc("vfs_read", {"path": vfs_file})
    if "error" in result or "result" not in result or result["result"] != cid:
        record_test_result(method, "FAIL", f"Failed to read CID from VFS file: {result}")
        return False
    
    read_cid = result["result"]
    
    # 5. Get content from IPFS using the CID from VFS
    result = call_jsonrpc("ipfs_cat", {"cid": read_cid})
    if "error" in result or "result" not in result or result["result"] != test_content:
        record_test_result(method, "FAIL", f"Failed to retrieve content from IPFS using CID from VFS: {result}")
        return False
    
    record_test_result(method, "PASS", "Successfully verified end-to-end integration between IPFS and VFS")
    return True
''')

        # Generate tests for all available methods
        dynamic_tests = []
        
        ipfs_methods = [m for m in available_methods if m.startswith("ipfs_")]
        mfs_methods = [m for m in available_methods if m.startswith("mfs_")]
        vfs_methods = [m for m in available_methods if m.startswith("vfs_")]
        other_methods = [m for m in available_methods 
                        if not m.startswith(("ipfs_", "mfs_", "vfs_", "rpc."))]
        
        # Skip methods we already have specific tests for
        predefined_methods = ["ipfs_version", "ipfs_add", "ipfs_cat", 
                            "mfs_mkdir", "mfs_write", "mfs_ls", "mfs_read", "mfs_rm",
                            "vfs_mount", "vfs_mkdir", "vfs_write", "vfs_ls", "vfs_read", "vfs_rm"]
        
        for method in available_methods:
            if method in predefined_methods or method.startswith("rpc."):
                continue
            
            # Generate a simple test function for other methods
            dynamic_tests.append(f'''
def test_{method}():
    """Test {method} method."""
    method = "{method}"
    try:
        # Call with minimal/empty parameters, might fail for some methods
        result = call_jsonrpc(method, {})
        
        if "error" not in result:
            record_test_result(method, "PASS", f"Method exists and accepts empty parameters")
            return True
        elif result.get("error", {}).get("code") == -32602:  # Invalid params
            record_test_result(method, "PASS", f"Method exists but requires parameters")
            return True
        else:
            record_test_result(method, "FAIL", f"Method failed: {result.get('error', {}).get('message', 'Unknown error')}")
            return False
    except Exception as e:
        record_test_result(method, "FAIL", f"Exception: {e}")
        return False
''')
        
        # Write all test implementations
        for impl in test_implementations:
            f.write(impl)
        
        # Write dynamic tests
        if dynamic_tests:
            f.write('\n# =====================================\n# Dynamically Generated Tests\n# =====================================\n')
            for test in dynamic_tests:
                f.write(test)
        
        # Write main function
        f.write('''
def run_all_tests():
    """Run all tests."""
    print("\\033[1m===== Starting Comprehensive MCP Tests =====\\033[0m")
    print(f"MCP Base URL: {MCP_BASE_URL}\\n")
    
    # Check server health
    try:
        health_response = requests.get(f"{MCP_BASE_URL}/health", timeout=5)
        if health_response.status_code != 200:
            print(f"\\033[91mError: MCP server health check failed with status {health_response.status_code}\\033[0m")
            print("Make sure the MCP server is running and accessible.")
            return False
        print("\\033[92mMCP server health check passed\\033[0m\\n")
    except requests.RequestException as e:
        print(f"\\033[91mError connecting to MCP server: {e}\\033[0m")
        print("Make sure the MCP server is running and accessible.")
        return False
    
    # IPFS Core Tests
    print("\\033[1m----- IPFS Core Tests -----\\033[0m")
    test_ipfs_version()
    cid = test_ipfs_add()
    if cid:
        test_ipfs_cat(cid)
    else:
        test_ipfs_cat()  # Will be skipped
    
    # MFS Tests
    print("\\n\\033[1m----- MFS Tests -----\\033[0m")
    mfs_dir = test_mfs_mkdir()
    if mfs_dir:
        file_info = test_mfs_write(mfs_dir)
        if file_info:
            test_mfs_read(file_info)
        test_mfs_ls(mfs_dir)
        test_mfs_rm(mfs_dir)
    
    # VFS Tests
    print("\\n\\033[1m----- VFS Tests -----\\033[0m")
    test_vfs_mount()
    vfs_dir = test_vfs_mkdir()
    if vfs_dir:
        file_info = test_vfs_write(vfs_dir)
        if file_info:
            test_vfs_read(file_info)
        test_vfs_ls(vfs_dir)
        test_vfs_rm(vfs_dir)
    
    # Integration Tests
    print("\\n\\033[1m----- Integration Tests -----\\033[0m")
    test_ipfs_vfs_integration()
    
    # Run any dynamically generated tests
    print("\\n\\033[1m----- Additional Tool Tests -----\\033[0m")
''')

        # Add calls to the dynamically generated test functions
        for method in available_methods:
            if method in predefined_methods or method.startswith("rpc."):
                continue
            f.write(f"    test_{method}()\n")
        
        # Final part of the main function
        f.write('''
    # Print summary
    print("\\n\\033[1m===== Test Summary =====\\033[0m")
    print(f"Total Tests: {TEST_RESULTS['passed'] + TEST_RESULTS['failed'] + TEST_RESULTS['skipped']}")
    print(f"Passed: \\033[92m{TEST_RESULTS['passed']}\\033[0m")
    print(f"Failed: \\033[91m{TEST_RESULTS['failed']}\\033[0m")
    print(f"Skipped: \\033[93m{TEST_RESULTS['skipped']}\\033[0m")
    
    # Write results to file
    with open(RESULTS_FILE, "w") as f:
        json.dump(TEST_RESULTS, f, indent=2)
    
    print(f"\\nDetailed results saved to {RESULTS_FILE}")
    
    return TEST_RESULTS["failed"] == 0

if __name__ == "__main__":
    args = parse_args()
    
    if args.base_url:
        MCP_BASE_URL = args.base_url
    
    # Run all tests and exit with appropriate code
    success = run_all_tests()
    sys.exit(0 if success else 1)
''')
    
    # Make the file executable
    os.chmod(output_file, 0o755)
    
    if verbose:
        print(f"Test file created successfully: {output_file}")
        print("You can run it directly with:")
        print(f"  ./{output_file}")
    
    return True

def main():
    """Main function."""
    args = parse_args()
    
    if args.create_test_file:
        success = create_test_file(args.base_url, args.output, args.verbose)
        return 0 if success else 1
    
    # If we reach here, no action was specified
    print("No action specified. Use --create-test-file to create a test file.")
    return 1

if __name__ == "__main__":
    sys.exit(main())
