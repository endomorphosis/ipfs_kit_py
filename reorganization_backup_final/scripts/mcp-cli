#!/usr/bin/env python3
"""
MCP CLI - Command Line Interface for MCP Server

This tool provides a convenient command-line interface for interacting with
the MCP server, including storage operations, migration, search, and more.
"""

import os
import sys
import json
import time
import yaml
import logging
import argparse
import requests
import asyncio
from pathlib import Path
from typing import Dict, List, Any, Optional, Union

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("mcp_cli")

# Default MCP server URL
DEFAULT_MCP_URL = os.environ.get("MCP_SERVER_URL", "http://localhost:5000")

class MCPClient:
    """Client for interacting with MCP server API."""
    
    def __init__(self, base_url: str = DEFAULT_MCP_URL):
        """
        Initialize MCP client.
        
        Args:
            base_url: Base URL for MCP server
        """
        self.base_url = base_url.rstrip("/")
        self.session = requests.Session()
    
    def _url(self, path: str) -> str:
        """
        Get full URL for API path.
        
        Args:
            path: API path
            
        Returns:
            Full URL
        """
        return f"{self.base_url}/{path.lstrip('/')}"
    
    def _handle_response(self, response: requests.Response) -> Dict[str, Any]:
        """
        Handle API response.
        
        Args:
            response: Response object
            
        Returns:
            Response data
            
        Raises:
            Exception: If response status is not 2xx
        """
        if 200 <= response.status_code < 300:
            if response.headers.get("content-type") == "application/json":
                return response.json()
            else:
                return {"success": True, "data": response.content}
        else:
            try:
                error_data = response.json()
                error_message = error_data.get("detail", f"HTTP {response.status_code}")
            except:
                error_message = f"HTTP {response.status_code}: {response.text}"
            
            raise Exception(error_message)
    
    def get_status(self) -> Dict[str, Any]:
        """
        Get server status.
        
        Returns:
            Status information
        """
        response = self.session.get(self._url("/api/v0/status"))
        return self._handle_response(response)
    
    def list_backends(self) -> Dict[str, Any]:
        """
        List available storage backends.
        
        Returns:
            List of backends
        """
        response = self.session.get(self._url("/api/v0/storage/backends"))
        return self._handle_response(response)
    
    def add_content(self, file_path: str, backend: str = "ipfs", pin: bool = True) -> Dict[str, Any]:
        """
        Add content to a storage backend.
        
        Args:
            file_path: Path to file
            backend: Backend name
            pin: Whether to pin content
            
        Returns:
            Operation result
        """
        file_path = Path(file_path)
        if not file_path.exists():
            raise FileNotFoundError(f"File not found: {file_path}")
        
        with open(file_path, "rb") as f:
            files = {"file": (file_path.name, f)}
            data = {"backend": backend, "pin": "true" if pin else "false"}
            
            response = self.session.post(
                self._url("/api/v0/storage/add"),
                files=files,
                data=data
            )
            
            return self._handle_response(response)
    
    def get_content(self, cid: str, backend: str = "ipfs", output_path: Optional[str] = None) -> Dict[str, Any]:
        """
        Get content from a storage backend.
        
        Args:
            cid: Content identifier
            backend: Backend name
            output_path: Path to save content to (if None, return data)
            
        Returns:
            Operation result
        """
        response = self.session.get(
            self._url(f"/api/v0/storage/get/{backend}/{cid}"),
            stream=True
        )
        
        if 200 <= response.status_code < 300:
            if output_path:
                # Save to file
                output_path = Path(output_path)
                output_path.parent.mkdir(parents=True, exist_ok=True)
                
                with open(output_path, "wb") as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        f.write(chunk)
                
                return {
                    "success": True,
                    "path": str(output_path),
                    "size": output_path.stat().st_size
                }
            else:
                # Return data
                content = response.content
                
                # Try to parse as JSON if content type is JSON
                if response.headers.get("content-type") == "application/json":
                    try:
                        return json.loads(content)
                    except:
                        pass
                
                # Return raw data
                return {"success": True, "data": content}
        else:
            try:
                error_data = response.json()
                error_message = error_data.get("detail", f"HTTP {response.status_code}")
            except:
                error_message = f"HTTP {response.status_code}: {response.text}"
            
            raise Exception(error_message)
    
    def pin_content(self, cid: str, backend: str = "ipfs", background: bool = False) -> Dict[str, Any]:
        """
        Pin content in a storage backend.
        
        Args:
            cid: Content identifier
            backend: Backend name
            background: Whether to pin in background
            
        Returns:
            Operation result
        """
        # For now, only IPFS supports pinning
        if backend != "ipfs":
            raise ValueError(f"Pinning is only supported for IPFS backend, not {backend}")
        
        data = {"cid": cid, "background": "true" if background else "false"}
        
        response = self.session.post(
            self._url("/api/v0/ipfs/pin/add"),
            data=data
        )
        
        return self._handle_response(response)
    
    def list_pins(self, backend: str = "ipfs", cid: Optional[str] = None) -> Dict[str, Any]:
        """
        List pinned content in a storage backend.
        
        Args:
            backend: Backend name
            cid: Optional content identifier to filter by
            
        Returns:
            List of pins
        """
        # For now, only IPFS supports listing pins
        if backend != "ipfs":
            raise ValueError(f"Listing pins is only supported for IPFS backend, not {backend}")
        
        params = {}
        if cid:
            params["cid"] = cid
        
        response = self.session.get(
            self._url("/api/v0/ipfs/pin/ls"),
            params=params
        )
        
        return self._handle_response(response)
    
    def unpin_content(self, cid: str, backend: str = "ipfs") -> Dict[str, Any]:
        """
        Unpin content in a storage backend.
        
        Args:
            cid: Content identifier
            backend: Backend name
            
        Returns:
            Operation result
        """
        # For now, only IPFS supports unpinning
        if backend != "ipfs":
            raise ValueError(f"Unpinning is only supported for IPFS backend, not {backend}")
        
        data = {"cid": cid}
        
        response = self.session.post(
            self._url("/api/v0/ipfs/pin/rm"),
            data=data
        )
        
        return self._handle_response(response)
    
    def list_migration_policies(self) -> Dict[str, Any]:
        """
        List migration policies.
        
        Returns:
            List of policies
        """
        response = self.session.get(self._url("/api/v0/migration/policies"))
        return self._handle_response(response)
    
    def create_migration_policy(
        self,
        name: str,
        source_backend: str,
        destination_backend: str,
        content_filter: Dict[str, Any] = {},
        schedule: str = "manual"
    ) -> Dict[str, Any]:
        """
        Create a migration policy.
        
        Args:
            name: Policy name
            source_backend: Source backend name
            destination_backend: Destination backend name
            content_filter: Content filter
            schedule: Schedule (manual, daily, weekly)
            
        Returns:
            Operation result
        """
        data = {
            "name": name,
            "source_backend": source_backend,
            "destination_backend": destination_backend,
            "content_filter": json.dumps(content_filter),
            "schedule": schedule
        }
        
        response = self.session.post(
            self._url("/api/v0/migration/policy"),
            data=data
        )
        
        return self._handle_response(response)
    
    def execute_migration_policy(self, policy_name: str) -> Dict[str, Any]:
        """
        Execute a migration policy.
        
        Args:
            policy_name: Policy name
            
        Returns:
            Operation result with task IDs
        """
        response = self.session.post(
            self._url(f"/api/v0/migration/execute/{policy_name}")
        )
        
        return self._handle_response(response)
    
    def get_migration_task(self, task_id: str) -> Dict[str, Any]:
        """
        Get migration task status.
        
        Args:
            task_id: Task ID
            
        Returns:
            Task information
        """
        response = self.session.get(
            self._url(f"/api/v0/migration/task/{task_id}")
        )
        
        return self._handle_response(response)
    
    def get_search_status(self) -> Dict[str, Any]:
        """
        Get search engine status.
        
        Returns:
            Search status
        """
        response = self.session.get(self._url("/api/v0/search/status"))
        return self._handle_response(response)
    
    def index_document(
        self,
        cid: str,
        text: Optional[str] = None,
        title: Optional[str] = None,
        content_type: Optional[str] = None,
        metadata: Dict[str, Any] = {},
        extract_text: bool = False
    ) -> Dict[str, Any]:
        """
        Index a document for search.
        
        Args:
            cid: Content identifier
            text: Document text
            title: Document title
            content_type: Content type
            metadata: Metadata
            extract_text: Whether to extract text from content
            
        Returns:
            Operation result
        """
        data = {
            "cid": cid,
            "extract_text": "true" if extract_text else "false",
            "metadata": json.dumps(metadata)
        }
        
        if text:
            data["text"] = text
        
        if title:
            data["title"] = title
        
        if content_type:
            data["content_type"] = content_type
        
        response = self.session.post(
            self._url("/api/v0/search/index"),
            data=data
        )
        
        return self._handle_response(response)
    
    def search_text(
        self,
        query: str,
        limit: int = 10,
        offset: int = 0,
        metadata_filters: Dict[str, Any] = {}
    ) -> Dict[str, Any]:
        """
        Search for documents using text search.
        
        Args:
            query: Search query
            limit: Maximum number of results
            offset: Results offset
            metadata_filters: Metadata filters
            
        Returns:
            Search results
        """
        data = {
            "query": query,
            "limit": str(limit),
            "offset": str(offset),
            "metadata_filters": json.dumps(metadata_filters)
        }
        
        response = self.session.post(
            self._url("/api/v0/search/text"),
            data=data
        )
        
        return self._handle_response(response)


def command_status(args, client):
    """Get server status."""
    status = client.get_status()
    
    if args.format == "json":
        print(json.dumps(status, indent=2))
    else:
        print("MCP Server Status")
        print(f"Status: {status.get('status', 'unknown')}")
        print(f"Components initialized: {status.get('components_initialized', False)}")
        
        backends = status.get("backends", {})
        if backends:
            print("\nAvailable Backends:")
            for name, info in backends.items():
                print(f"- {name} ({info.get('type', 'unknown')}): {info.get('status', 'unknown')}")
        
        search = status.get("search", {})
        if search:
            print("\nSearch Engine:")
            print(f"Documents: {search.get('document_count', 0)}")
            print(f"Vector search: {search.get('vector_search_enabled', False)}")


def command_backends(args, client):
    """List storage backends."""
    backends = client.list_backends()
    
    if args.format == "json":
        print(json.dumps(backends, indent=2))
    else:
        backends_list = backends.get("backends", [])
        if backends_list:
            print("Available Storage Backends:")
            for backend in backends_list:
                print(f"- {backend}")
        else:
            print("No storage backends available")


def command_add(args, client):
    """Add content to a storage backend."""
    # Handle directory
    if args.recursive and os.path.isdir(args.file):
        # Process directory
        print(f"Processing directory: {args.file}")
        
        results = []
        for root, _, files in os.walk(args.file):
            for file in files:
                file_path = os.path.join(root, file)
                rel_path = os.path.relpath(file_path, args.file)
                
                try:
                    print(f"Adding: {rel_path}")
                    result = client.add_content(file_path, args.backend, args.pin)
                    results.append({
                        "path": rel_path,
                        "cid": result.get("identifier"),
                        "size": result.get("size", 0)
                    })
                except Exception as e:
                    print(f"Error adding {rel_path}: {e}")
        
        # Create a wrapper result
        wrapper_result = {
            "success": True,
            "files": results
        }
        
        if args.format == "json":
            print(json.dumps(wrapper_result, indent=2))
        else:
            for file_result in results:
                print(f"{file_result['path']}: {file_result['cid']}")
    else:
        # Process single file
        try:
            result = client.add_content(args.file, args.backend, args.pin)
            
            if args.format == "json":
                print(json.dumps(result, indent=2))
            else:
                if result.get("success", False):
                    print(f"Added to {args.backend}: {result.get('identifier')}")
                else:
                    print(f"Error: {result.get('error')}")
        except Exception as e:
            print(f"Error: {e}")


def command_get(args, client):
    """Get content from a storage backend."""
    try:
        result = client.get_content(args.cid, args.backend, args.output)
        
        if args.output:
            if args.format == "json":
                print(json.dumps(result, indent=2))
            else:
                print(f"Saved to: {result.get('path')}")
        else:
            if args.format == "json":
                if isinstance(result.get("data"), bytes):
                    # For binary data, show a message instead of raw bytes
                    result["data"] = f"[Binary data, {len(result['data'])} bytes]"
                print(json.dumps(result, indent=2))
            else:
                data = result.get("data")
                if isinstance(data, bytes):
                    # Try to decode as text
                    try:
                        print(data.decode("utf-8"))
                    except UnicodeDecodeError:
                        print(f"[Binary data, {len(data)} bytes]")
                else:
                    print(data)
    except Exception as e:
        print(f"Error: {e}")


def command_pin(args, client):
    """Pin content in a storage backend."""
    try:
        result = client.pin_content(args.cid, args.backend, args.background)
        
        if args.format == "json":
            print(json.dumps(result, indent=2))
        else:
            if result.get("success", False):
                if args.background:
                    print(f"Background pinning requested: {result.get('operation_id')}")
                else:
                    print(f"Pinned: {args.cid}")
            else:
                print(f"Error: {result.get('error')}")
    except Exception as e:
        print(f"Error: {e}")


def command_ls_pins(args, client):
    """List pinned content in a storage backend."""
    try:
        result = client.list_pins(args.backend, args.cid)
        
        if args.format == "json":
            print(json.dumps(result, indent=2))
        else:
            if result.get("success", False):
                pins = result.get("pins", {})
                if pins:
                    print(f"Pins in {args.backend}:")
                    for cid, info in pins.items():
                        print(f"- {cid}: {info.get('Type', 'unknown')}")
                else:
                    print("No pins found")
            else:
                print(f"Error: {result.get('error')}")
    except Exception as e:
        print(f"Error: {e}")


def command_unpin(args, client):
    """Unpin content in a storage backend."""
    try:
        result = client.unpin_content(args.cid, args.backend)
        
        if args.format == "json":
            print(json.dumps(result, indent=2))
        else:
            if result.get("success", False):
                print(f"Unpinned: {args.cid}")
            else:
                print(f"Error: {result.get('error')}")
    except Exception as e:
        print(f"Error: {e}")


def command_ls_policies(args, client):
    """List migration policies."""
    try:
        result = client.list_migration_policies()
        
        if args.format == "json":
            print(json.dumps(result, indent=2))
        else:
            policies = result.get("policies", [])
            if policies:
                print("Migration Policies:")
                for policy in policies:
                    print(f"- {policy['name']}: {policy['source_backend']} -> {policy['destination_backend']}")
                    if args.verbose:
                        print(f"  Schedule: {policy['schedule']}")
                        print(f"  Filter: {policy.get('content_filter', {})}")
                        print(f"  Enabled: {policy.get('enabled', True)}")
                        print()
            else:
                print("No migration policies found")
    except Exception as e:
        print(f"Error: {e}")


def command_create_policy(args, client):
    """Create a migration policy."""
    try:
        # Parse content filter
        content_filter = {}
        if args.filter:
            try:
                content_filter = json.loads(args.filter)
            except json.JSONDecodeError:
                raise ValueError(f"Invalid filter JSON: {args.filter}")
        
        result = client.create_migration_policy(
            name=args.name,
            source_backend=args.source,
            destination_backend=args.destination,
            content_filter=content_filter,
            schedule=args.schedule
        )
        
        if args.format == "json":
            print(json.dumps(result, indent=2))
        else:
            if result.get("success", False):
                print(f"Created policy: {args.name}")
            else:
                print(f"Error: {result.get('error')}")
    except Exception as e:
        print(f"Error: {e}")


def command_execute_policy(args, client):
    """Execute a migration policy."""
    try:
        result = client.execute_migration_policy(args.name)
        
        if args.format == "json":
            print(json.dumps(result, indent=2))
        else:
            if result.get("success", False):
                task_ids = result.get("task_ids", [])
                if task_ids:
                    print(f"Created {len(task_ids)} migration tasks:")
                    for task_id in task_ids:
                        print(f"- {task_id}")
                else:
                    print("No tasks created (no content matches policy filter)")
            else:
                print(f"Error: {result.get('error')}")
    except Exception as e:
        print(f"Error: {e}")


def command_migration_task(args, client):
    """Get migration task status."""
    try:
        result = client.get_migration_task(args.task_id)
        
        if args.format == "json":
            print(json.dumps(result, indent=2))
        else:
            if result.get("success", False):
                task = result.get("task", {})
                print(f"Task ID: {task.get('id')}")
                print(f"Type: {task.get('type')}")
                print(f"Status: {task.get('status')}")
                print(f"Content ID: {task.get('content_id')}")
                print(f"Source: {task.get('source_backend')}")
                print(f"Destination: {task.get('destination_backend')}")
                
                # Print timestamps
                created_at = task.get("created_at")
                if created_at:
                    created_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(created_at))
                    print(f"Created: {created_time}")
                
                started_at = task.get("started_at")
                if started_at:
                    started_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(started_at))
                    print(f"Started: {started_time}")
                
                completed_at = task.get("completed_at")
                if completed_at:
                    completed_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(completed_at))
                    print(f"Completed: {completed_time}")
                
                # Print error if any
                error = task.get("error")
                if error:
                    print(f"Error: {error}")
                
                # Print metadata if any and verbose
                if args.verbose:
                    metadata = task.get("metadata", {})
                    if metadata:
                        print("\nMetadata:")
                        for key, value in metadata.items():
                            print(f"  {key}: {value}")
            else:
                print(f"Error: {result.get('error')}")
    except Exception as e:
        print(f"Error: {e}")


def command_search_status(args, client):
    """Get search engine status."""
    try:
        result = client.get_search_status()
        
        if args.format == "json":
            print(json.dumps(result, indent=2))
        else:
            if result.get("success", False):
                stats = result.get("stats", {})
                print("Search Engine Status:")
                print(f"Documents: {stats.get('document_count', 0)}")
                print(f"Indexed text: {stats.get('indexed_text_count', 0)}")
                print(f"Tags: {stats.get('tags_count', 0)}")
                print(f"Vector search: {stats.get('vector_search_enabled', False)}")
                
                if stats.get("vector_search_enabled", False):
                    print(f"Vector model: {stats.get('vector_model')}")
                    print(f"Vectors: {stats.get('vector_count', 0)}")
            else:
                print(f"Error: {result.get('error')}")
    except Exception as e:
        print(f"Error: {e}")


def command_index(args, client):
    """Index a document for search."""
    try:
        # Read text from file if specified
        text = None
        if args.text_file:
            with open(args.text_file, "r") as f:
                text = f.read()
        
        # Parse metadata
        metadata = {}
        if args.metadata:
            try:
                metadata = json.loads(args.metadata)
            except json.JSONDecodeError:
                raise ValueError(f"Invalid metadata JSON: {args.metadata}")
        
        result = client.index_document(
            cid=args.cid,
            text=text,
            title=args.title,
            content_type=args.content_type,
            metadata=metadata,
            extract_text=args.extract_text
        )
        
        if args.format == "json":
            print(json.dumps(result, indent=2))
        else:
            if result.get("success", False):
                print(f"Indexed document: {args.cid}")
            else:
                print(f"Error: {result.get('error')}")
    except Exception as e:
        print(f"Error: {e}")


def command_search(args, client):
    """Search for documents."""
    try:
        # Parse metadata filters
        metadata_filters = {}
        if args.metadata_filters:
            try:
                metadata_filters = json.loads(args.metadata_filters)
            except json.JSONDecodeError:
                raise ValueError(f"Invalid metadata filters JSON: {args.metadata_filters}")
        
        result = client.search_text(
            query=args.query,
            limit=args.limit,
            offset=args.offset,
            metadata_filters=metadata_filters
        )
        
        if args.format == "json":
            print(json.dumps(result, indent=2))
        else:
            if result.get("success", False):
                results = result.get("results", [])
                if results:
                    print(f"Found {len(results)} results:")
                    for i, item in enumerate(results):
                        print(f"{i+1}. {item.get('title') or item.get('cid')}")
                        print(f"   CID: {item.get('cid')}")
                        print(f"   Content type: {item.get('content_type')}")
                        
                        tags = item.get("tags", [])
                        if tags:
                            print(f"   Tags: {', '.join(tags)}")
                        
                        if args.verbose:
                            # Print text snippet
                            text = item.get("text", "")
                            if text:
                                snippet = text[:200] + "..." if len(text) > 200 else text
                                print(f"   Text: {snippet}")
                            
                            # Print metadata
                            metadata = item.get("metadata", {})
                            if metadata:
                                print("   Metadata:")
                                for key, value in metadata.items():
                                    print(f"     {key}: {value}")
                        
                        print()
                else:
                    print("No results found")
            else:
                print(f"Error: {result.get('error')}")
    except Exception as e:
        print(f"Error: {e}")


def main():
    """Main entry point for MCP CLI."""
    parser = argparse.ArgumentParser(
        description="MCP CLI - Command Line Interface for MCP Server",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Get server status
  mcp-cli status
  
  # Add content to IPFS
  mcp-cli add myfile.txt
  
  # Get content from IPFS
  mcp-cli get QmHash
  
  # Pin content in IPFS
  mcp-cli pin QmHash
  
  # Create a migration policy
  mcp-cli migration create-policy --name my-policy --source ipfs --destination s3
  
  # Search for documents
  mcp-cli search "my query"
"""
    )
    
    # Global options
    parser.add_argument("--url", default=DEFAULT_MCP_URL, help="MCP server URL")
    parser.add_argument(
        "--format", choices=["text", "json"], default="text",
        help="Output format (text or JSON)"
    )
    parser.add_argument("--verbose", "-v", action="store_true", help="Verbose output")
    
    # Subparsers
    subparsers = parser.add_subparsers(dest="command", help="Command")
    
    # Status command
    status_parser = subparsers.add_parser("status", help="Get server status")
    
    # Storage backend commands
    backends_parser = subparsers.add_parser("backends", help="List storage backends")
    
    # Content commands
    add_parser = subparsers.add_parser("add", help="Add content to a storage backend")
    add_parser.add_argument("file", help="File or directory to add")
    add_parser.add_argument("--backend", default="ipfs", help="Storage backend")
    add_parser.add_argument("--pin", action="store_true", default=True, help="Pin content (default: True)")
    add_parser.add_argument("--no-pin", action="store_false", dest="pin", help="Do not pin content")
    add_parser.add_argument("--recursive", "-r", action="store_true", help="Add directory recursively")
    
    get_parser = subparsers.add_parser("get", help="Get content from a storage backend")
    get_parser.add_argument("cid", help="Content identifier")
    get_parser.add_argument("--backend", default="ipfs", help="Storage backend")
    get_parser.add_argument("--output", "-o", help="Output file path")
    
    pin_parser = subparsers.add_parser("pin", help="Pin content in a storage backend")
    pin_parser.add_argument("cid", help="Content identifier")
    pin_parser.add_argument("--backend", default="ipfs", help="Storage backend")
    pin_parser.add_argument("--background", "-b", action="store_true", help="Pin in background")
    
    ls_pins_parser = subparsers.add_parser("ls-pins", help="List pinned content in a storage backend")
    ls_pins_parser.add_argument("--backend", default="ipfs", help="Storage backend")
    ls_pins_parser.add_argument("--cid", help="Filter by content identifier")
    
    unpin_parser = subparsers.add_parser("unpin", help="Unpin content in a storage backend")
    unpin_parser.add_argument("cid", help="Content identifier")
    unpin_parser.add_argument("--backend", default="ipfs", help="Storage backend")
    
    # Migration commands
    migration_parser = subparsers.add_parser("migration", help="Migration commands")
    migration_subparsers = migration_parser.add_subparsers(dest="migration_command", help="Migration command")
    
    ls_policies_parser = migration_subparsers.add_parser("ls-policies", help="List migration policies")
    
    create_policy_parser = migration_subparsers.add_parser("create-policy", help="Create a migration policy")
    create_policy_parser.add_argument("--name", required=True, help="Policy name")
    create_policy_parser.add_argument("--source", required=True, help="Source backend")
    create_policy_parser.add_argument("--destination", required=True, help="Destination backend")
    create_policy_parser.add_argument("--filter", help="Content filter as JSON")
    create_policy_parser.add_argument(
        "--schedule", default="manual", 
        choices=["manual", "daily", "weekly"], 
        help="Schedule (manual, daily, weekly)"
    )
    
    execute_policy_parser = migration_subparsers.add_parser("execute-policy", help="Execute a migration policy")
    execute_policy_parser.add_argument("name", help="Policy name")
    
    task_parser = migration_subparsers.add_parser("task", help="Get migration task status")
    task_parser.add_argument("task_id", help="Task ID")
    
    # Search commands
    search_parser = subparsers.add_parser("search", help="Search commands")
    search_subparsers = search_parser.add_subparsers(dest="search_command", help="Search command")
    
    search_status_parser = search_subparsers.add_parser("status", help="Get search engine status")
    
    index_parser = search_subparsers.add_parser("index", help="Index a document for search")
    index_parser.add_argument("cid", help="Content identifier")
    index_parser.add_argument("--text-file", help="File containing text to index")
    index_parser.add_argument("--title", help="Document title")
    index_parser.add_argument("--content-type", help="Content type")
    index_parser.add_argument("--metadata", help="Metadata as JSON")
    index_parser.add_argument("--extract-text", action="store_true", help="Extract text from content")
    
    search_text_parser = search_subparsers.add_parser("text", help="Search for documents using text search")
    search_text_parser.add_argument("query", help="Search query")
    search_text_parser.add_argument("--limit", type=int, default=10, help="Maximum number of results")
    search_text_parser.add_argument("--offset", type=int, default=0, help="Results offset")
    search_text_parser.add_argument("--metadata-filters", help="Metadata filters as JSON")
    
    # Parse arguments
    args = parser.parse_args()
    
    # Create client
    try:
        client = MCPClient(args.url)
    except Exception as e:
        print(f"Error creating MCP client: {e}")
        return 1
    
    # Dispatch command
    try:
        if args.command == "status":
            command_status(args, client)
        
        elif args.command == "backends":
            command_backends(args, client)
        
        elif args.command == "add":
            command_add(args, client)
        
        elif args.command == "get":
            command_get(args, client)
        
        elif args.command == "pin":
            command_pin(args, client)
        
        elif args.command == "ls-pins":
            command_ls_pins(args, client)
        
        elif args.command == "unpin":
            command_unpin(args, client)
        
        elif args.command == "migration":
            if args.migration_command == "ls-policies":
                command_ls_policies(args, client)
            elif args.migration_command == "create-policy":
                command_create_policy(args, client)
            elif args.migration_command == "execute-policy":
                command_execute_policy(args, client)
            elif args.migration_command == "task":
                command_migration_task(args, client)
            else:
                print("Error: Missing or unknown migration command")
                parser.print_help()
                return 1
        
        elif args.command == "search":
            if args.search_command == "status":
                command_search_status(args, client)
            elif args.search_command == "index":
                command_index(args, client)
            elif args.search_command == "text":
                command_search(args, client)
            else:
                print("Error: Missing or unknown search command")
                parser.print_help()
                return 1
        
        else:
            print("Error: Missing or unknown command")
            parser.print_help()
            return 1
    
    except Exception as e:
        print(f"Error: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main())