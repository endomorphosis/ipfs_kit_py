version: '3.8'

services:
  # Master node
  ipfs-mcp-master:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    container_name: ipfs-mcp-master
    hostname: ipfs-mcp-master
    environment:
      - NODE_ID=master-1
      - NODE_ROLE=master
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=9998
      - CLUSTER_PEERS=worker-1:9998,worker-2:9998
      - PYTHONPATH=/app
    ports:
      - "9998:9998"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - master_data:/app/data
      - master_ipfs:/app/ipfs_data
      - ../logs:/app/logs
    command: >
      python containerized_mcp_server.py
      --host 0.0.0.0
      --port 9998
      --node-id master-1
      --role master
      --initialize
    networks:
      - ipfs-cluster
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9998/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker node 1
  ipfs-mcp-worker1:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    container_name: ipfs-mcp-worker1
    hostname: ipfs-mcp-worker1
    environment:
      - NODE_ID=worker-1
      - NODE_ROLE=worker
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=9998
      - CLUSTER_PEERS=master-1:9998,worker-2:9998
      - PYTHONPATH=/app
    ports:
      - "9999:9998"
      - "5002:5001"
      - "8081:8080"
    volumes:
      - worker1_data:/app/data
      - worker1_ipfs:/app/ipfs_data
      - ../logs:/app/logs
    command: >
      python containerized_mcp_server.py
      --host 0.0.0.0
      --port 9998
      --node-id worker-1
      --role worker
    depends_on:
      - ipfs-mcp-master
    networks:
      - ipfs-cluster
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9998/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker node 2
  ipfs-mcp-worker2:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    container_name: ipfs-mcp-worker2
    hostname: ipfs-mcp-worker2
    environment:
      - NODE_ID=worker-2
      - NODE_ROLE=worker
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=9998
      - CLUSTER_PEERS=master-1:9998,worker-1:9998
      - PYTHONPATH=/app
    ports:
      - "10000:9998"
      - "5003:5001"
      - "8082:8080"
    volumes:
      - worker2_data:/app/data
      - worker2_ipfs:/app/ipfs_data
      - ../logs:/app/logs
    command: >
      python containerized_mcp_server.py
      --host 0.0.0.0
      --port 9998
      --node-id worker-2
      --role worker
    depends_on:
      - ipfs-mcp-master
    networks:
      - ipfs-cluster
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9998/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Test runner service
  cluster-tester:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    container_name: cluster-tester
    environment:
      - MASTER_URL=http://ipfs-mcp-master:9998
      - WORKER1_URL=http://ipfs-mcp-worker1:9998
      - WORKER2_URL=http://ipfs-mcp-worker2:9998
      - PYTHONPATH=/app
    volumes:
      - ../test_results:/app/test_results
      - ../logs:/app/logs
    command: >
      sh -c "
      sleep 60 &&
      python comprehensive_cluster_demonstration.py &&
      python run_comprehensive_tests.py --integration --skip-setup
      "
    depends_on:
      - ipfs-mcp-master
      - ipfs-mcp-worker1
      - ipfs-mcp-worker2
    networks:
      - ipfs-cluster
    restart: "no"

networks:
  ipfs-cluster:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  master_data:
  master_ipfs:
  worker1_data:
  worker1_ipfs:
  worker2_data:
  worker2_ipfs:
