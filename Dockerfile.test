# Testing Dockerfile optimized for CI/CD pipelines
# Based on testing patterns from GitHub Actions workflows

ARG PYTHON_VERSION=3.11

FROM python:${PYTHON_VERSION}-slim-bookworm AS test-base

# Set environment variables for testing
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive \
    TESTING=1 \
    LOG_LEVEL=DEBUG \
    COVERAGE_CORE=sysmon

# Install system dependencies for testing
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    curl \
    wget \
    ca-certificates \
    gnupg2 \
    software-properties-common \
    valgrind \
    strace \
    && rm -rf /var/lib/apt/lists/*

# Create test user
RUN groupadd -r testuser && \
    useradd -r -g testuser -m -s /bin/bash testuser && \
    mkdir -p /app && \
    chown testuser:testuser /app

WORKDIR /app

# Install Python testing tools
RUN pip install --upgrade pip setuptools wheel

# Install comprehensive testing stack
RUN pip install \
    pytest \
    pytest-cov \
    pytest-xdist \
    pytest-mock \
    pytest-benchmark \
    pytest-timeout \
    pytest-html \
    pytest-json-report \
    pytest-metadata \
    pytest-rerunfailures \
    pytest-sugar \
    pytest-clarity \
    pytest-asyncio \
    pytest-memray \
    hypothesis \
    factory-boy \
    freezegun \
    responses \
    httpx \
    mock \
    coverage[toml] \
    codecov \
    bandit \
    safety \
    mypy \
    flake8 \
    black \
    isort \
    memory-profiler \
    line-profiler \
    py-spy

# Copy requirements files
COPY requirements*.txt ./

# Install project dependencies
RUN pip install -r requirements.txt || true
RUN pip install -r requirements-dev.txt || true  
RUN pip install -r requirements-test.txt || true

# Copy source code
COPY --chown=testuser:testuser . .

# Install package in editable mode
RUN pip install -e ".[dev,test]" || pip install -e .

# Create test directories
RUN mkdir -p \
    /app/test-results \
    /app/coverage-reports \
    /app/benchmark-results \
    /app/security-reports \
    /app/type-check-reports \
    && chown -R testuser:testuser /app

# Set up coverage configuration
RUN echo '[run]' > .coveragerc && \
    echo 'source = ipfs_kit_py' >> .coveragerc && \
    echo 'omit = */tests/*, */test_*, setup.py, */migrations/*' >> .coveragerc && \
    echo '[report]' >> .coveragerc && \
    echo 'exclude_lines = pragma: no cover, def __repr__, raise AssertionError, raise NotImplementedError' >> .coveragerc && \
    echo 'show_missing = True' >> .coveragerc && \
    echo 'precision = 2' >> .coveragerc

# Switch to test user
USER testuser

# Verify installation
RUN python -c "import ipfs_kit_py; print('Package imported successfully')" || echo "Package import failed - will test installation"

# Health check for testing environment
HEALTHCHECK --interval=30s --timeout=15s --start-period=30s --retries=2 \
    CMD python -c "import pytest; import coverage; print('Testing environment OK')" || exit 1

# Default command runs comprehensive test suite
CMD ["pytest", \
     "tests/", \
     "--verbose", \
     "--tb=short", \
     "--strict-markers", \
     "--strict-config", \
     "--cov=ipfs_kit_py", \
     "--cov-report=term-missing", \
     "--cov-report=html:/app/coverage-reports/", \
     "--cov-report=xml:/app/coverage-reports/coverage.xml", \
     "--junit-xml=/app/test-results/junit.xml", \
     "--json-report", \
     "--json-report-file=/app/test-results/report.json", \
     "--benchmark-json=/app/benchmark-results/benchmarks.json", \
     "--durations=10", \
     "--maxfail=5", \
     "--timeout=300"]

# Alternative commands for different test types
LABEL test.unit="pytest tests/unit/ --verbose --cov=ipfs_kit_py"
LABEL test.integration="pytest tests/integration/ --verbose --timeout=600"
LABEL test.benchmark="pytest tests/benchmarks/ --benchmark-only"
LABEL test.security="bandit -r ipfs_kit_py/ -f json -o /app/security-reports/bandit.json"
LABEL test.safety="safety check --json --output /app/security-reports/safety.json"
LABEL test.types="mypy ipfs_kit_py/ --html-report /app/type-check-reports/"
LABEL test.style="flake8 ipfs_kit_py/ --format=json --output-file=/app/test-results/flake8.json"