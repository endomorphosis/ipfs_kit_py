{
  "categories": {
    "fs": [
      "fs_list_directory",
      "fs_read_file",
      "fs_write_file",
      "fs_journal_get_history",
      "fs_journal_revert",
      "fs_journal_track",
      "fs_journal_list_tracked",
      "fs_journal_checkpoint"
    ],
    "ipfs_core": [
      "ipfs_basic_info",
      "ipfs_version",
      "ipfs_add",
      "ipfs_cat",
      "ipfs_pin_add",
      "ipfs_pin_rm",
      "ipfs_pin_ls",
      "ipfs_object_stat",
      "ipfs_ls",
      "ipfs_name_publish",
      "ipfs_name_resolve",
      "ipfs_status",
      "ipfs_add_file",
      "ipfs_get",
      "ipfs_fs_bridge_sync",
      "ipfs_fs_bridge_status",
      "ipfs_fs_bridge_mount",
      "ipfs_fs_bridge_unmount",
      "ipfs_id",
      "ipfs_add_tool",
      "ipfs_cat_tool",
      "ipfs_pin_tool",
      "ipfs_unpin_tool",
      "ipfs_list_pins_tool",
      "ipfs_version_tool",
      "ipfs_id_tool",
      "ipfs_api",
      "ipfs_advanced",
      "ipfs_pins",
      "ipfs_dag_get",
      "ipfs_block_stat",
      "ipfs_block_get",
      "ipfs_dht_findprovs",
      "ipfs_dht_findpeer",
      "ipfs_add_path",
      "ipfs_to_lassie",
      "ipfs_to_lassie_async",
      "ipfs_to_huggingface",
      "ipfs_to_filecoin",
      "ipfs_fs",
      "ipfs_kit_mocks",
      "ipfs_kit_instance",
      "ipfs_py_instance",
      "ipfs_add_bytes",
      "ipfs_add_metadata",
      "ipfs_repo_gc",
      "ipfs_add_chunked",
      "ipfs_cat_chunked",
      "ipfs_use_case",
      "ipfs_object_get",
      "ipfs_object_links",
      "ipfs_dht_get",
      "ipfs_metrics",
      "ipfs_add_directory",
      "ipfs_get_json",
      "ipfs_key_gen",
      "ipfs_key_list",
      "ipfs_pin_list",
      "ipfs_dht_provide",
      "ipfs_dht_find_providers",
      "ipfs_dht_find_peer",
      "ipfs_dht_query",
      "ipfs_cluster_ctl_add_pin",
      "ipfs_cluster_ctl_remove_pin",
      "ipfs_cluster_ctl_add_pin_recursive",
      "ipfs_cluster_ctl_execute",
      "ipfs_cluster_get_pinset",
      "ipfs_cluster_ctl_peers_ls",
      "ipfs_cluster_ctl_health",
      "ipfs_cluster_ctl_status",
      "ipfs_test_install",
      "ipfs_cluster_service_test_install",
      "ipfs_cluster_follow_test_install",
      "ipfs_cluster_ctl_test_install",
      "ipfs_cluster_service_start",
      "ipfs_cluster_service_stop",
      "ipfs_cluster_service_status",
      "ipfs_swarm_peers",
      "ipfs_kit_ready",
      "ipfs_add_pin",
      "ipfs_ls_path",
      "ipfs_remove_path",
      "ipfs_remove_pin",
      "ipfs_get_pinset",
      "ipfs_follow_sync",
      "ipfs_follow_info",
      "ipfs_cluster_health",
      "ipfs_cluster_recover",
      "ipfs_cluster_status",
      "ipfs_cluster_peers_ls",
      "ipfs_kit_stop",
      "ipfs_kit_start",
      "ipfs_get_config",
      "ipfs_set_config",
      "ipfs_get_config_value",
      "ipfs_set_config_value",
      "ipfs_swarm_connect",
      "ipfs_swarm_disconnect",
      "ipfs_resize",
      "ipfs_ls_pin",
      "ipfs_mkdir",
      "ipfs_add_path2",
      "ipfs_stat_path",
      "ipfs_set_listen_addrs",
      "ipfs_execute",
      "ipfs_follow_init",
      "ipfs_follow_start",
      "ipfs_cluster_follow_status",
      "ipfs_stream_generator",
      "ipfs_monitoring_middleware"
    ],
    "ipfs_mfs": [
      "ipfs_files_mkdir",
      "ipfs_files_write",
      "ipfs_files_read",
      "ipfs_files_ls",
      "ipfs_files_rm",
      "ipfs_files_stat",
      "ipfs_files_cp",
      "ipfs_files_mv"
    ],
    "networking": [
      "_create_test_network",
      "test_s3_controller_http_endpoints",
      "test_http_ipns_publish",
      "test_http_stream_endpoint",
      "test_http_upload_stream_endpoint",
      "test_error_handling_http_api_failure",
      "_log_network_event",
      "storacha_http_request",
      "_run_network_benchmarks",
      "get_network_stats",
      "mock_http_client"
    ],
    "other": [
      "get_ipfs_tools",
      "create_tool_registry",
      "register_tools",
      "info",
      "__call__",
      "tool",
      "register_tool",
      "run_tool",
      "get_tools",
      "sse_app",
      "mcp_endpoint",
      "jsonrpc_endpoint",
      "register_default_tools",
      "get_version",
      "add_string",
      "cat",
      "files_mkdir",
      "create_dir",
      "export_to_ipfs",
      "register_resource",
      "root",
      "initialize",
      "stop_server",
      "list_files",
      "file_exists",
      "get_file_stats",
      "copy_file",
      "move_file",
      "_cleanup_temp_files",
      "homepage",
      "test_lotus_kit_available",
      "test_ipfs_kit_import",
      "fix_server_constructor",
      "import_module_from_file",
      "load_enhanced_tools",
      "register_fs_handlers_with_tools",
      "setup_multi_backend_integration",
      "create_restart_script",
      "create_verification_script",
      "main",
      "handle_jsonrpc",
      "vs_code_initialize",
      "storage_status",
      "initialize_endpoint",
      "create_default_server",
      "__init__",
      "handler",
      "fix_server_bridge",
      "create_ipfs_extensions",
      "update_ipfs_controller",
      "huggingface_status",
      "s3_status",
      "filecoin_status",
      "storacha_status",
      "test_backend_storage_import",
      "test_ipfs_basic_functionality",
      "fix_subprocess_popen",
      "patch_mcp_server",
      "create_updated_startup_script",
      "create_example_usage_script",
      "check_vscode_settings",
      "load_ipfs_tools",
      "create_app",
      "register_controller",
      "sse_handler",
      "pin_ls",
      "fix_mcp_server",
      "create_mock_module",
      "check_endpoint",
      "test_jsonrpc_server",
      "call_mcp_method",
      "verify_fs_operations",
      "verify_enhanced_tools",
      "_get_s3_client",
      "mbfs_register_backend",
      "mbfs_list_backends",
      "mbfs_retrieve",
      "get_server_info",
      "create_mcp_configuration",
      "add_initialize_endpoint",
      "restart_mcp_server",
      "log",
      "verify_mcp_config",
      "stop_mcp_server",
      "start_mcp_server",
      "verify_mcp_server",
      "fix_jsonrpc_url",
      "cat_mock_content",
      "pin_mock_content",
      "handle_tool",
      "init_services",
      "parse_args",
      "create_ipfs_mcp_config",
      "update_vscode_settings",
      "backup_file",
      "fix_subprocess_call",
      "simulate_initialize_request",
      "read_file",
      "add_sse_starlette_requirement",
      "get_all_tools",
      "group_tools_by_category",
      "print_tools_by_category",
      "sse_endpoint",
      "send_event",
      "process_message",
      "add_mock_content",
      "fix_server_registration",
      "suppress_logs_during_test",
      "find_test_modules",
      "test_lotus_kit_available_constant",
      "test_ipfs_kit_initialization",
      "test_ipfs_add_method",
      "test_ipfs_cat_method",
      "test_ipfs_daemon_status",
      "test_ipfs_pin_operations",
      "test_ipfs_swarm_methods_existence",
      "test_storage_type_enum",
      "test_ipfs_connection_import",
      "test_ipfs_backend_import",
      "fix_trailing_commas",
      "create_tool_implementations",
      "patch_register_tools",
      "patch_shutdown",
      "patch_server",
      "create_startup_script",
      "_get_ipfs_client",
      "setup_mock_modules",
      "add_basic_tests",
      "test_import_ipfs_kit",
      "test_import_lotus_kit",
      "run_tests",
      "fix_get_tools_handler",
      "run_verification",
      "verify_connectivity",
      "verify_jsonrpc_support",
      "verify_ipfs_cat",
      "verify_ipfs_pin_add",
      "verify_ipfs_pin_ls",
      "verify_ipfs_pin_rm",
      "verify_storage_backends",
      "fix_if_block_indentation",
      "test_api_endpoint",
      "map_ipfs_to_fs",
      "unmap_ipfs_from_fs",
      "sync_fs_to_ipfs",
      "sync_ipfs_to_fs",
      "mount_ipfs_to_fs",
      "unmount_ipfs_from_fs",
      "fix_indentation",
      "log_message",
      "fix_ipfs_model_extensions",
      "fix_cline_mcp_settings",
      "fix_registry",
      "safe_import",
      "daemon_start",
      "start_daemons",
      "patch_filecoin_model",
      "patch_ipfs_py",
      "patched_init",
      "create_missing_modules",
      "ls",
      "normalize_instance",
      "fix_fastapi_imports",
      "mcp_request",
      "initialize_components",
      "mock_add_content",
      "mock_pin_add",
      "mock_files_mkdir",
      "register_all_ipfs_tools",
      "count_tools",
      "stop_running_servers",
      "verify_ipfs_mcp_tools_integration",
      "fix_server_startup",
      "create_enhanced_mcp_server",
      "start_server",
      "api_initialize_endpoint",
      "sse",
      "api_sse",
      "event_generator",
      "global_exception_handler",
      "read_file_slice_endpoint",
      "create_dummy_mcp_components",
      "_register_exception_handler",
      "sse_test",
      "fix_unmatched_parenthesis",
      "fix_syntax_error",
      "fix_missing_parentheses",
      "check_vscode_extensions",
      "check_extension_logs",
      "test_sse_connection",
      "create_complete_mcp_config",
      "store",
      "setUp",
      "test_connection_pool_creation",
      "fix_assertion_module",
      "get_ipfs_controller",
      "register_tools_with_mcp",
      "update_mcp_server_tools",
      "patch_mcp_server_runtime",
      "apply_fix",
      "do_OPTIONS",
      "sep",
      "register_multi_backend_tools",
      "register_tools_with_direct_mcp",
      "run_test",
      "test_backend_storage_methods",
      "find_direct_mcp_server",
      "fix_integration_file",
      "create_terminal_writer_mock",
      "test_mcp_ipfs_methods",
      "get_available_backends",
      "setup_python_paths",
      "register_all_tools",
      "register_ipfs_tools",
      "register_ipfs_fs_tools",
      "register_additional_tools",
      "shutdown",
      "event_stream",
      "startup_event",
      "fix_pytest_call",
      "fix_logger_info",
      "get_controller_files",
      "patch_direct_mcp_server",
      "update_ipfs_comprehensive_tools_doc",
      "update_comprehensive_features_doc",
      "update_integration_script",
      "find_mcp_settings",
      "fix_mcp_settings",
      "update_claude_mcp_settings",
      "update_local_storage_settings",
      "test_fs_journal",
      "test_integration",
      "test_mcp_tools_registration",
      "update_mcp_server_with_sse",
      "find_mcp_package_files",
      "analyze_files",
      "fix_register_all_controller_tools",
      "load_tools_into_server",
      "register_mcp_tools",
      "create_direct_loader",
      "fix_parentheses",
      "fix_syntax_errors",
      "update_mcp_config",
      "get_available_tools",
      "call_tool",
      "test_list_files",
      "test_write_file",
      "test_read_file",
      "test_ipfs_add",
      "test_ipfs_cat",
      "test_ipfs_pin",
      "find_get_tools_function",
      "patch_module",
      "check_unified_tools",
      "check_final_server",
      "check_dependencies",
      "create_start_script",
      "create_test_script",
      "test_jsonrpc_endpoint",
      "update_final_mcp_server",
      "update_vscode_mcp_config",
      "apply_pytest_patches",
      "ensure_module_available",
      "register_integration_tools",
      "list_versions",
      "jsonrpc",
      "print_success",
      "test_sse_endpoint",
      "run_all_tests",
      "_initialize_db",
      "_add_journal_entry",
      "directly_inject_methods",
      "add_content",
      "pin_add",
      "pin_rm",
      "swarm_peers",
      "swarm_connect",
      "storage_transfer",
      "update_ipfs_tools_registry",
      "create_mcp_loader",
      "find_all_test_files",
      "fix_tools_registry",
      "fix_import_in_final_mcp_server",
      "update_mcp_server_integration",
      "record_test_result",
      "test_ipfs_kit_py_integration",
      "verify_sse_endpoints",
      "fix_mcp_schema",
      "fix_import_issue",
      "create_minimal_script",
      "add_ipfs_tools_to_mcp",
      "add",
      "cat_async",
      "get_async",
      "get",
      "pin_add_async",
      "pin_rm_async",
      "pin_ls_async",
      "files_write_async",
      "files_read_async",
      "files_rm_async",
      "files_ls_async",
      "name_resolve_async",
      "ls_async",
      "_create_mock_filecoin",
      "stop_daemons",
      "install_w3_cli",
      "fix_line_881",
      "load_tools",
      "create_patched_mcp_server",
      "enhance_mcp_server_initialize",
      "enhanced_initialize",
      "mfs_list_tool",
      "mfs_stat_tool",
      "mfs_read_tool",
      "mfs_rm_tool",
      "mfs_mv_tool",
      "create_ipfs_basic_tools",
      "ipns_publish_tool",
      "ipns_resolve_tool",
      "ipns_key_list_tool",
      "enhance_existing_server",
      "fix_server_indentation",
      "find_mcp_resource_handlers",
      "fix_direct_resource_handlers",
      "fix_directly_in_mcp_module",
      "ensure_logger",
      "make_mock_request",
      "test_ipfs_add_and_cat",
      "test_ipfs_object_operations",
      "test_ipfs_dag_operations",
      "test_storage_status_endpoints",
      "check_ipfs_daemon",
      "parse_arguments",
      "restart_servers",
      "restart_vscode",
      "fix_asyncio_sleep",
      "endpoint",
      "tool_endpoint",
      "fix_direct_mcp_server",
      "create_fs_journal_tools",
      "create_ipfs_fs_integration",
      "fix_run_direct_mcp_server",
      "fix_all_files",
      "fix_missing_except",
      "run_coroutine_safely",
      "patch_webrtc_controller_methods",
      "apply_enhanced_fixes",
      "apply_fixes",
      "add_event",
      "import_time_module",
      "__post_init__",
      "test_ipfs_model",
      "check_libp2p_dependencies",
      "create_simulation_response",
      "callback",
      "categorize_test_file",
      "test_user_creation",
      "pyarrow_mock_context",
      "test_store_content",
      "_store_test_content",
      "test_client",
      "temp_dir",
      "mock_responses",
      "test_ipfs_version",
      "test_huggingface_status",
      "test_large_file_handling",
      "_start_required_daemons",
      "asyncSetUp",
      "test_basic_routing",
      "test_learning_from_outcomes",
      "test_dht_provide_failure",
      "test_dht_find_providers_failure",
      "test_dht_find_peer_failure",
      "test_content_analysis",
      "test_backend_availability",
      "optimizer",
      "routing_manager",
      "test_record_outcome",
      "get_content",
      "mock_module",
      "include_router",
      "create_libp2p_mocks",
      "patch_missing_controller_classes",
      "fix_ipfs_kit_constructor",
      "fix_import_paths",
      "success",
      "test_dag_get",
      "test_dag_resolve",
      "test_object_new",
      "test_object_put",
      "test_name_publish",
      "test_key_operations",
      "test_bootstrap_operations",
      "fixture",
      "test_metrics_creation",
      "simulate_api_traffic",
      "check_import",
      "apply_pyarrow_mock_patches",
      "with_pyarrow_mocks",
      "patch_initialization_tests",
      "suppress_logging",
      "test_cli_wal_status_command",
      "test_cli_key_value_parsing",
      "test_cli_with_no_color_flag",
      "test_cli_wal_list_command",
      "update_server_info",
      "_exchange_server_info",
      "test_webrtc_imports",
      "setUpClass",
      "test_01_dependencies",
      "test_04_mcp_model",
      "test_05_mcp_controller",
      "test_06_mcp_server",
      "test_07_mcp_anyio_integration",
      "get_all",
      "_discover_unit_tests",
      "_discover_streaming_tests",
      "cli_version",
      "create_mock_schema",
      "get_json",
      "dag_get",
      "add_model",
      "list_models",
      "add_dataset",
      "cleanup",
      "libp2p_model",
      "client",
      "test_discover_peers",
      "test_get_peers",
      "test_connect_peer",
      "test_find_providers",
      "test_retrieve_content_info",
      "test_retrieve_content",
      "test_announce_content",
      "test_get_connected_peers",
      "test_get_peer_info",
      "test_get_stats",
      "test_reset",
      "test_start_peer",
      "test_stop_peer",
      "test_dht_find_peer",
      "test_dht_provide",
      "test_dht_find_providers",
      "test_pubsub_publish",
      "test_pubsub_subscribe",
      "test_pubsub_unsubscribe",
      "test_pubsub_get_topics",
      "test_pubsub_get_peers",
      "test_register_message_handler",
      "test_unregister_message_handler",
      "test_list_message_handlers",
      "test_unavailable_libp2p",
      "mcp_anyio_server",
      "standard_client",
      "anyio_client",
      "test_add_content",
      "test_check_existence",
      "setup",
      "handle_list_wallets_request",
      "handle_filecoin_to_ipfs_request",
      "handle_create_wallet_request",
      "test_handle_list_wallets_request",
      "test_handle_filecoin_to_ipfs_request",
      "test_handle_filecoin_to_ipfs_request_error",
      "test_register_routes",
      "mock_ipfs_model",
      "controller",
      "test_check_daemon_status_async",
      "test_add_content_async",
      "test_get_content_async",
      "test_pin_content_async",
      "test_list_pins_async",
      "test_make_directory_async",
      "test_write_file_async",
      "test_remove_file_async",
      "test_move_file_async",
      "test_get_content_endpoint",
      "test_pin_content_endpoint",
      "test_unpin_content_endpoint",
      "test_list_pins_endpoint",
      "test_list_files_endpoint",
      "test_stats_endpoint",
      "test_ipfs_id",
      "test_ipfs_cat_query",
      "test_ipfs_pin_add",
      "test_ipfs_pin_add_query",
      "test_ipfs_pin_ls",
      "test_ipfs_pin_rm",
      "test_ipfs_pin_rm_query",
      "test_storage_backends",
      "_generate_fix_recommendations",
      "setup_mocks",
      "get_model",
      "get_controller",
      "test_mcp_server_initialization",
      "test_ipfs_model_parity",
      "test_storacha_model_parity",
      "test_huggingface_model_parity",
      "test_s3_model_parity",
      "test_mcp_api_feature_completeness",
      "add_generic_credential",
      "remove_credential",
      "test_add_generic_credential_async",
      "test_add_storacha_credentials_async",
      "test_remove_credential_async",
      "_key_to_filename",
      "pin_content",
      "unpin_content",
      "list_pins",
      "register_routes",
      "reset_stats",
      "_register_routes",
      "test_server_initialization",
      "test_log_endpoint",
      "test_isolation_mode",
      "test_debug_middleware",
      "test_error_middleware",
      "test_endpoint",
      "test_new_endpoints",
      "test_other_controllers",
      "test_libp2p_model",
      "test_server_status",
      "to_dict",
      "check_websocket_support",
      "test_initialization",
      "test_route_registration_without_websocket",
      "test_check_websocket_support",
      "test_start_server_exception",
      "test_stop_server_exception",
      "test_disconnect_from_server",
      "test_shutdown",
      "test_get_status_async",
      "test_move_async",
      "fetch_cid_async",
      "lassie_to_ipfs",
      "lassie_to_ipfs_async",
      "check_connection",
      "test_handle_fetch_cid_request_async_impl",
      "test_handle_ipfs_to_lassie_request_sync_fallback",
      "test_handle_lassie_to_ipfs_request_async_impl",
      "test_handle_lassie_to_ipfs_request_sync_fallback",
      "test_handle_status_request_async_impl",
      "apply_command_handler_mocks",
      "test_init",
      "test_handle_status_request_async",
      "test_handle_transfer_request_async",
      "test_handle_migration_request_async",
      "test_warn_if_async_context",
      "test_get_backend_status",
      "test_post_verify_content",
      "test_post_apply_policy",
      "mock_storacha_model",
      "app",
      "test_handle_space_creation_request",
      "test_handle_storacha_to_ipfs_request",
      "test_mcp_shutdown",
      "create_repository",
      "huggingface_to_ipfs",
      "get_stats",
      "test_handle_huggingface_to_ipfs_request_async",
      "test_huggingface_to_ipfs_endpoint",
      "mock_webrtc_model",
      "test_check_dependencies",
      "test_stream_endpoint",
      "get_controllers",
      "check_backend_status",
      "run_backend_diagnostic",
      "mock_s3_model",
      "router",
      "test_handle_upload_request_form",
      "test_handle_s3_to_ipfs_request",
      "test_handle_status_request",
      "test_handle_s3_to_ipfs_request_error",
      "get_backend",
      "get_known_servers_async",
      "get_compatible_servers_async",
      "get_server_by_id_async",
      "register_server_async",
      "remove_server_async",
      "clean_stale_servers_async",
      "dispatch_task_async",
      "announce_server",
      "get_known_servers",
      "get_compatible_servers",
      "get_server_by_id",
      "register_server",
      "remove_server",
      "clean_stale_servers",
      "dispatch_task",
      "mock_discovery_model",
      "app_client",
      "test_discover_servers_async",
      "test_get_compatible_servers_async",
      "test_register_server_async",
      "test_clean_stale_servers_async",
      "test_reset_async",
      "test_get_local_server_info_endpoint",
      "test_discover_servers_endpoint",
      "test_get_compatible_servers_endpoint",
      "test_get_server_by_id_endpoint_not_found",
      "test_clean_stale_servers_endpoint",
      "test_register_peer_endpoint",
      "test_store_metadata_endpoint",
      "test_verify_metadata_replication_endpoint",
      "test_server_routes_registration",
      "test_enforce_minimum_replication_factor",
      "test_model_initialize_with_replication",
      "mock_filecoin_model",
      "test_handle_status_request_error",
      "test_get_backend",
      "test_list_known_peers_async",
      "test_start_daemon_endpoint",
      "test_get_daemon_status_endpoint",
      "test_stop_daemon_monitor_endpoint",
      "test_invalid_daemon_type_validation",
      "test_store_metadata_endpoint_async",
      "test_verify_metadata_replication_endpoint_async",
      "test_model_initialize_with_replication_async",
      "test_async_filecoin_to_ipfs",
      "test_webrtc_check",
      "test_peer_websocket_status",
      "test_all_endpoints",
      "mock_lotus_kit",
      "mock_cache_manager",
      "test_check_connection_success",
      "test_list_miners_success",
      "test_operation_failure_propagates",
      "test_ipfs_to_filecoin_ipfs_failure",
      "test_ipfs_to_filecoin_import_failure",
      "test_create_space_error",
      "test_ipfs_to_storacha_ipfs_error",
      "test_storacha_to_ipfs_success",
      "test_storacha_to_ipfs_validation_error",
      "test_dht_findpeer_endpoint",
      "test_dht_findpeer_validation_error",
      "test_dht_findpeer_server_error",
      "delayed_response",
      "test_dht_findprovs_with_large_response",
      "timed_response",
      "test_dht_findprovs_null_response",
      "test_dht_findpeer_unexpected_error_type",
      "test_upload_file_failure_invalid_params",
      "test_ipfs_to_s3_ipfs_error",
      "test_s3_to_ipfs_success",
      "test_server_initialization_with_normalized_ipfs",
      "test_model_with_normalized_ipfs",
      "test_method_normalization_stress",
      "test_simulation_functions_directly",
      "_setup_mock_responses",
      "test_files_mkdir",
      "test_files_stat",
      "test_files_write",
      "test_simulation_mode",
      "test_add_content_handles_bytes_response",
      "test_unpin_content_handles_bytes_response",
      "test_ipfs_name_publish_handles_bytes_stdout",
      "test_ipfs_name_resolve_handles_bytes_stdout",
      "test_fs_read_handles_bytes_content",
      "tearDown",
      "test_dht_findpeer_async_error",
      "test_dht_findprovs_async_error",
      "test_dht_findprovs_with_num_providers_parameter",
      "test_concurrent_dht_operations",
      "test_ipfs_name_publish_with_json_response",
      "test_ipfs_name_publish_with_key",
      "test_ipfs_name_publish_failure",
      "test_ipfs_name_resolve_with_string_response",
      "test_ipfs_name_resolve_with_ipns_prefix_handling",
      "test_ipfs_name_resolve_with_recursive_parameter",
      "test_ipfs_name_resolve_with_nocache_parameter",
      "test_ipfs_name_resolve_failure",
      "test_ipfs_name_resolve_with_timeout_parameter",
      "test_ipfs_controller_name_publish_endpoint",
      "test_ipfs_controller_name_resolve_endpoint",
      "test_ipfs_key_gen_functionality",
      "test_ipfs_key_gen_with_type_and_size",
      "test_ipfs_key_list_functionality",
      "test_ipfs_controller_key_gen_endpoint",
      "test_ipfs_controller_key_list_endpoint",
      "test_integration_mcp_server_ipns_endpoints",
      "mock_dependencies",
      "libp2p_model_no_deps",
      "_create_mock_replication_manager",
      "test_replicate_webrtc_metadata_endpoint",
      "test_create_offer_with_replication",
      "test_minimum_replication_factor_enforcement",
      "test_model_enforces_replication_policy",
      "_call_mfs_method",
      "test_list_files_error",
      "test_stat_file_success",
      "test_make_directory_success",
      "test_make_directory_error",
      "test_concurrent_files_operations",
      "test_files_operations_with_sync_compatibility",
      "test_zero_byte_file_stat",
      "test_deep_directory_creation",
      "_measure_endpoint_latency",
      "test_content_retrieval_performance",
      "test_api_operation_stress",
      "_async_measure_endpoint_latency",
      "test_connection_error_retry",
      "test_retry_exhaustion",
      "test_daemon_not_running",
      "test_middleware_error_handling",
      "test_concurrent_access",
      "test_cache_error_recovery",
      "test_invalid_cid_error_handling",
      "test_ipfs_client_reconnection",
      "mock_is_connected",
      "test_block_put_with_format_parameter",
      "test_block_get_success",
      "test_block_stat_success",
      "test_dht_findpeer_empty_response",
      "test_dht_findprovs_success",
      "test_dht_findprovs_empty_response",
      "test_get_content_bytes_fix",
      "test_dag_put_with_format_parameter",
      "test_dag_put_failure",
      "test_dag_get_with_path_parameter",
      "test_dag_resolve_success",
      "test_block_put_async_with_format_parameter",
      "test_block_get_async_success",
      "test_block_stat_async_success",
      "test_block_stat_async_failure",
      "test_dag_resolve_failure",
      "test_dag_put_with_format_parameter_async",
      "test_dag_put_failure_async",
      "test_dag_get_with_path_parameter_async",
      "test_dag_resolve_success_async",
      "test_dag_resolve_failure_async",
      "get_openapi_schema",
      "disconnect_server",
      "test_dht_findpeer_async_empty_response",
      "test_dht_findprovs_async_success",
      "test_dht_findprovs_async_empty_response",
      "test_ipfs_name_publish_async_with_json_response",
      "test_ipfs_name_publish_async_with_key",
      "test_ipfs_name_publish_async_failure",
      "test_ipfs_name_resolve_async_with_string_response",
      "test_ipfs_name_resolve_async_with_ipns_prefix_handling",
      "test_ipfs_name_resolve_async_with_recursive_parameter",
      "test_ipfs_name_resolve_async_with_nocache_parameter",
      "test_ipfs_name_resolve_async_failure",
      "test_ipfs_name_resolve_async_with_timeout_parameter",
      "test_ipfs_key_gen_async_functionality",
      "test_ipfs_key_gen_async_with_type_and_size",
      "test_ipfs_key_list_async_functionality",
      "replicate_webrtc_metadata",
      "_create_mock_webrtc_manager",
      "test_replicate_webrtc_metadata_endpoint_async",
      "test_create_offer_with_replication_async",
      "test_minimum_replication_factor_enforcement_async",
      "test_model_enforces_replication_policy_async",
      "create_test_file",
      "test_credential_endpoints_exist",
      "test_add_s3_credentials",
      "test_delete_credential",
      "test_authenticate_failure",
      "test_create_repository_failure",
      "test_ipfs_to_huggingface_missing_cid",
      "test_ipfs_to_huggingface_missing_repo_id",
      "test_ipfs_to_huggingface_missing_dependency",
      "test_ipfs_to_huggingface_ipfs_error",
      "test_huggingface_to_ipfs_success",
      "test_huggingface_to_ipfs_missing_repo_id",
      "test_huggingface_to_ipfs_missing_filename",
      "test_huggingface_to_ipfs_missing_dependency",
      "test_huggingface_to_ipfs_download_error",
      "test_huggingface_to_ipfs_ipfs_error",
      "test_mcp_server",
      "async_test",
      "request",
      "test_webrtc_dependency_check",
      "test_list_connections",
      "test_set_quality",
      "test_close_all_connections",
      "test_run_benchmark",
      "get_daemon_status",
      "toggle_daemon",
      "create_stale_lock_file",
      "create_active_lock_file",
      "get_ipfs_path_from_server",
      "test_mcp_lock_handling",
      "test_debug_endpoint_includes_metrics",
      "test_persistence_metrics",
      "test_filecoin_model_direct",
      "test_mcp_server_integration",
      "test_04_ipfs_add_content",
      "test_05_ipfs_add_file",
      "test_06_ipfs_cat_content",
      "test_07_ipfs_pin_operations",
      "test_09_daemon_management",
      "test_11_operation_logging",
      "verify_ipfs_content",
      "test_aria2_list_downloads",
      "test_aria2_global_stats",
      "_start_server",
      "_stop_server",
      "_kill_existing_servers",
      "test_03_operations_log",
      "test_06_stop_daemon",
      "test_08_ipfs_controller_endpoints",
      "test_09_cli_controller_endpoints",
      "test_11_daemon_auto_restart",
      "test_storacha_credentials",
      "test_create_space",
      "test_list_uploads",
      "test_mcp_endpoints",
      "test_s3_status",
      "random_string",
      "test_bytes_response_handling",
      "test_dict_response_handling",
      "test_controller_bytes_response",
      "test_error_handling",
      "run_libp2p_verification",
      "test_get_content_bytes_response",
      "test_unpin_content_bytes_response",
      "test_add_content_bytes_response",
      "test_basic_operation",
      "test_adapter_with_ipfs_kit",
      "test_webrtc_operations",
      "test_get_debug_endpoints",
      "test_cli_add_content_multipart",
      "test_ipfs_controller",
      "test_cache_manager",
      "test_model_ipns_publish",
      "test_high_level_api_compatibility",
      "test_mcp_cli_integration",
      "test_write_file_error",
      "test_read_file_with_offset_and_count",
      "test_read_file_error",
      "test_remove_directory_recursive",
      "test_copy_file_success",
      "test_copy_file_error",
      "test_move_file_with_parents",
      "test_flush_files_success",
      "test_flush_files_error",
      "test_get_content",
      "test_pin_content",
      "test_list_pins",
      "test_lock_file_handling",
      "tearDownClass",
      "test_cache_initialization",
      "test_backend_integration_simulation",
      "test_mock_tiered_cache_manager_with_all_backends",
      "test_mcp_content_replication_info",
      "test_mcp_replication_api_endpoint",
      "test_mcp_ensure_replication",
      "test_mcp_special_test_keys",
      "test_mcp_replication_thresholds",
      "server_config",
      "test_json_add",
      "test_file_upload",
      "test_pin_operations",
      "test_init_with_webrtc_support",
      "test_route_registration",
      "controller_with_app",
      "test_start_stream",
      "test_close_connection",
      "test_server_tracking",
      "async_controller",
      "test_async_list_connections",
      "register_with_app",
      "test_ipfs_webrtc_integration",
      "test_cli_ipfs_integration",
      "make_request",
      "file_upload_test",
      "pin_operations_test",
      "test_mcp_fixes",
      "add_received_message",
      "test_controller_initialization",
      "test_register_node",
      "test_state_operation",
      "test_get_task_status",
      "test_list_tasks",
      "mock_model",
      "test_filecoin_to_ipfs_endpoint",
      "test_ipfs_fs_journal_integration_async",
      "test_ipfs_webrtc_integration_async",
      "test_cli_ipfs_integration_async",
      "test_full_workflow_integration_async",
      "test_ipfs_fs_journal_integration",
      "test_webrtc_ipfs_integration",
      "test_full_ipfs_webrtc_fs_journal_workflow",
      "test_cli_based_workflow",
      "test_data_migration_workflow",
      "test_daemon_endpoints",
      "test_ipfs_cat_endpoint",
      "test_init_with_websocket_support",
      "test_start_server",
      "test_connect_without_server_url",
      "test_get_peer_by_id",
      "test_webrtc_communication",
      "test_libp2p_communication",
      "test_find_peers_websocket",
      "test_connect_to_peer",
      "test_init_with_multiple_backends",
      "test_transfer_content_without_bridge",
      "test_transfer_missing_capabilities",
      "test_migrate_content_with_bridge",
      "test_apply_replication_policy_without_bridge",
      "test_verify_content_with_nonexistent_backend",
      "test_migrate_content_direct_implementation",
      "test_migration_with_verification_failure",
      "test_apply_policy_without_bridge",
      "test_async_handle_backend_status_request",
      "test_async_handle_verify_request",
      "test_async_handle_replication_policy_request",
      "test_auth_success_flow",
      "_setup_async",
      "test_anyio_ipfs_fs_journal_integration",
      "test_anyio_webrtc_ipfs_integration",
      "test_anyio_cli_ipfs_integration",
      "test_anyio_full_workflow",
      "_run_async_test",
      "test_webrtc_ipfs_integration_anyio",
      "discover",
      "test_storage_controllers_initialization_normal",
      "test_mcp_discovery_controller_anyio_import",
      "test_ipfs_endpoints",
      "test_credential_endpoints",
      "test_cli_endpoints",
      "load_credentials",
      "add_backend_endpoints",
      "run_mini_test",
      "run_api_test",
      "run_mcp_server",
      "get_server_class",
      "_cleanup",
      "setup_logging",
      "temp_identity_path",
      "_read_file",
      "test_stream_to_ipfs_performance",
      "setup_method",
      "test_init_default",
      "format_size",
      "test_metrics_collector_records_requests",
      "test_update_model",
      "test_update_dataset",
      "test_job_creation",
      "test_hyperparameter_tuning",
      "test_model_endpoint",
      "test_model",
      "get_ipfs_model_class",
      "test_ipfs_name_resolve_handles_dict_response",
      "test_add_content_simulation",
      "test_pin_content_simulation",
      "cleanup_test_environment",
      "has_direct_binary_access",
      "test_001_service_wrapper_import",
      "test_002_follow_wrapper_import",
      "test_003_run_service_wrapper_fake_daemon",
      "test_004_run_follow_wrapper_fake_daemon",
      "test_005_service_module_test_method",
      "test_006_service_basic_init",
      "test_007_check_daemon_status",
      "test_01_stale_lock_file",
      "run_ipfs_integration_test",
      "get_peer_id",
      "test_content_publication",
      "test_content_provider_search",
      "test_protocol_registration",
      "test_enhanced_dht_discovery_creation",
      "test_extend_ipfs_kit_class",
      "test_handle_cache_miss",
      "test_valid_topics",
      "test_format_message_string",
      "test_create_gossipsub",
      "test_create_unknown_router",
      "connect_to_libp2p_peer",
      "test_find_libp2p_peers",
      "test_peer_initialization",
      "test_content_storage",
      "test_master_role",
      "test_leecher_role",
      "test_content_retrieval_via_ipfskit",
      "test_provider_finding_via_ipfskit",
      "test_content_announcement_via_ipfskit",
      "test_gossipsub_and_enhanced_discovery",
      "transfer_to_backend",
      "retrieve_from_backend",
      "download_and_verify",
      "test_filecoin_status",
      "verify_lotus_with_daemon",
      "test_import_wallet_data",
      "test_lotus_daemon_management",
      "check_api_credentials",
      "_track_call",
      "filecoin_to_ipfs",
      "test_status_success",
      "test_filecoin_to_ipfs_success",
      "install_lotus_binary",
      "test_lotus_kit_initialization",
      "migration_setup",
      "check_disk_space",
      "emit_event",
      "test_ipfs_media_stream_track",
      "test_handle_webrtc_streaming",
      "test_cleanup_ended_connections",
      "close_connection",
      "original_stop_webrtc_streaming",
      "stop_streaming",
      "get_connections",
      "get_info",
      "apply_anyio_fixes",
      "apply_anyio_fixes_to_controller",
      "test_problematic_methods_local",
      "test_stream_content",
      "test_webrtc_list_connections",
      "test_webrtc_benchmark",
      "test_stop_streaming",
      "test_track_cleanup_with_buffer",
      "test_model_passes_buffer_params_to_track",
      "async_fill_buffer",
      "test_progressive_fetch",
      "async_test_buffer_underflow",
      "run_server_tests",
      "stream_content",
      "_perform_final_cleanup",
      "test_error_conversion",
      "test_cli_version",
      "test_with_multipart_form",
      "temp_test_dir",
      "mock_ipfs_api",
      "mock_version",
      "test_version_command",
      "test_cli_command_options",
      "test_cli_with_config_file",
      "test_cli_add_command",
      "test_cli_pin_add_command",
      "test_cli_pin_ls_command",
      "test_cli_swarm_peers_command",
      "test_cli_version_command",
      "test_cli_error_handling",
      "test_cli_shutdown_command",
      "test_cli_publish_command",
      "test_cli_ls_command",
      "test_cli_exists_command",
      "test_cli_with_yaml_format",
      "test_cli_with_verbose_flag",
      "test_cli_error_handling_validation_error",
      "test_stream_media",
      "setup_and_cleanup",
      "test_stream_media_async",
      "test_websocket_media_stream",
      "mock_get_all_operations",
      "test_get_operations_by_status",
      "test_partitioning",
      "test_cleanup",
      "test_wait_for_operation",
      "test_statistics",
      "test_is_backend_available",
      "test_storage_wal_with_pytest",
      "test_migrate_file",
      "test_migrate_file_with_filename",
      "test_migrate_by_list",
      "test_migrate_by_list_with_string_cids",
      "test_migrate_file_failure",
      "test_cache_reuse",
      "test_config_parameters",
      "test_fsspec_not_available",
      "test_initialization_error",
      "test_kwargs_handling",
      "test_return_mock_parameter",
      "raise_if_fsspec",
      "_check_fsspec_available",
      "permission_manager",
      "resumable_ops_no_permissions",
      "test_start_resumable_write_permission_denied",
      "test_start_resumable_read_with_permissions",
      "test_read_chunk_permission_check",
      "test_finalize_read_permission_check",
      "test_copy_resumable_permission_check",
      "test_write_multiple_chunks_permission_check",
      "ar_cache",
      "test_ar_cache_basic",
      "test_ipfs_fs_path_to_cid",
      "test_ipfs_fs_ls",
      "test_ipfs_fs_pin",
      "test_ipfs_fs_cached_access",
      "test_metrics_collection",
      "test_gateway_configuration",
      "test_gateway_fallback_chain",
      "test_gateway_content_cached",
      "test_gateway_path_formatting",
      "test_collect_operation_stats",
      "test_create_journal_monitor",
      "test_load_dataset",
      "test_load_multimodal_dataset",
      "test_shuffled_batch_iteration",
      "test_to_pytorch",
      "test_to_tensorflow",
      "test_fetch_image",
      "test_fetch_image_with_transform",
      "test_get_performance_metrics",
      "test_close",
      "test_close_resource_cleanup",
      "test_handle_missing_samples",
      "test_advanced_prefetch_thread_management",
      "test_put_in_tier_all_backends",
      "test_get_content_tiers_all_backends",
      "test_migrate_between_tiers",
      "test_replication_policy",
      "resumable_ops",
      "test_start_resumable_write",
      "test_write_chunk",
      "test_write_multiple_chunks",
      "test_concurrent_same_chunk_request_deduplication",
      "test_resume_operation",
      "test_migrate_directory",
      "test_migrate_empty_list",
      "test_migrate_file_no_pin",
      "simulate_cat",
      "__getattr__",
      "test_method_call_forwarding",
      "test_method_normalization",
      "test_cat_content",
      "test_pin_add",
      "test_pin_ls",
      "test_pin_rm",
      "test_swarm_peers",
      "test_role_based_behavior",
      "test_run_ipfs_command",
      "test_run_ipfs_command_raw_output",
      "test_run_ipfs_command_error",
      "test_run_ipfs_command_timeout",
      "test_add",
      "test_cat",
      "test_perform_with_retry",
      "_create_ipfs_mock",
      "_create_s3_mock",
      "test_replicate_content",
      "test_get_optimal_source",
      "test_get_content_metadata",
      "test_find_content_source",
      "test_get_content_from_backend",
      "test_join_paths",
      "async_test_failed_transaction",
      "test_failed_transaction",
      "test_sync_local_to_mfs",
      "async_test_detect_by_content",
      "test_detect_by_content",
      "test_detect_changes",
      "async_test_move_content_batch",
      "test_move_content_batch",
      "mock_ipfs_add_directory",
      "mock_ipfs_get",
      "mock_ipfs_remove_pin",
      "mock_ipfs_daemon_start",
      "mock_ipfs_id",
      "mock_ipfs_set_config_value",
      "mock_ipfs_dht_findprovs",
      "mock_ipfs_name_resolve",
      "mock_ipfs_swarm_connect",
      "test_ipfs_add_directory",
      "test_ipfs_get",
      "test_ipfs_add_pin",
      "test_ipfs_remove_pin",
      "test_ipfs_ls_pinset",
      "test_ipfs_name_publish",
      "test_ipfs_dht_provide",
      "test_ipfs_swarm_peers",
      "test_ipfs_swarm_disconnect",
      "test_ipfs_daemon_start",
      "test_ipfs_daemon_stop",
      "test_ipfs_get_config",
      "test_ipfs_backend",
      "_get_ipfs_py_class",
      "print_json",
      "test_from_ipfs",
      "test_check_status",
      "test_ipfs_specific_pin_methods",
      "test_fixed_ipfs_backend",
      "run_migration_test",
      "calculate_file_hash",
      "verify_simulation_retrieval",
      "test_huggingface",
      "download_from_ipfs",
      "verify_content",
      "save_to_disk",
      "test_track_model_operation",
      "test_extend_high_level_api_with_aiml_telemetry",
      "_mock_hf_hub_download",
      "test_ipfs_client_import",
      "test_skip_wal_parameter",
      "test_backend_unavailable",
      "test_wait_for_operation_async",
      "test_backend_unavailable_async",
      "mock_replicate_to_ipfs",
      "mock_replicate_to_cluster",
      "mock_replicate_to_ipfs_async",
      "mock_replicate_to_cluster_async",
      "test_recovery_from_wal",
      "generate_random_content",
      "test_wait_for_completion",
      "custom_parse_args",
      "test_register_wal_commands",
      "test_wal_status_command",
      "test_form_add",
      "test_multiaddr_string_conversion",
      "test_multiaddr_manipulation",
      "test_connect_with_multiaddr",
      "test_core_package_import",
      "test_arrow_metadata_index_class",
      "test_model_registry_class",
      "pause_daemon_after_test",
      "test_ipfs_cluster_follow",
      "test_find_tasks_by_resource_requirements",
      "test_estimate_time_to_completion",
      "test_get_server_status",
      "test_get_peer_by_id_not_found",
      "test_start_server_endpoint",
      "test_get_server_status_endpoint",
      "generate_embedding",
      "test_metadata_only_search",
      "test_combined_search",
      "test_llm_context_generation",
      "test_server",
      "test_add_storacha_credentials",
      "test_add_ipfs_credentials",
      "test_remove_credentials",
      "test_01_no_lock_file",
      "test_03_stale_lock_file_no_removal",
      "check_daemon_status",
      "test_monitor_startup_and_shutdown",
      "test_role_specific_daemon_monitoring",
      "mock_download",
      "test_ipfs_kit_uses_existing_path",
      "test_ipfs_kit_binary_path_creation",
      "test_cli_controller",
      "test_distributed_controller",
      "test_fs_journal_controller",
      "test_static_files",
      "test_server_integration",
      "test_result_dictionary_pattern",
      "test_operation_error_type_classification",
      "test_correlation_id_tracking",
      "test_batch_operations_partial_success",
      "test_ipfs_error_hierarchy",
      "master_node",
      "leecher_node",
      "test_node_initialization",
      "test_role_specific_shutdown",
      "test_master_pin_operations",
      "test_master_get_pinset",
      "test_worker_pin_operations",
      "test_worker_get_pinset",
      "test_leecher_pin_operations",
      "test_leecher_get_pinset",
      "test_role_switching",
      "test_master_peer_listing",
      "test_cluster_status",
      "test_cluster_pin_add_auto_retry",
      "test_cluster_pin_rm_auto_retry",
      "test_peer_info_initialization",
      "test_peer_info_from_dict",
      "test_record_connection_attempt",
      "test_client_server_connection",
      "test_get_metadata_index",
      "test_add_record_to_index",
      "test_publish_metadata_index",
      "cluster_nodes",
      "test_task_creation_and_distribution",
      "test_leader_election_process",
      "add_pass",
      "test_tier_demotion",
      "test_content_replication",
      "test_latency_tracking",
      "test_worker_role_initialization",
      "test_discover_partitions",
      "test_update_stats_nonexistent",
      "test_search_text_error_handling",
      "test_sync_thread_main",
      "test_create_metadata_from_ipfs_file",
      "test_create_metadata_with_directory",
      "cluster_state_setup",
      "test_basic_tier_functionality",
      "test_tier_movement_to_storacha",
      "test_mcp_integration",
      "accept",
      "test_update_record",
      "test_handle_partition_request",
      "test_exists_endpoint",
      "test_debug_output",
      "test_pandas_parquet_integration",
      "test_pyarrow_integration",
      "test_parquet_dataset_integration",
      "test_dask_integration",
      "test_seaborn_visualization",
      "test_scikit_learn_integration",
      "test_workflow_integration",
      "test_image_data_integration",
      "test_get_state_path_from_metadata",
      "test_find_nodes_by_role",
      "test_find_tasks_by_status",
      "test_get_task_execution_metrics",
      "test_export_state_to_json",
      "test_ai_ml_integration_runs_with_pandas_missing",
      "test_ipfs_cluster_service_status",
      "test_ipfs_cluster_follow_status",
      "connect_to_peer",
      "get_dag",
      "unpin",
      "store_with_lotus",
      "test_auto_retry_on_daemon_not_running",
      "test_retry_with_demo_method",
      "import_module_from_path",
      "test_active_lock_file",
      "test_validate_cid_format",
      "test_validate_required_parameters",
      "test_validate_command_arguments",
      "test_no_lock_file",
      "test_stale_lock_file_without_removal",
      "test_get_state_interface_info",
      "test_save_car",
      "test_error_handling_file_not_found",
      "test_error_handling_dependencies_not_available",
      "test_lassie_status",
      "test_normal_startup",
      "test_lock_file_no_removal",
      "test_ipld_extension_initialization",
      "test_create_car",
      "test_add_car_to_ipfs",
      "test_create_dag_node",
      "monitoring_cluster",
      "setup_class",
      "test_automatic_recovery_actions",
      "test_ipfs_cluster_follow_status_direct",
      "test_controller_integration",
      "test_cache_operation",
      "test_task_operations",
      "test_storacha",
      "test_filecoin",
      "cluster_auth_setup",
      "test_generate_node_identity",
      "test_generate_cluster_certificates",
      "test_generate_ucan_token",
      "test_tls_connection_setup",
      "test_verify_capability_for_operation",
      "test_issue_auth_token",
      "upgrade_to_worker",
      "downgrade_to_leecher",
      "test_get_role_requirements",
      "test_downgrade_worker_to_leecher",
      "ensure_binaries",
      "test_binary_is_executable",
      "test_binary_returns_version",
      "test_replication_policy_thresholds",
      "_create_test_data",
      "test_add_relationship",
      "test_connect_to_server",
      "test_download_binaries",
      "test_ipfs_kit_initialization_download",
      "test_get_operation_status",
      "test_add_file_path",
      "test_get",
      "test_unpin",
      "test_publish",
      "test_connect",
      "test_open",
      "test_exists",
      "test_cluster_operations_leecher",
      "test_call_nonexistent_method",
      "test_method",
      "test_ai_register_dataset",
      "test_ai_register_model",
      "test_ai_optimize_model",
      "test_ai_test_inference",
      "test_ai_distributed_training_submit_job",
      "test_ai_distributed_training_cancel_job",
      "test_ai_langchain_load_documents",
      "test_ai_langchain_query",
      "test_ai_llama_index_create_index",
      "test_ai_benchmark_model",
      "test_ai_hybrid_search",
      "test_ai_create_vector_index",
      "test_ai_create_knowledge_graph_failure",
      "test_query_pins",
      "test_01_credential_management",
      "test_15_filecoin_to_ipfs_integration",
      "test_13_mock_mode",
      "check_daemon_process",
      "test_api_operations",
      "setup_test_app",
      "test_init_metadata_replication",
      "test_extension_initialization",
      "test_context_propagation",
      "test_simulate_operations",
      "test_generate_telemetry_report_async",
      "test_visualize_telemetry_metrics_async",
      "test_prometheus_integration_async",
      "test_tracing_integration_async",
      "test_get_telemetry_configuration_async",
      "api_instance",
      "method_with_doc",
      "test_api_method_normal",
      "test_api_method_unexpected_error",
      "test_upload_file_error",
      "test_download_file_with_name",
      "test_get_config",
      "test_model_classes",
      "create_dummy_cache",
      "print_section",
      "run_client",
      "print_header",
      "pyarrow_examples",
      "visualization_examples",
      "machine_learning_examples",
      "dask_examples",
      "full_workflow_example",
      "setup_api_server",
      "create_example_api",
      "simulate_backend_outage",
      "welcome",
      "direct_model_example",
      "run_example_server",
      "setup_knowledge_graph",
      "demonstrate_basic_queries",
      "demonstrate_vector_search",
      "connect",
      "add_ice_candidate",
      "_init_ui",
      "_schedule_tasks",
      "echo_protocol_handler",
      "setup_example_data",
      "resource_metrics_provider",
      "run_master_node",
      "run_worker_node",
      "example_resumable_write",
      "example_file_like_interface",
      "example_manage_resumable_operations",
      "progress_callback",
      "example_parallel_transfers",
      "initialize_api",
      "demonstrate_peer_discovery",
      "_warmup",
      "_run_with_profile",
      "profile_tiered_cache",
      "example_list_pinned_content",
      "example_pin_content",
      "example_unpin_content",
      "example_ipns_operations",
      "example_ai_ml_integration",
      "_start_stream",
      "example_context_manager",
      "example_correlation_tracking",
      "example_metrics_analysis",
      "connect_to_websocket",
      "run_benchmarks",
      "create_sample_content",
      "generate_test_operations",
      "_setup_event_handlers",
      "collect_stats",
      "run_mcp_emulator_demo",
      "visualize_results",
      "perform_wal_operations",
      "setup_webrtc_server",
      "create_config_file",
      "test_fault_tolerance",
      "run_ipc_server",
      "image_processing_task_handler",
      "hash_file",
      "search_content",
      "check_is_macos",
      "demo_provide",
      "create_test_files",
      "run_access_pattern_benchmark",
      "plot_metrics",
      "run_demo",
      "on_shutdown",
      "run_basic_benchmark",
      "run_parallel_benchmark",
      "run_comprehensive_benchmark",
      "run_server",
      "dataset_workflow",
      "langchain_workflow",
      "distributed_training_workflow",
      "vector_search_workflow",
      "check_ipfs_available",
      "get_storage_backends",
      "test_storage_api_async",
      "example_mfs_transaction",
      "example_content_type_detector",
      "example_mfs_change_watcher",
      "run_basic_operations",
      "run_performance_benchmark",
      "setup_test_environment",
      "handle_signaling",
      "generate_sample_data",
      "patch_api_for_visualization",
      "demonstrate_visualization",
      "run_bidirectional_example",
      "example_model_registry",
      "example_ipfs_dataloader",
      "example_pytorch_integration",
      "example_distributed_training",
      "_run_simulation_async",
      "find_ai_ml_resources",
      "query_metadata_index",
      "handle_alert",
      "setup_ipfs_with_libp2p",
      "add_test_content",
      "run_websocket_server",
      "connect_to_peers",
      "optimize_high_level_api",
      "cache_result",
      "optimize_cache_configuration",
      "implement_chunked_upload",
      "apply_all_optimizations",
      "compare_bloom_vs_set",
      "get_backend_module",
      "perform_migration",
      "integrity_status",
      "_check_dns_resolution",
      "run_ipfs_command",
      "generate_latest",
      "metrics_status",
      "all_metrics",
      "lassie_status",
      "async_content_generator",
      "migrate_ipfs_to_storacha",
      "migrate_ipfs_to_s3",
      "migrate_s3_to_ipfs",
      "migrate_storacha_to_ipfs",
      "weights_sum_to_one",
      "periodic_metrics_update",
      "initialize_content_registry",
      "map_backend_cid",
      "store_content",
      "stop",
      "_recover_metadata_backup",
      "_close_mmap_files",
      "_start_cleanup_task",
      "handle_asyncio_cancel",
      "get_resource_stats",
      "__init___v2",
      "execute_command",
      "shutdown_sync",
      "reset",
      "get_version_v2",
      "list_credentials",
      "update_local_server",
      "get_status",
      "add_transaction",
      "recover",
      "mkdir",
      "remove",
      "export",
      "add_s3_credentials",
      "generate_journal_dashboard",
      "handle_status_request_async",
      "handle_filecoin_to_ipfs_request_async",
      "handle_huggingface_to_ipfs_request",
      "handle_status_request",
      "handle_huggingface_to_ipfs_request_async",
      "handle_list_spaces_request",
      "handle_storacha_to_ipfs_request",
      "handle_retrieve_content_request",
      "handle_lassie_to_ipfs_request",
      "handle_download_request",
      "handle_s3_to_ipfs_request",
      "handle_storacha_to_ipfs_request_async",
      "handle_repo_creation_request",
      "handle_s3_to_ipfs_request_async",
      "_task_done_callback",
      "add_content_async",
      "get_content_async",
      "pin_content_async",
      "_detect_features",
      "_init_storage_models",
      "_init_new_cluster",
      "_init_components",
      "_handle_rest_api",
      "_get_current_endpoint",
      "_clean_cache",
      "_verify_lassie",
      "report_error",
      "_print_startup_message",
      "get_error_summary",
      "final",
      "get_overloads",
      "_type_check_issubclass_arg_1",
      "__new__",
      "_could_be_inserted_optional",
      "_check_generic",
      "get_annotations",
      "runtime_checkable",
      "TypedDict",
      "get_origin",
      "_add_doc",
      "add_move",
      "exec_",
      "copy",
      "_push_new_state",
      "get_supported_platform",
      "get_distribution",
      "_parents",
      "file_ns_handler",
      "parse_group",
      "_reload_version",
      "merge_setting",
      "guess_content_type",
      "_default_key_normalizer",
      "choose_boundary",
      "from_int",
      "_dnsname_match",
      "hostname",
      "_cf_data_from_bytes",
      "escape_html",
      "_fn_matches",
      "get_lexer_by_name",
      "_trim_arity",
      "match_hostname",
      "clear_cache",
      "parse_requires_path",
      "_best_version",
      "get_fullname",
      "match",
      "validates",
      "format_as_index",
      "attrib",
      "cmp_using",
      "update_wrapper_attributes",
      "patch_command_dispatcher",
      "handle_list_known_peers",
      "organize_mcp_patches",
      "fix_root_endpoint",
      "fix_ipfs_cat_endpoint",
      "add_webrtc_check_method",
      "fix_all_mcp_api_issues",
      "is_mcp_patch",
      "organize_patches",
      "get_ipfs_path",
      "get_ipfs_cluster_path",
      "get_lotus_path",
      "check_ipfs_api",
      "check_ipfs_cluster_api",
      "start_ipfs_daemon",
      "ensure_ipfs_cluster_initialized",
      "start_ipfs_cluster_service",
      "check_lotus_api",
      "patch_api_imports",
      "patch_init_file",
      "ensure_lotus_initialized",
      "start_lotus_daemon",
      "add_basic_endpoints",
      "fix_register_with_app",
      "create_fixed_server_script",
      "read_root",
      "find_method",
      "create_fixed_method",
      "fix_file",
      "_load_plugins",
      "open_file",
      "read_text",
      "list_directory",
      "exists",
      "add_file",
      "add_directory",
      "publish_to_ipns",
      "resolve_ipns",
      "get_peers",
      "save_config",
      "create_fixed_mcp_server",
      "ai_register_model",
      "get_name",
      "ai_optimize_model",
      "_check_version_and_capabilities",
      "_make_api_request",
      "list_objects_v2",
      "create_bucket",
      "upload_file",
      "patch_ipfs_model",
      "get_free_port",
      "test_ipfs_api",
      "handle_validation_error",
      "websocket_endpoint",
      "stop_collection",
      "_collect_process_metrics",
      "_log_metrics",
      "stream_cat",
      "stream_dag_export",
      "fix_blue_green_proxy",
      "apply_mcp_server_fixes",
      "fix_storage_manager_controller",
      "fix_controllers_folder_structure",
      "update_imports_in_storage_controller",
      "ensure_directory",
      "categorize_test",
      "create_test_init_files",
      "get_operations",
      "ensure_directory_exists",
      "fix_init_files",
      "is_controller_test",
      "is_server_test",
      "update_imports",
      "patch_mcp_discovery_model",
      "fix_ipfs_controller_anyio",
      "migrate_file",
      "migrate_directory",
      "migrate_by_list",
      "fix_controller_file",
      "discover_from_peer",
      "_deal_monitoring_thread",
      "source_credentials",
      "check_cloud_provider",
      "setup_extensions",
      "status",
      "add_endpoints_to_server",
      "add_pins_method",
      "fix_unused_imports",
      "create_mock_router",
      "test_lassie_integration",
      "fix_ipfs_controller",
      "_load_ipfs_implementation",
      "_create_mock_implementation",
      "_update_perf_stats",
      "find_all_storacha_files",
      "test_storacha_integration",
      "add_root_endpoint",
      "fix_kademlia_extensions",
      "initialize_kademlia_config",
      "create_backup",
      "find_python_files",
      "setup_signal_handlers",
      "get_huggingface_token",
      "find_ipfs_model_anyio_module",
      "find_ipfs_model_class",
      "add_compatibility_methods",
      "minimal_add_content",
      "check_method_added",
      "fix_ipfs_model",
      "create_directories",
      "setup_lotus_gateway",
      "verify_filecoin_integration",
      "ensure_enhanced_implementation",
      "fix_specific_method",
      "fix_api_path_prefix",
      "apply_direct_fixes",
      "add_execute_command_to_ipfs_model",
      "close",
      "_release_connection",
      "add_environment_variables",
      "test_huggingface_integration",
      "get_ipfs_py_class",
      "add_error_formatter",
      "fix_bare_excepts",
      "check_ipfs_cluster_modules",
      "fix_undefined_imports",
      "process_file",
      "fix_lotus_client",
      "setup_environment",
      "find_running_mcp_servers",
      "start_enhanced_mcp_server",
      "stop_existing_servers",
      "setup_mock_environment",
      "_deep_update",
      "deployment_status",
      "edit_file",
      "patch_file",
      "start_blue_green_deployment",
      "read_file_slice",
      "write_file",
      "get_ipfs_simple_api_class",
      "apply_monkeypatch",
      "remove_symlinks",
      "copy_directory_structure",
      "is_valid_python",
      "get_filecoin_client",
      "fix_ipfs_daemon_startup",
      "_setup_mock_storage",
      "_list_mock_files",
      "test_ls_multi_gw",
      "_raise_not_found_for_status",
      "textme",
      "test_simple_echo",
      "test_fastmcp_resource_mime_type",
      "test_resource_template_edge_cases",
      "test_lowlevel_server_lifespan",
      "test_basic_function",
      "test_pydantic_model_function",
      "test_disable_warn_on_duplicate_tools",
      "test_context_parameter_detection",
      "test_context_injection",
      "test_context_injection_async",
      "test_context_optional",
      "test",
      "custom_name",
      "test_non_ascii_description",
      "test_tool_error_details",
      "test_resource_with_params",
      "test_resource_with_untyped_params",
      "test_resource_mismatched_params",
      "test_resource_multiple_mismatched_params",
      "test_template_to_resource_conversion",
      "test_context_detection",
      "test_async_context",
      "test_optional_context",
      "test_prompt_decorator",
      "test_prompt_decorator_with_description",
      "test_list_prompts",
      "test_get_prompt",
      "test_get_prompt_with_resource",
      "temp_config_dir",
      "param",
      "stdio_server",
      "websocket_server",
      "_get_npx_command",
      "_import_server",
      "get_lock",
      "cache_info",
      "async_wrapper",
      "test_ipfs_py_import",
      "test_ipfs_backend_initialization",
      "test_basic_operations",
      "test_migration_imports",
      "test_task_management",
      "add_warning_header",
      "test_search_imports",
      "test_document_indexing",
      "test_vector_search",
      "verify_ipfs_backend",
      "test_ipfs_backend_import_mechanism",
      "test_streaming_imports",
      "shutdown_event",
      "signal_handler",
      "wait_for_server",
      "_setup_file_watcher",
      "check_lotus_installation",
      "check_existing_lotus",
      "setup_lassie_mock_server",
      "check_script_executable",
      "run_implementation_scripts",
      "install_dependencies",
      "update_mcp_server",
      "add_simulation_endpoints",
      "is_minio_installed",
      "test_s3_connection",
      "setup_gateway",
      "test_filecoin_support",
      "setup_storacha_mock_server",
      "find_lassie_binary",
      "check_huggingface_cli",
      "do_GET",
      "update_filecoin_credentials",
      "setup_aws_configuration",
      "create_s3_bucket",
      "_start_daemon",
      "check_daemon_status_wrapper",
      "patched_start_daemon",
      "backup_script",
      "inspect_mcp",
      "get_ipfs_version",
      "load_config",
      "find_mcp_server_processes",
      "kill_mcp_server_processes",
      "check_server_running",
      "ensure_webrtc_in_module",
      "dht_findpeer",
      "apply_metrics_patches",
      "track_streaming_operation",
      "_verify_content_integrity",
      "_put_in_tier",
      "_migrate_to_tier",
      "setup_configuration",
      "to_ipfs",
      "get_credentials_from_env",
      "list_buckets",
      "update_pins_method",
      "run_lotus_daemon_tests",
      "_print_summary",
      "check_anyio_available",
      "setup_directories",
      "setup_api_client",
      "start",
      "poll_connection_stats",
      "update_visualizations",
      "_ensure_directories",
      "apply_to_module",
      "hardware_detect",
      "install_lassie_daemon",
      "install_libp2p_dependencies",
      "install_dependencies_auto",
      "check_dependency",
      "_setup_lotus_path",
      "download_params",
      "install_lotus_daemon",
      "install_lotus_worker",
      "create_backend_proxy",
      "update_mcp_server_with_proxies",
      "create_test_fix_script",
      "plot_entry_types",
      "resolve_content",
      "resolve_pins",
      "resolve_cluster_peers",
      "resolve_cluster_status",
      "resolve_resolve_ipns",
      "resolve_keys",
      "resolve_ai_datasets",
      "mutate",
      "execute_graphql",
      "extend_high_level_api",
      "update_from_dict",
      "register_peer_websocket",
      "run_cluster_command",
      "test_ipfs_cluster_ctl",
      "__exit__",
      "rollback",
      "sync_to_mfs",
      "_get_local_files",
      "_add_additional_types",
      "join_paths",
      "_detect_changes",
      "copy_content_batch",
      "move_content_batch",
      "create_file_with_type",
      "get_cid",
      "get_protocol_value",
      "create_cid_from_bytes",
      "secure_handle_webrtc_signaling",
      "secure_handle_notification_websocket",
      "filter_notification_types_by_role",
      "recv",
      "_register_websocket_routes",
      "create_token",
      "get_tracing_config",
      "get_alert_config",
      "create_result_dict",
      "get_openapi",
      "notifications_websocket",
      "list_storage_backends",
      "enable_storage_backend",
      "supports_color",
      "_create_test_files",
      "benchmark_caching",
      "benchmark_fsspec_operations",
      "run_all_benchmarks",
      "hybrid_search",
      "search_models",
      "get_available_workers",
      "get_optimization_stats",
      "get_benchmark_helper",
      "_init_metadata_replication",
      "unregister_peer",
      "on_peer_discovered",
      "pins",
      "get_operation_status",
      "get_realtime_telemetry",
      "get_telemetry_config",
      "register_wal_commands",
      "_initialize_topology_optimizer",
      "handle_multi_peer_signaling",
      "update_prometheus_metrics_async",
      "download_binaries",
      "is_available",
      "_get_working_endpoint",
      "store_add",
      "track_model_operation",
      "_check_and_install_dependencies",
      "stable_method",
      "stable_api",
      "experimental_api",
      "print_api_stability_report",
      "_subscribe",
      "_handle_partition_request",
      "_start_processing",
      "handle_version_command",
      "handle_get_command",
      "add_parallel_query_commands",
      "list_streams",
      "_load_or_create_schema_registry",
      "_initialize_vector_index",
      "_persist_indexes",
      "add_entity",
      "add_relationship",
      "get_entity",
      "query_entities",
      "graph_vector_search",
      "_init_tiered_backend",
      "get_api_extension",
      "_init_arrow_state",
      "stream_media",
      "_init_task_group",
      "_load_or_create_identity",
      "_periodic_dht_refresh",
      "_handle_bitswap_want",
      "_handle_discovery_message",
      "integrate_enhanced_dht_discovery",
      "run",
      "_cmd_list",
      "metadata_index_status",
      "metadata_index_aggregate",
      "benchmark_status",
      "benchmark_results",
      "api_unexpected_error",
      "download_file",
      "get_config",
      "run_cluster_service_command",
      "test_ipfs_cluster_service",
      "monitor_report",
      "run_benchmark_test_version",
      "_run_add_benchmarks",
      "_run_cat_benchmarks",
      "_run_pin_benchmarks",
      "_benchmark_access_pattern",
      "handle_benchmark_command",
      "handle_check_dependencies_command",
      "run_command",
      "run_ipget_command",
      "ipget_download_object",
      "test_ipget",
      "lifespan",
      "_initialize_master_security",
      "_initialize_ucan_keys",
      "plot_operation_status",
      "main_async",
      "default",
      "validate_name_or_cid",
      "get_model_registry",
      "_create_new_registry",
      "_initialize_format_handlers",
      "_split_file_into_chunks",
      "add_texts",
      "save_to_ipfs",
      "load",
      "load_data",
      "create_index",
      "as_query_engine",
      "query",
      "_start_prefetch",
      "prepare_distributed_task",
      "_start_coordination",
      "_aggregate_parameters",
      "_handle_worker_failure",
      "_report_training_completion",
      "start_worker",
      "_worker_heartbeat_loop",
      "_handle_parameter_update",
      "_get_worker_capabilities",
      "_get_model_for_training",
      "_create_trained_model_outputs",
      "execute_training_task",
      "save_model",
      "load_model",
      "trace_model",
      "auto_retry_on_daemon_failure",
      "create",
      "is_initialized",
      "_setup_cluster_management",
      "_ensure_daemon_running",
      "get_metadata_index",
      "publish_metadata_index",
      "get_cluster_status",
      "get_task_status",
      "_setup_knowledge_graph",
      "_setup_ipld_extension",
      "extract_car",
      "load_car",
      "create_dag_node",
      "_check_graph_query_and_call",
      "_setup_ai_ml_integration",
      "_check_ai_ml_and_call",
      "load_collection",
      "name_resolve",
      "test_install",
      "files_stat",
      "cluster_pin_add",
      "cluster_pin_rm",
      "cluster_pin_ls",
      "cluster_status",
      "perform_operation_with_retry",
      "stop_websocket_peer_discovery_server",
      "disconnect_from_websocket_peer_discovery",
      "__del__",
      "_setup_minimal_tracing",
      "deep_merge",
      "c_data_interface_example",
      "register_fs_journal_commands",
      "handle_fs_journal_status",
      "handle_fs_journal_list",
      "handle_fs_journal_checkpoint",
      "handle_fs_journal_recover",
      "handle_fs_journal_mount",
      "handle_fs_journal_mkdir",
      "handle_fs_journal_write",
      "handle_fs_journal_read",
      "handle_fs_journal_rm",
      "handle_fs_journal_mv",
      "handle_fs_journal_ls",
      "handle_fs_journal_export",
      "get_report_file",
      "generate_visualization",
      "_load_all_credentials",
      "collect",
      "_update_metrics_cache",
      "_create_metrics",
      "_initialize_role_requirements",
      "create_test_task_data",
      "save_state",
      "_create_default_schema",
      "handle_partition_request",
      "handle_partition_data_request",
      "find_similar_models",
      "is_valid_cid",
      "perform_with_retry",
      "pin_multiple",
      "daemon_stop",
      "test_ipfs",
      "run_cluster_follow_command",
      "_initialize_source",
      "_progressive_fetch",
      "_fill_buffer",
      "create_offer",
      "add_ipfs_track",
      "check_webrtc_dependencies",
      "register_task_handler",
      "get_cluster_metrics",
      "find_ai_ml_resources_async",
      "test_config",
      "test_monitoring",
      "inject_libp2p_into_high_level_api",
      "run_benchmark",
      "compare_benchmarks",
      "visualize_benchmark",
      "list_benchmarks",
      "discover_peers",
      "_initialize_connection",
      "_create_default_static_files",
      "print_task_details",
      "_register_migration_tool",
      "_load_policies",
      "_verify_migration",
      "_optimize_for_master",
      "_configure_task_distribution",
      "apply_libp2p_mocks",
      "subscribe",
      "patch_mcp_command_handlers",
      "_handle_list_known_peers",
      "stat_file",
      "make_directory",
      "publish_name",
      "_handle_name_publish",
      "_handle_name_resolve",
      "_handle_dht_findpeer",
      "_handle_dht_findprovs",
      "apply_hooks",
      "extend_high_level_api_class",
      "_initialize_event_loop",
      "find_content",
      "enhance_with_recursive_routing",
      "enhanced_find_providers",
      "_get_initial_peers",
      "find_providers",
      "_retrieve_from_peer",
      "extend_ipfs_kit_class",
      "_handle_content_miss_with_libp2p",
      "apply_ipfs_kit_integration",
      "_get_enhanced_dht_discovery",
      "handle_cache_miss",
      "_create_communicator",
      "initialize_kademlia",
      "get_prototype",
      "patch_stream_read_until",
      "apply_protocol_extensions",
      "apply_protocol_extensions_to_instance",
      "setup_advanced_routing",
      "find_providers_advanced",
      "_handle_sync_request",
      "_deliver_message_to_handlers",
      "add_enhanced_dht_discovery_methods",
      "enhance_libp2p_peer",
      "b58decode",
      "_create_routing_static_files",
      "_register_data_provider",
      "dashboard_routing",
      "SelectBackend",
      "patch_fastapi_app",
      "add_sse_endpoint",
      "webrtc_signaling",
      "initialize_ipfs_model",
      "ensure_ipfs_model",
      "get_routing_status",
      "get_integrator",
      "record_routing_outcome",
      "patch_run_mcp_server",
      "create_app_wrapper",
      "initialize_mcp_server",
      "_setup_logging",
      "_add_basic_endpoints",
      "_start_cache_cleanup_thread",
      "tool_handler",
      "demonstrate_basic_usage",
      "setup_api",
      "run_dht_example",
      "run_ipns_example",
      "demo_langchain_integration",
      "demo_huggingface_integration",
      "demonstrate_basic_job_submission",
      "demonstrate_key_management",
      "create_example_configuration",
      "demonstrate_dynamic_management",
      "_init_vector_search",
      "_on_become_primary",
      "create_auth_config",
      "create_protected_api_endpoint",
      "update_controller_registry",
      "_register_auth_endpoints",
      "_secure_default_endpoints",
      "requires_permission",
      "_setup_middlewares",
      "login",
      "add_permission",
      "_collect_role_permissions",
      "update_last_used",
      "get_instance",
      "rbac_manager",
      "test_api_key_backend_access",
      "test_identify_backend_operation",
      "server_info",
      "create_router",
      "create_fs_ipfs_bridge",
      "_add_normalized_methods",
      "add_storacha_credentials",
      "add_ipfs_credentials",
      "remove_file",
      "resolve_name",
      "get_dag_node",
      "put_dag_node",
      "get_block_json",
      "add_filecoin_credentials",
      "handle_add_request",
      "get_content_json",
      "get_content_as_tar",
      "get_node_id",
      "dag_resolve",
      "block_get",
      "block_stat",
      "create_metalink_async",
      "pause_download_async",
      "get_status_async",
      "purge_downloads_async",
      "stop_daemon_async",
      "create_metalink",
      "pause_download",
      "purge_downloads",
      "handle_space_creation_request",
      "_warn_if_async_context",
      "handle_list_request_async",
      "handle_ipfs_to_s3_request_async",
      "handle_create_wallet_request_async",
      "handle_list_imports_request_async",
      "handle_deal_info_request_async",
      "handle_retrieve_data_request_async",
      "handle_miner_info_request_async",
      "handle_delete_request",
      "handle_ipfs_to_lassie_request",
      "create_ipfs_router",
      "register_with_mcp",
      "_save_content_registry",
      "_save_metrics",
      "reset_metrics",
      "_ensure_metadata_dir",
      "_get_ipfs_backend",
      "create_advanced_ipfs_router",
      "validate_command_args",
      "_check_ipfs_available",
      "add_ipfs_model_extensions",
      "enterprise_status",
      "get_streaming_ops",
      "register_advanced_ipfs_routes",
      "_ensure_methods",
      "_update_stats",
      "dag_put",
      "object_new",
      "object_put",
      "object_patch_add_link",
      "object_patch_rm_link",
      "object_patch_set_data",
      "name_publish",
      "key_gen",
      "key_rename",
      "key_import",
      "bootstrap_list",
      "get_search_service",
      "example_usage",
      "demonstrate_cost_based_routing",
      "_register_backends",
      "test_get_throughput",
      "test_clear_history",
      "test_record_failed_operation",
      "test_get_success_rate",
      "test_estimate_retrieval_cost",
      "test_estimate_total_cost",
      "test_get_cost_model",
      "test_collect_metrics",
      "test_get_set_metric",
      "test_get_best_alternative",
      "select_backend",
      "test_add_remove_strategy",
      "test_select_backend_with_strategy",
      "test_select_backend_for_small_document",
      "test_record_and_use_performance_metrics",
      "test_global_convenience_function",
      "test_select_backend_with_analyzer",
      "test_select_backend_for_write",
      "test_select_backend_with_client_ip",
      "test_no_available_backends",
      "update_node_info",
      "track_api_request",
      "track_connection_pool",
      "track_content_get",
      "set_pins_count",
      "analyze_metrics",
      "_update_ipfs_metrics",
      "_update_node_info",
      "_update_connection_pool_metrics",
      "_update_ipns_key_count",
      "track_dht_operation",
      "track_integration_usage",
      "start_debug_server",
      "handle_insights",
      "handle_server",
      "create_init_files",
      "refresh_data",
      "dict_to_struct",
      "handle_config",
      "handle_dashboard",
      "mock_oauth_persistence",
      "test_app",
      "mock_api_key_store",
      "mock_audit_logger",
      "test_update_api_key_restrictions_endpoint",
      "test_get_preferred_backends",
      "test_record_usage",
      "test_search_module_exists",
      "test_backend_initialization",
      "test_get_metadata",
      "stream_to_ipfs"
    ],
    "system": [
      "system_info",
      "test_get_filesystem_method",
      "test_ipfs_filesystem",
      "test_get_filesystem_success",
      "test_filesystem_journal",
      "test_cleanup_system",
      "get_filesystem",
      "test_get_filesystem_exception",
      "test_filesystem_journal_integration",
      "original_get_filesystem",
      "initialize_auth_system",
      "initialize_routing_system",
      "update_system_info"
    ],
    "utility": [
      "health_check",
      "ping",
      "health_endpoint",
      "tools_health",
      "health",
      "verify_health_check",
      "list_fs_ipfs_mappings",
      "get_health",
      "api_health",
      "check_mcp_server_health",
      "check_server_health",
      "test_storage_health",
      "test_server_health",
      "_handle_ping",
      "test_libp2p_health",
      "test_health_check",
      "test_ping_peer",
      "test_health_endpoint",
      "test_libp2p_health_endpoint",
      "test_health_check_includes_daemon_status",
      "check_health",
      "test_health_monitoring",
      "test_02_health_check",
      "test_aria2_health_endpoint",
      "test_01_server_health",
      "test_health",
      "test_get_journal_health_status",
      "test_wal_health_command_sync",
      "test_wal_health_command",
      "mock_backend_health",
      "get_journal_health_status",
      "storage_health",
      "_check_connection_health",
      "verify_server_health",
      "stop_daemon_health_monitor",
      "get_server_health",
      "_check_tier_health",
      "_start_health_check",
      "start_daemon_health_monitor",
      "is_daemon_health_monitor_running",
      "simulate_health_change",
      "check_database_health",
      "get_mappings",
      "get_backend_health"
    ],
    "vfs": [
      "vfs_mount",
      "vfs_status",
      "vfs_delete",
      "vfs_write",
      "vfs_read"
    ]
  },
  "complete_tools": 0,
  "implementation_references": {
    "SelectBackend": "/home/barberb/ipfs_kit_py/ipfs_kit_py/routing/grpc/routing_pb2_grpc.py",
    "TypedDict": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/typing_extensions.py",
    "__call__": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "__del__": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "__exit__": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
    "__getattr__": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/cli_controller_anyio.py",
    "__init__": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/services/performance_optimization_service.py",
    "__init___v2": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/integration.py",
    "__new__": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/typing_extensions.py",
    "__post_init__": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/adaptive_optimizer.py",
    "_add_additional_types": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
    "_add_basic_endpoints": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/server_bridge.py",
    "_add_doc": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
    "_add_journal_entry": "/home/barberb/ipfs_kit_py/fs_journal_tools.py",
    "_add_normalized_methods": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/utils/method_normalizer.py",
    "_aggregate_parameters": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "_async_measure_endpoint_latency": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_performance.py",
    "_benchmark_access_pattern": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark_framework.py",
    "_best_version": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/distlib/metadata.py",
    "_call_mfs_method": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
    "_cf_data_from_bytes": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/urllib3/contrib/_securetransport/low_level.py",
    "_check_ai_ml_and_call": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "_check_and_install_dependencies": "/home/barberb/ipfs_kit_py/ipfs_kit_py/huggingface_kit.py",
    "_check_connection_health": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_connection_pool.py",
    "_check_dns_resolution": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/storacha.py",
    "_check_fsspec_available": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api.py",
    "_check_generic": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/typing_extensions.py",
    "_check_graph_query_and_call": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "_check_ipfs_available": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
    "_check_tier_health": "/home/barberb/ipfs_kit_py/ipfs_kit_py/hierarchical_storage_methods.py",
    "_check_version_and_capabilities": "/home/barberb/ipfs_kit_py/applied_patches/enhanced_lassie_storage.py",
    "_clean_cache": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/s3_backend.py",
    "_cleanup": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cluster_state.py",
    "_cleanup_temp_files": "/home/barberb/ipfs_kit_py/applied_patches/direct_mcp_server.py",
    "_close_mmap_files": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/persistence/cache_manager.py",
    "_cmd_list": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_cli.py",
    "_collect_process_metrics": "/home/barberb/ipfs_kit_py/patches/mcp/mcp_monitoring.py",
    "_collect_role_permissions": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/rbac_enhanced.py",
    "_configure_task_distribution": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cluster/role_manager.py",
    "_could_be_inserted_optional": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/typing_extensions.py",
    "_create_communicator": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/protocol_integration.py",
    "_create_default_schema": "/home/barberb/ipfs_kit_py/ipfs_kit_py/arrow_metadata_index.py",
    "_create_default_static_files": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/dashboard.py",
    "_create_ipfs_mock": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_bridge_model.py",
    "_create_metrics": "/home/barberb/ipfs_kit_py/ipfs_kit_py/prometheus_exporter.py",
    "_create_mock_filecoin": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
    "_create_mock_implementation": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_backend.py",
    "_create_mock_replication_manager": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication.py",
    "_create_mock_webrtc_manager": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication_anyio.py",
    "_create_new_registry": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "_create_routing_static_files": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/routing_dashboard.py",
    "_create_s3_mock": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_bridge_model.py",
    "_create_test_data": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_knowledge_graph.py",
    "_create_test_files": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark.py",
    "_create_test_network": "/home/barberb/ipfs_kit_py/test/test_discovery/enhanced_mcp_discovery_mock.py",
    "_create_trained_model_outputs": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "_deal_monitoring_thread": "/home/barberb/ipfs_kit_py/applied_patches/advanced_filecoin.py",
    "_deep_update": "/home/barberb/ipfs_kit_py/applied_patches/enhanced_mcp_server.py",
    "_default_key_normalizer": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/urllib3/poolmanager.py",
    "_deliver_message_to_handlers": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/gossipsub_protocol.py",
    "_detect_changes": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
    "_detect_features": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/models/ipfs_model.py",
    "_discover_streaming_tests": "/home/barberb/ipfs_kit_py/test/utils/mcp/mcp_test_runner.py",
    "_discover_unit_tests": "/home/barberb/ipfs_kit_py/test/utils/mcp/mcp_test_runner.py",
    "_dnsname_match": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/distlib/compat.py",
    "_ensure_daemon_running": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "_ensure_directories": "/home/barberb/ipfs_kit_py/scripts/daemon/daemon_manager.py",
    "_ensure_metadata_dir": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/metadata/ipfs_metadata.py",
    "_ensure_methods": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced.py",
    "_exchange_server_info": "/home/barberb/ipfs_kit_py/test/test_discovery/enhanced_mcp_discovery_mock.py",
    "_fill_buffer": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_streaming.py",
    "_fn_matches": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pygments/lexers/__init__.py",
    "_generate_fix_recommendations": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_fixed.py",
    "_get_current_endpoint": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/storacha_backend.py",
    "_get_enhanced_dht_discovery": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/p2p_integration.py",
    "_get_initial_peers": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/recursive_routing.py",
    "_get_ipfs_backend": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_advanced_router.py",
    "_get_ipfs_client": "/home/barberb/ipfs_kit_py/ipfs_mcp_tools.py",
    "_get_ipfs_py_class": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_backend.py",
    "_get_local_files": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
    "_get_model_for_training": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "_get_npx_command": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/src/mcp/cli/cli.py",
    "_get_s3_client": "/home/barberb/ipfs_kit_py/multi_backend_fs_integration.py",
    "_get_worker_capabilities": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "_get_working_endpoint": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_storacha_kit.py",
    "_handle_bitswap_want": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p_peer.py",
    "_handle_content_miss_with_libp2p": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/ipfs_kit_integration.py",
    "_handle_dht_findpeer": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
    "_handle_dht_findprovs": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
    "_handle_discovery_message": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p_peer.py",
    "_handle_list_known_peers": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
    "_handle_name_publish": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
    "_handle_name_resolve": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
    "_handle_parameter_update": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "_handle_partition_request": "/home/barberb/ipfs_kit_py/ipfs_kit_py/metadata_sync_handler.py",
    "_handle_ping": "/home/barberb/ipfs_kit_py/test/test_fixtures/libp2p_test_fixtures.py",
    "_handle_rest_api": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/integration.py",
    "_handle_sync_request": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/protocol_extensions.py",
    "_handle_worker_failure": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "_import_server": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/src/mcp/cli/cli.py",
    "_init_arrow_state": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cluster_management.py",
    "_init_components": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/integration.py",
    "_init_metadata_replication": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api.py",
    "_init_new_cluster": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/ha/service.py",
    "_init_storage_models": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/models/storage_manager.py",
    "_init_task_group": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p_peer.py",
    "_init_tiered_backend": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_replication.py",
    "_init_ui": "/home/barberb/ipfs_kit_py/examples/unified_dashboard_example.py",
    "_init_vector_search": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/search/mcp_search.py",
    "_initialize_connection": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs/ipfs_py.py",
    "_initialize_db": "/home/barberb/ipfs_kit_py/fs_journal_tools.py",
    "_initialize_event_loop": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/enhanced_dht_discovery.py",
    "_initialize_format_handlers": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "_initialize_master_security": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cluster_authentication.py",
    "_initialize_role_requirements": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cluster_dynamic_roles.py",
    "_initialize_source": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_streaming.py",
    "_initialize_topology_optimizer": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_multi_peer.py",
    "_initialize_ucan_keys": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cluster_authentication.py",
    "_initialize_vector_index": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipld_knowledge_graph.py",
    "_key_to_filename": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server_anyio.py",
    "_kill_existing_servers": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_features.py",
    "_list_mock_files": "/home/barberb/ipfs_kit_py/applied_patches/enhanced_huggingface_storage.py",
    "_load_all_credentials": "/home/barberb/ipfs_kit_py/ipfs_kit_py/credential_manager.py",
    "_load_ipfs_implementation": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_backend.py",
    "_load_or_create_identity": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p_peer.py",
    "_load_or_create_schema_registry": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipld_knowledge_graph.py",
    "_load_plugins": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api_fixed.py",
    "_load_policies": "/home/barberb/ipfs_kit_py/ipfs_kit_py/migration_tools/migration_controller.py",
    "_log_metrics": "/home/barberb/ipfs_kit_py/patches/mcp/mcp_monitoring.py",
    "_log_network_event": "/home/barberb/ipfs_kit_py/scripts/test/network_simulator.py",
    "_make_api_request": "/home/barberb/ipfs_kit_py/patches/storage/filecoin_storage.py",
    "_measure_endpoint_latency": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_performance.py",
    "_migrate_to_tier": "/home/barberb/ipfs_kit_py/ipfs_kit_py/hierarchical_storage_methods.py",
    "_mock_hf_hub_download": "/home/barberb/ipfs_kit_py/test/unit/ai_ml/test_huggingface_kit.py",
    "_on_become_primary": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/ha/integration.py",
    "_optimize_for_master": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cluster/role_manager.py",
    "_parents": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
    "_perform_final_cleanup": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/webrtc_controller.py",
    "_periodic_dht_refresh": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p_peer.py",
    "_persist_indexes": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipld_knowledge_graph.py",
    "_print_startup_message": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/utils/file_watcher.py",
    "_print_summary": "/home/barberb/ipfs_kit_py/scripts/test/test_runner.py",
    "_progressive_fetch": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_streaming.py",
    "_push_new_state": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/resolvelib/resolvers.py",
    "_put_in_tier": "/home/barberb/ipfs_kit_py/ipfs_kit_py/hierarchical_storage_methods.py",
    "_raise_not_found_for_status": "/home/barberb/ipfs_kit_py/docs/ipfsspec/ipfsspec/async_ipfs.py",
    "_read_file": "/home/barberb/ipfs_kit_py/test/performance/test_streaming_performance_anyio.py",
    "_recover_metadata_backup": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/persistence/cache_manager.py",
    "_register_auth_endpoints": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/server_integration.py",
    "_register_backends": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/examples/multimedia_storage_app.py",
    "_register_data_provider": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/routing_dashboard.py",
    "_register_exception_handler": "/home/barberb/ipfs_kit_py/enhanced_mcp_server_fixed.py",
    "_register_migration_tool": "/home/barberb/ipfs_kit_py/ipfs_kit_py/migration_tools/migration_controller.py",
    "_register_routes": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server_anyio.py",
    "_register_websocket_routes": "/home/barberb/ipfs_kit_py/ipfs_kit_py/streaming_security_integration.py",
    "_release_connection": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_connection_pool.py",
    "_reload_version": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
    "_report_training_completion": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "_retrieve_from_peer": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/recursive_routing.py",
    "_run_add_benchmarks": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark_framework.py",
    "_run_async_test": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration_anyio.py",
    "_run_cat_benchmarks": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark_framework.py",
    "_run_network_benchmarks": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark_framework.py",
    "_run_pin_benchmarks": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark_framework.py",
    "_run_simulation_async": "/home/barberb/ipfs_kit_py/examples/wal_telemetry_api_example.py",
    "_run_with_profile": "/home/barberb/ipfs_kit_py/examples/performance_profiling.py",
    "_save_content_registry": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/manager.py",
    "_save_metrics": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/monitoring/performance_monitor.py",
    "_schedule_tasks": "/home/barberb/ipfs_kit_py/examples/unified_dashboard_example.py",
    "_secure_default_endpoints": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/server_integration.py",
    "_setup_ai_ml_integration": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "_setup_async": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration_anyio.py",
    "_setup_cluster_management": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "_setup_event_handlers": "/home/barberb/ipfs_kit_py/examples/mcp_webrtc_aiortc_client.py",
    "_setup_file_watcher": "/home/barberb/ipfs_kit_py/scripts/server/run_server.py",
    "_setup_ipld_extension": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "_setup_knowledge_graph": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "_setup_logging": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/server_bridge.py",
    "_setup_lotus_path": "/home/barberb/ipfs_kit_py/scripts/install/install_lotus.py",
    "_setup_middlewares": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/auth_system_integration.py",
    "_setup_minimal_tracing": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_telemetry_tracing.py",
    "_setup_mock_responses": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_mfs_operations.py",
    "_setup_mock_storage": "/home/barberb/ipfs_kit_py/applied_patches/enhanced_huggingface_storage.py",
    "_split_file_into_chunks": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "_start_cache_cleanup_thread": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/server_bridge.py",
    "_start_cleanup_task": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/webrtc_controller.py",
    "_start_coordination": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "_start_daemon": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/mcp_compatibility.py",
    "_start_health_check": "/home/barberb/ipfs_kit_py/scripts/daemon/daemon_manager.py",
    "_start_prefetch": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "_start_processing": "/home/barberb/ipfs_kit_py/ipfs_kit_py/storage_wal.py",
    "_start_required_daemons": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "_start_server": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_features.py",
    "_start_stream": "/home/barberb/ipfs_kit_py/examples/webrtc_streaming_optimized_example.py",
    "_stop_server": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_features.py",
    "_store_test_content": "/home/barberb/ipfs_kit_py/test/migration_tests.py",
    "_subscribe": "/home/barberb/ipfs_kit_py/ipfs_kit_py/metadata_sync_handler.py",
    "_task_done_callback": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_anyio.py",
    "_track_call": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_filecoin_integration.py",
    "_trim_arity": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pyparsing/core.py",
    "_type_check_issubclass_arg_1": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/typing_extensions.py",
    "_update_connection_pool_metrics": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
    "_update_ipfs_metrics": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
    "_update_ipns_key_count": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
    "_update_metrics_cache": "/home/barberb/ipfs_kit_py/ipfs_kit_py/prometheus_exporter.py",
    "_update_node_info": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
    "_update_perf_stats": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_backend.py",
    "_update_stats": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced.py",
    "_verify_content_integrity": "/home/barberb/ipfs_kit_py/ipfs_kit_py/hierarchical_storage_methods.py",
    "_verify_lassie": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/storage_manager/backends/lassie_backend.py",
    "_verify_migration": "/home/barberb/ipfs_kit_py/ipfs_kit_py/migration_tools/migration_controller.py",
    "_warmup": "/home/barberb/ipfs_kit_py/examples/performance_profiling.py",
    "_warn_if_async_context": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/s3_controller_anyio.py",
    "_worker_heartbeat_loop": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "accept": "/home/barberb/ipfs_kit_py/test/unit/core/test_websocket_notifications_anyio.py",
    "add": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
    "add_backend_endpoints": "/home/barberb/ipfs_kit_py/scripts/api/implement_real_apis.py",
    "add_basic_endpoints": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_api.py",
    "add_basic_tests": "/home/barberb/ipfs_kit_py/run_tests.py",
    "add_compatibility_methods": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/mcp_compatibility.py",
    "add_content": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_register.py",
    "add_content_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_anyio.py",
    "add_dataset": "/home/barberb/ipfs_kit_py/test/test_fixtures/ai_ml_test_fixtures.py",
    "add_directory": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
    "add_endpoints_to_server": "/home/barberb/ipfs_kit_py/applied_patches/add_missing_endpoints_modified.py",
    "add_enhanced_dht_discovery_methods": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/gossipsub_protocol.py",
    "add_entity": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipld_knowledge_graph.py",
    "add_environment_variables": "/home/barberb/ipfs_kit_py/applied_patches/fix_huggingface_integration.py",
    "add_error_formatter": "/home/barberb/ipfs_kit_py/applied_patches/add_error_format.py",
    "add_event": "/home/barberb/ipfs_kit_py/fixes/webrtc_monitor.py",
    "add_execute_command_to_ipfs_model": "/home/barberb/ipfs_kit_py/applied_patches/add_execute_command.py",
    "add_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
    "add_filecoin_credentials": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/credential_controller_anyio.py",
    "add_generic_credential": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/credential_controller_anyio.py",
    "add_ice_candidate": "/home/barberb/ipfs_kit_py/examples/unified_dashboard_example.py",
    "add_initialize_endpoint": "/home/barberb/ipfs_kit_py/add_initialize_endpoint.py",
    "add_ipfs_credentials": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/credential_controller.py",
    "add_ipfs_model_extensions": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_extensions.py",
    "add_ipfs_tools_to_mcp": "/home/barberb/ipfs_kit_py/directly_modify_mcp.py",
    "add_ipfs_track": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_streaming.py",
    "add_mock_content": "/home/barberb/ipfs_kit_py/mcp_server_with_sse.py",
    "add_model": "/home/barberb/ipfs_kit_py/test/test_fixtures/ai_ml_test_fixtures.py",
    "add_move": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
    "add_parallel_query_commands": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cli.py",
    "add_pass": "/home/barberb/ipfs_kit_py/test/unit/core/test_comprehensive.py",
    "add_permission": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/rbac_enhanced.py",
    "add_pins_method": "/home/barberb/ipfs_kit_py/applied_patches/add_missing_method.py",
    "add_received_message": "/home/barberb/ipfs_kit_py/test/mcp/network_tests/test_mcp_distributed.py",
    "add_relationship": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipld_knowledge_graph.py",
    "add_root_endpoint": "/home/barberb/ipfs_kit_py/applied_patches/add_root_endpoint.py",
    "add_s3_credentials": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/credential_controller_anyio.py",
    "add_simulation_endpoints": "/home/barberb/ipfs_kit_py/scripts/setup/setup_storage_backends.py",
    "add_sse_endpoint": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/sse_cors_fix.py",
    "add_sse_starlette_requirement": "/home/barberb/ipfs_kit_py/fix_mcp_ipfs_extensions.py",
    "add_storacha_credentials": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/credential_controller.py",
    "add_string": "/home/barberb/ipfs_kit_py/enhanced_final_mcp_server.py",
    "add_test_content": "/home/barberb/ipfs_kit_py/examples/libp2p_example.py",
    "add_texts": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "add_transaction": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/fs_journal_controller_anyio.py",
    "add_warning_header": "/home/barberb/ipfs_kit_py/scripts/sync_roadmap.py",
    "add_webrtc_check_method": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_api_final.py",
    "ai_optimize_model": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api_fixed.py",
    "ai_register_model": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api_fixed.py",
    "all_metrics": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/metrics.py",
    "analyze_files": "/home/barberb/ipfs_kit_py/fix_mcp_resource_handler.py",
    "analyze_metrics": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/metrics_optimizer.py",
    "announce_server": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "anyio_client": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "api_health": "/home/barberb/ipfs_kit_py/enhanced_mcp_server_fixed.py",
    "api_initialize_endpoint": "/home/barberb/ipfs_kit_py/unified_mcp_server.py",
    "api_instance": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_libp2p_anyio.py",
    "api_sse": "/home/barberb/ipfs_kit_py/enhanced_mcp_server_fixed.py",
    "api_unexpected_error": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
    "app": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_controller_anyio.py",
    "app_client": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
    "apply_all_optimizations": "/home/barberb/ipfs_kit_py/examples/performance_optimizations.py",
    "apply_anyio_fixes": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_anyio_integration.py",
    "apply_anyio_fixes_to_controller": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_anyio_integration.py",
    "apply_command_handler_mocks": "/home/barberb/ipfs_kit_py/test/mcp/fix_mcp_command_handlers.py",
    "apply_direct_fixes": "/home/barberb/ipfs_kit_py/applied_patches/fix_direct_libp2p_model.py",
    "apply_enhanced_fixes": "/home/barberb/ipfs_kit_py/fixes/webrtc_anyio_monitor_integration.py",
    "apply_fix": "/home/barberb/ipfs_kit_py/backup_files/tiered_cache_fix.py",
    "apply_fixes": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_fix.py",
    "apply_hooks": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/hooks.py",
    "apply_ipfs_kit_integration": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/ipfs_kit_integration.py",
    "apply_libp2p_mocks": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
    "apply_mcp_server_fixes": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_server_refactoring.py",
    "apply_metrics_patches": "/home/barberb/ipfs_kit_py/scripts/implementation/implement_streaming_metrics.py",
    "apply_monkeypatch": "/home/barberb/ipfs_kit_py/applied_patches/add_pins_monkey_patch.py",
    "apply_protocol_extensions": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/__init__.py",
    "apply_protocol_extensions_to_instance": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/__init__.py",
    "apply_pyarrow_mock_patches": "/home/barberb/ipfs_kit_py/test/helpers/pyarrow_test_utils.py",
    "apply_pytest_patches": "/home/barberb/ipfs_kit_py/pytest_fix_complete.py",
    "apply_to_module": "/home/barberb/ipfs_kit_py/scripts/libp2p/enhanced_libp2p_mock.py",
    "ar_cache": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_fsspec_mocked.py",
    "as_query_engine": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "asyncSetUp": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_controller_cleanup.py",
    "async_content_generator": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
    "async_controller": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
    "async_fill_buffer": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_stream_buffer_optimization.py",
    "async_test": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_async_fix.py",
    "async_test_buffer_underflow": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_stream_buffer_optimization.py",
    "async_test_detect_by_content": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced.py",
    "async_test_failed_transaction": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced.py",
    "async_test_move_content_batch": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced.py",
    "async_wrapper": "/home/barberb/ipfs_kit_py/docs/filesystem_spec/fsspec/implementations/asyn_wrapper.py",
    "attrib": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/attr/_make.py",
    "auto_retry_on_daemon_failure": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "b58decode": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/kademlia/network.py",
    "backup_file": "/home/barberb/ipfs_kit_py/applied_patches/simple_fix_lassie.py",
    "backup_script": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/cleanup_mcp_scripts.py",
    "benchmark_caching": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark.py",
    "benchmark_fsspec_operations": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark.py",
    "benchmark_results": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
    "benchmark_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
    "block_get": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
    "block_stat": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
    "bootstrap_list": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
    "c_data_interface_example": "/home/barberb/ipfs_kit_py/ipfs_kit_py/arc_cache.py",
    "cache_info": "/home/barberb/ipfs_kit_py/docs/filesystem_spec/fsspec/caching.py",
    "cache_result": "/home/barberb/ipfs_kit_py/examples/performance_optimizations.py",
    "calculate_file_hash": "/home/barberb/ipfs_kit_py/test/unit/storage/test_storage_backends_to_disk.py",
    "call_mcp_method": "/home/barberb/ipfs_kit_py/verify_fs_tool_integration.py",
    "call_tool": "/home/barberb/ipfs_kit_py/test_mcp_tools.py",
    "callback": "/home/barberb/ipfs_kit_py/test/test_dht_operations.py",
    "cat": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_register.py",
    "cat_async": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
    "cat_mock_content": "/home/barberb/ipfs_kit_py/mcp_server_with_sse.py",
    "categorize_test": "/home/barberb/ipfs_kit_py/patches/mcp/migrate_mcp_tests.py",
    "categorize_test_file": "/home/barberb/ipfs_kit_py/test/organize_mcp_tests.py",
    "check_anyio_available": "/home/barberb/ipfs_kit_py/scripts/test/run_test_filecoin_model_anyio.py",
    "check_api_credentials": "/home/barberb/ipfs_kit_py/test/unit/api/test_filecoin_api.py",
    "check_backend_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/test_storage_backends_comprehensive.py",
    "check_cloud_provider": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_mcp_server_real.py",
    "check_connection": "/home/barberb/ipfs_kit_py/ipfs_kit_py/lotus_kit.py",
    "check_daemon_process": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_daemons.py",
    "check_daemon_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/simulated_api.py",
    "check_daemon_status_wrapper": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/mcp_compatibility.py",
    "check_database_health": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/monitoring_example.py",
    "check_dependencies": "/home/barberb/ipfs_kit_py/backup_patches/fix_webrtc_anyio.py",
    "check_dependency": "/home/barberb/ipfs_kit_py/scripts/install/install_storacha.py",
    "check_disk_space": "/home/barberb/ipfs_kit_py/test/integration/backup/test_backup_system.py",
    "check_endpoint": "/home/barberb/ipfs_kit_py/simple_verify_mcp.py",
    "check_existing_lotus": "/home/barberb/ipfs_kit_py/scripts/setup/setup_real_lotus.py",
    "check_extension_logs": "/home/barberb/ipfs_kit_py/diagnose_vscode_extension.py",
    "check_final_server": "/home/barberb/ipfs_kit_py/final_integration.py",
    "check_health": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_lock_handling.py",
    "check_huggingface_cli": "/home/barberb/ipfs_kit_py/scripts/setup/setup_huggingface.py",
    "check_import": "/home/barberb/ipfs_kit_py/tools/test_installation.py",
    "check_ipfs_api": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_simple.py",
    "check_ipfs_available": "/home/barberb/ipfs_kit_py/examples/high_level_api_ai_ml_example.py",
    "check_ipfs_cluster_api": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_simple.py",
    "check_ipfs_cluster_modules": "/home/barberb/ipfs_kit_py/applied_patches/fix_ipfs_cluster_status.py",
    "check_ipfs_daemon": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_mcp_server_real.py",
    "check_is_macos": "/home/barberb/ipfs_kit_py/examples/lotus_daemon_macos_example.py",
    "check_libp2p_dependencies": "/home/barberb/ipfs_kit_py/utils/check/check_libp2p_availability.py",
    "check_lotus_api": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_simple.py",
    "check_lotus_installation": "/home/barberb/ipfs_kit_py/scripts/setup/setup_filecoin_implementation.py",
    "check_mcp_server_health": "/home/barberb/ipfs_kit_py/fix_mcp_tool_registration.py",
    "check_method_added": "/home/barberb/ipfs_kit_py/applied_patches/fix_ipfs_model.py",
    "check_script_executable": "/home/barberb/ipfs_kit_py/scripts/setup/setup_mcp_real_implementations.py",
    "check_server_health": "/home/barberb/ipfs_kit_py/backup_patches/fix_storage_backends.py",
    "check_server_running": "/home/barberb/ipfs_kit_py/scripts/mcp/wrappers/mcp_server_wrapper.py",
    "check_unified_tools": "/home/barberb/ipfs_kit_py/final_integration.py",
    "check_vscode_extensions": "/home/barberb/ipfs_kit_py/diagnose_vscode_extension.py",
    "check_vscode_settings": "/home/barberb/ipfs_kit_py/check_vscode_integration.py",
    "check_webrtc_dependencies": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/webrtc.py",
    "check_websocket_support": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_peer_websocket_controller_anyio.py",
    "choose_boundary": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/urllib3/filepost.py",
    "clean_stale_servers": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "clean_stale_servers_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "cleanup": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/storacha_backend.py",
    "cleanup_test_environment": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_cluster_service.py",
    "clear_cache": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cache/parallel_query_execution.py",
    "cli_version": "/home/barberb/ipfs_kit_py/test/utils/mcp/simple_test_mcp_server.py",
    "client": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_libp2p_server_integration.py",
    "close": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
    "close_connection": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_streaming.py",
    "cluster_auth_setup": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_authentication.py",
    "cluster_nodes": "/home/barberb/ipfs_kit_py/test/unit/core/test_distributed_coordination.py",
    "cluster_pin_add": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "cluster_pin_ls": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "cluster_pin_rm": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "cluster_state_setup": "/home/barberb/ipfs_kit_py/test/unit/core/test_distributed_state_sync.py",
    "cluster_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "cmp_using": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/attr/_cmp.py",
    "collect": "/home/barberb/ipfs_kit_py/ipfs_kit_py/prometheus_exporter.py",
    "collect_stats": "/home/barberb/ipfs_kit_py/examples/mcp_webrtc_aiortc_client.py",
    "compare_benchmarks": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api/webrtc_benchmark_helpers_anyio.py",
    "compare_bloom_vs_set": "/home/barberb/ipfs_kit_py/examples/probabilistic_data_structures_example.py",
    "connect": "/home/barberb/ipfs_kit_py/examples/webrtc_streaming_example.py",
    "connect_to_libp2p_peer": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_peer_discovery.py",
    "connect_to_peer": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/high_level_api_integration.py",
    "connect_to_peers": "/home/barberb/ipfs_kit_py/examples/websocket_peer_discovery_example.py",
    "connect_to_websocket": "/home/barberb/ipfs_kit_py/examples/wal_websocket_example.py",
    "controller": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
    "controller_with_app": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
    "copy": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/resolvelib/structs.py",
    "copy_content_batch": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
    "copy_directory_structure": "/home/barberb/ipfs_kit_py/applied_patches/fix_imports.py",
    "copy_file": "/home/barberb/ipfs_kit_py/direct_mcp_server.py",
    "count_tools": "/home/barberb/ipfs_kit_py/update_and_restart_mcp_server.py",
    "create": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "create_active_lock_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_lock_handling.py",
    "create_advanced_ipfs_router": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_advanced_router.py",
    "create_app": "/home/barberb/ipfs_kit_py/ipfs_kit_py/run_mcp_server_real_storage.py",
    "create_app_wrapper": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/run_mcp_server_initializer.py",
    "create_auth_config": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/integrate_auth.py",
    "create_backend_proxy": "/home/barberb/ipfs_kit_py/backup_patches/fix_storage_backends.py",
    "create_backup": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_issues.py",
    "create_bucket": "/home/barberb/ipfs_kit_py/patches/storage/s3_storage.py",
    "create_cid_from_bytes": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_multiformats.py",
    "create_complete_mcp_config": "/home/barberb/ipfs_kit_py/complete_mcp_config.py",
    "create_config_file": "/home/barberb/ipfs_kit_py/examples/wal_enabled_api_example.py",
    "create_dag_node": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "create_default_server": "/home/barberb/ipfs_kit_py/mcp_compatibility.py",
    "create_dir": "/home/barberb/ipfs_kit_py/enhanced_final_mcp_server.py",
    "create_direct_loader": "/home/barberb/ipfs_kit_py/load_mcp_tools.py",
    "create_directories": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_integration.py",
    "create_dummy_cache": "/home/barberb/ipfs_kit_py/examples/async_cache_example.py",
    "create_dummy_mcp_components": "/home/barberb/ipfs_kit_py/enhanced_mcp_server_fixed.py",
    "create_enhanced_mcp_server": "/home/barberb/ipfs_kit_py/enhance_mcp_tool_coverage.py",
    "create_example_api": "/home/barberb/ipfs_kit_py/examples/wal_high_level_api_example.py",
    "create_example_configuration": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/rbac_example.py",
    "create_example_usage_script": "/home/barberb/ipfs_kit_py/mcp_integration_patch.py",
    "create_file_with_type": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
    "create_fixed_mcp_server": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_storage_backends.py",
    "create_fixed_method": "/home/barberb/ipfs_kit_py/patches/fix_ipfs_name_resolve_method.py",
    "create_fixed_server_script": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_api.py",
    "create_fs_ipfs_bridge": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/fs/fs_ipfs_bridge.py",
    "create_fs_journal_tools": "/home/barberb/ipfs_kit_py/fix_mcp_ipfs_integration.py",
    "create_index": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "create_init_files": "/home/barberb/ipfs_kit_py/bin/generate_grpc_code.py",
    "create_ipfs_basic_tools": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "create_ipfs_extensions": "/home/barberb/ipfs_kit_py/implement_mcp_ipfs_tools.py",
    "create_ipfs_fs_integration": "/home/barberb/ipfs_kit_py/fix_mcp_ipfs_integration.py",
    "create_ipfs_mcp_config": "/home/barberb/ipfs_kit_py/vscode_mcp_extension.py",
    "create_ipfs_router": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs/router.py",
    "create_libp2p_mocks": "/home/barberb/ipfs_kit_py/test/fix_all_tests.py",
    "create_mcp_configuration": "/home/barberb/ipfs_kit_py/update_cline_mcp_config.py",
    "create_mcp_loader": "/home/barberb/ipfs_kit_py/register_enhanced_tools.py",
    "create_metalink": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/aria2_controller.py",
    "create_metalink_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/aria2_controller_anyio.py",
    "create_minimal_script": "/home/barberb/ipfs_kit_py/direct_mcp_fix.py",
    "create_missing_modules": "/home/barberb/ipfs_kit_py/patch_missing_methods.py",
    "create_mock_module": "/home/barberb/ipfs_kit_py/ipfs_test_patch.py",
    "create_mock_router": "/home/barberb/ipfs_kit_py/applied_patches/fixed_mcp_server.py",
    "create_mock_schema": "/home/barberb/ipfs_kit_py/test/test_fixtures/arrow_cluster_test_fixtures.py",
    "create_offer": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_streaming.py",
    "create_patched_mcp_server": "/home/barberb/ipfs_kit_py/patch_direct_mcp.py",
    "create_protected_api_endpoint": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/integrate_auth.py",
    "create_repository": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_huggingface_controller_anyio.py",
    "create_restart_script": "/home/barberb/ipfs_kit_py/patch_direct_mcp.py",
    "create_result_dict": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
    "create_router": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/fs/fs_journal.py",
    "create_s3_bucket": "/home/barberb/ipfs_kit_py/scripts/setup/setup_s3_implementation.py",
    "create_sample_content": "/home/barberb/ipfs_kit_py/examples/routing_optimization_demo.py",
    "create_simulation_response": "/home/barberb/ipfs_kit_py/utils/check/check_and_fix_storage_backends.py",
    "create_stale_lock_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_lock_handling.py",
    "create_start_script": "/home/barberb/ipfs_kit_py/final_integration.py",
    "create_startup_script": "/home/barberb/ipfs_kit_py/scripts/api/implement_real_apis.py",
    "create_terminal_writer_mock": "/home/barberb/ipfs_kit_py/fixed_pytest_patch.py",
    "create_test_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_all_backends.py",
    "create_test_files": "/home/barberb/ipfs_kit_py/examples/fsspec_benchmark.py",
    "create_test_fix_script": "/home/barberb/ipfs_kit_py/backup_patches/fix_storage_backends.py",
    "create_test_init_files": "/home/barberb/ipfs_kit_py/patches/mcp/migrate_mcp_tests.py",
    "create_test_script": "/home/barberb/ipfs_kit_py/scripts/api/implement_real_apis.py",
    "create_test_task_data": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cluster_state.py",
    "create_token": "/home/barberb/ipfs_kit_py/ipfs_kit_py/streaming_security_integration.py",
    "create_tool_implementations": "/home/barberb/ipfs_kit_py/enhance_tool_coverage.py",
    "create_tool_registry": "/home/barberb/ipfs_kit_py/direct_tool_registry.py",
    "create_updated_startup_script": "/home/barberb/ipfs_kit_py/mcp_integration_patch.py",
    "create_verification_script": "/home/barberb/ipfs_kit_py/fix_ipfs_mcp_tools_integration.py",
    "custom_name": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
    "custom_parse_args": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_cli_integration.py",
    "daemon_start": "/home/barberb/ipfs_kit_py/ipfs_kit_py/lotus_kit.py",
    "daemon_stop": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "dag_get": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
    "dag_put": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
    "dag_resolve": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
    "dashboard_routing": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/routing_dashboard.py",
    "dask_examples": "/home/barberb/ipfs_kit_py/examples/data_science_examples.py",
    "dataset_workflow": "/home/barberb/ipfs_kit_py/examples/high_level_api_ai_ml_example.py",
    "deep_merge": "/home/barberb/ipfs_kit_py/ipfs_kit_py/arc_cache.py",
    "default": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "delayed_response": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_extended.py",
    "demo_huggingface_integration": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/framework_integration_example.py",
    "demo_langchain_integration": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/framework_integration_example.py",
    "demo_provide": "/home/barberb/ipfs_kit_py/examples/ipfs_dht_demo.py",
    "demonstrate_basic_job_submission": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/distributed_training_example.py",
    "demonstrate_basic_queries": "/home/barberb/ipfs_kit_py/examples/knowledge_graph_example.py",
    "demonstrate_basic_usage": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/model_registry_example.py",
    "demonstrate_cost_based_routing": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/examples/basic_routing.py",
    "demonstrate_dynamic_management": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/rbac_example.py",
    "demonstrate_key_management": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/encryption_example.py",
    "demonstrate_peer_discovery": "/home/barberb/ipfs_kit_py/examples/libp2p_peer_discovery_anyio_example.py",
    "demonstrate_vector_search": "/home/barberb/ipfs_kit_py/examples/knowledge_graph_example.py",
    "demonstrate_visualization": "/home/barberb/ipfs_kit_py/examples/wal_visualization_example.py",
    "deployment_status": "/home/barberb/ipfs_kit_py/applied_patches/direct_mcp_server.py",
    "dht_findpeer": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "dict_to_struct": "/home/barberb/ipfs_kit_py/bin/simple_grpc_client.py",
    "direct_model_example": "/home/barberb/ipfs_kit_py/examples/mcp_server_example.py",
    "directly_inject_methods": "/home/barberb/ipfs_kit_py/direct_model_fix.py",
    "disconnect_from_websocket_peer_discovery": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "disconnect_server": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_mcp_discovery_comprehensive.py",
    "discover": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_mcp_discovery_scenario.py",
    "discover_from_peer": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_dht_operations.py",
    "discover_peers": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/high_level_api_integration.py",
    "dispatch_task": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "dispatch_task_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "distributed_training_workflow": "/home/barberb/ipfs_kit_py/examples/high_level_api_ai_ml_example.py",
    "do_GET": "/home/barberb/ipfs_kit_py/scripts/setup/setup_local_filecoin.py",
    "do_OPTIONS": "/home/barberb/ipfs_kit_py/mcp_jsonrpc_standalone.py",
    "downgrade_to_leecher": "/home/barberb/ipfs_kit_py/test/unit/core/test_dynamic_role_switching.py",
    "download_and_verify": "/home/barberb/ipfs_kit_py/ipfs_kit_py/test_storage_backends_comprehensive.py",
    "download_binaries": "/home/barberb/ipfs_kit_py/ipfs_kit_py/__init__.py",
    "download_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
    "download_from_ipfs": "/home/barberb/ipfs_kit_py/test/unit/storage/test_storage_backends_full.py",
    "download_params": "/home/barberb/ipfs_kit_py/scripts/install/install_lotus.py",
    "echo_protocol_handler": "/home/barberb/ipfs_kit_py/examples/libp2p_protocol_integration_example.py",
    "edit_file": "/home/barberb/ipfs_kit_py/applied_patches/direct_mcp_server.py",
    "emit_event": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_streaming.py",
    "enable_storage_backend": "/home/barberb/ipfs_kit_py/ipfs_kit_py/storage_backends_api.py",
    "endpoint": "/home/barberb/ipfs_kit_py/simple_mcp_server.py",
    "enhance_existing_server": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "enhance_libp2p_peer": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/gossipsub_protocol.py",
    "enhance_mcp_server_initialize": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "enhance_with_recursive_routing": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/recursive_routing.py",
    "enhanced_find_providers": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/recursive_routing.py",
    "enhanced_initialize": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "ensure_binaries": "/home/barberb/ipfs_kit_py/test/unit/core/test_binary_functionality.py",
    "ensure_directory": "/home/barberb/ipfs_kit_py/applied_patches/fix_storage_backends.py",
    "ensure_directory_exists": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/migrate_mcp_tests.py",
    "ensure_enhanced_implementation": "/home/barberb/ipfs_kit_py/applied_patches/fix_storacha_integration.py",
    "ensure_ipfs_cluster_initialized": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_simple.py",
    "ensure_ipfs_model": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/ipfs_extensions.py",
    "ensure_logger": "/home/barberb/ipfs_kit_py/direct_fix_resource_handlers.py",
    "ensure_lotus_initialized": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_daemons.py",
    "ensure_module_available": "/home/barberb/ipfs_kit_py/enhance_ipfs_fs_integration.py",
    "ensure_webrtc_in_module": "/home/barberb/ipfs_kit_py/scripts/mcp/wrappers/mcp_wrapper.py",
    "enterprise_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/enterprise/integration.py",
    "escape_html": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pygments/formatters/html.py",
    "event_generator": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/sse_cors_fix.py",
    "event_stream": "/home/barberb/ipfs_kit_py/complete_mcp_server.py",
    "example_ai_ml_integration": "/home/barberb/ipfs_kit_py/examples/graphql_example.py",
    "example_content_type_detector": "/home/barberb/ipfs_kit_py/examples/mfs_enhanced_examples.py",
    "example_context_manager": "/home/barberb/ipfs_kit_py/examples/profile_example.py",
    "example_correlation_tracking": "/home/barberb/ipfs_kit_py/examples/profile_example.py",
    "example_distributed_training": "/home/barberb/ipfs_kit_py/examples/ai_ml_integration_example.py",
    "example_file_like_interface": "/home/barberb/ipfs_kit_py/examples/mfs_resumable_examples.py",
    "example_ipfs_dataloader": "/home/barberb/ipfs_kit_py/examples/ai_ml_integration_example.py",
    "example_ipns_operations": "/home/barberb/ipfs_kit_py/examples/graphql_example.py",
    "example_list_pinned_content": "/home/barberb/ipfs_kit_py/examples/graphql_example.py",
    "example_manage_resumable_operations": "/home/barberb/ipfs_kit_py/examples/mfs_resumable_examples.py",
    "example_metrics_analysis": "/home/barberb/ipfs_kit_py/examples/profile_example.py",
    "example_mfs_change_watcher": "/home/barberb/ipfs_kit_py/examples/mfs_enhanced_examples.py",
    "example_mfs_transaction": "/home/barberb/ipfs_kit_py/examples/mfs_enhanced_examples.py",
    "example_model_registry": "/home/barberb/ipfs_kit_py/examples/ai_ml_integration_example.py",
    "example_parallel_transfers": "/home/barberb/ipfs_kit_py/examples/mfs_resumable_examples.py",
    "example_pin_content": "/home/barberb/ipfs_kit_py/examples/graphql_example.py",
    "example_pytorch_integration": "/home/barberb/ipfs_kit_py/examples/ai_ml_integration_example.py",
    "example_resumable_write": "/home/barberb/ipfs_kit_py/examples/mfs_resumable_examples.py",
    "example_unpin_content": "/home/barberb/ipfs_kit_py/examples/graphql_example.py",
    "example_usage": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/integration.py",
    "exec_": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
    "execute_command": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/cli_controller_anyio.py",
    "execute_graphql": "/home/barberb/ipfs_kit_py/ipfs_kit_py/graphql_schema.py",
    "execute_training_task": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "exists": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
    "experimental_api": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api_stability.py",
    "export": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/fs_journal_controller_anyio.py",
    "export_to_ipfs": "/home/barberb/ipfs_kit_py/enhanced_final_mcp_server.py",
    "extend_high_level_api": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_telemetry_api_anyio.py",
    "extend_high_level_api_class": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/high_level_api_integration.py",
    "extend_ipfs_kit_class": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/ipfs_kit_integration.py",
    "extract_car": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "fetch_cid_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
    "file_exists": "/home/barberb/ipfs_kit_py/direct_mcp_server.py",
    "file_ns_handler": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
    "file_upload_test": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_fixes.py",
    "filecoin_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/enhanced_filecoin.py",
    "filecoin_to_ipfs": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_filecoin_integration.py",
    "files_ls_async": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
    "files_mkdir": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "files_read_async": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
    "files_rm_async": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
    "files_stat": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "files_write_async": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
    "filter_notification_types_by_role": "/home/barberb/ipfs_kit_py/ipfs_kit_py/streaming_security_integration.py",
    "final": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/typing_extensions.py",
    "find_ai_ml_resources": "/home/barberb/ipfs_kit_py/ipfs_kit_py/arrow_metadata_index.py",
    "find_ai_ml_resources_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/arrow_metadata_index_anyio.py",
    "find_all_storacha_files": "/home/barberb/ipfs_kit_py/applied_patches/fix_all_storacha.py",
    "find_all_test_files": "/home/barberb/ipfs_kit_py/fix_all_tests.py",
    "find_content": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/enhanced_dht_discovery.py",
    "find_direct_mcp_server": "/home/barberb/ipfs_kit_py/fix_jsonrpc_dispatcher.py",
    "find_get_tools_function": "/home/barberb/ipfs_kit_py/fix_jsonrpc_run_method.py",
    "find_ipfs_model_anyio_module": "/home/barberb/ipfs_kit_py/applied_patches/fix_ipfs_model.py",
    "find_ipfs_model_class": "/home/barberb/ipfs_kit_py/applied_patches/fix_ipfs_model.py",
    "find_lassie_binary": "/home/barberb/ipfs_kit_py/scripts/setup/setup_lassie.py",
    "find_mcp_package_files": "/home/barberb/ipfs_kit_py/fix_mcp_resource_handler.py",
    "find_mcp_resource_handlers": "/home/barberb/ipfs_kit_py/direct_fix_resource_handlers.py",
    "find_mcp_server_processes": "/home/barberb/ipfs_kit_py/scripts/mcp/server/restart_mcp_server.py",
    "find_mcp_settings": "/home/barberb/ipfs_kit_py/fix_vscode_mcp_connection.py",
    "find_method": "/home/barberb/ipfs_kit_py/patches/fix_ipfs_name_resolve_method.py",
    "find_providers": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/recursive_routing.py",
    "find_providers_advanced": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/__init__.py",
    "find_python_files": "/home/barberb/ipfs_kit_py/applied_patches/fix_code.py",
    "find_running_mcp_servers": "/home/barberb/ipfs_kit_py/applied_patches/improved_mcp_server.py",
    "find_similar_models": "/home/barberb/ipfs_kit_py/ipfs_kit_py/arrow_metadata_index.py",
    "find_test_modules": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
    "fix_all_files": "/home/barberb/ipfs_kit_py/fix_mcp_ipfs_integration.py",
    "fix_all_mcp_api_issues": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_api_final.py",
    "fix_api_path_prefix": "/home/barberb/ipfs_kit_py/applied_patches/fix_api_path_prefix.py",
    "fix_assertion_module": "/home/barberb/ipfs_kit_py/fix_all_tests.py",
    "fix_asyncio_sleep": "/home/barberb/ipfs_kit_py/fix_asyncio_sleep.py",
    "fix_bare_excepts": "/home/barberb/ipfs_kit_py/applied_patches/fix_errors.py",
    "fix_blue_green_proxy": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_server_refactoring.py",
    "fix_cline_mcp_settings": "/home/barberb/ipfs_kit_py/fix_cline_mcp_tools.py",
    "fix_controller_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_ipfs_controller_comprehensive.py",
    "fix_controllers_folder_structure": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_controllers.py",
    "fix_direct_mcp_server": "/home/barberb/ipfs_kit_py/fix_mcp_ipfs_integration.py",
    "fix_direct_resource_handlers": "/home/barberb/ipfs_kit_py/direct_fix_resource_handlers.py",
    "fix_directly_in_mcp_module": "/home/barberb/ipfs_kit_py/direct_fix_resource_handlers.py",
    "fix_fastapi_imports": "/home/barberb/ipfs_kit_py/patch_missing_methods.py",
    "fix_file": "/home/barberb/ipfs_kit_py/patches/fix_ipfs_name_resolve_method.py",
    "fix_get_tools_handler": "/home/barberb/ipfs_kit_py/fix_jsonrpc_handler.py",
    "fix_if_block_indentation": "/home/barberb/ipfs_kit_py/fix_if_block_indentation.py",
    "fix_import_in_final_mcp_server": "/home/barberb/ipfs_kit_py/fix_mcp_import.py",
    "fix_import_issue": "/home/barberb/ipfs_kit_py/direct_mcp_fix.py",
    "fix_import_paths": "/home/barberb/ipfs_kit_py/applied_patches/run_fixed_mcp_server.py",
    "fix_indentation": "/home/barberb/ipfs_kit_py/fix_indentation.py",
    "fix_init_files": "/home/barberb/ipfs_kit_py/patches/mcp/fix_init_files.py",
    "fix_integration_file": "/home/barberb/ipfs_kit_py/fix_tools_for_fastmcp.py",
    "fix_ipfs_cat_endpoint": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_api.py",
    "fix_ipfs_controller": "/home/barberb/ipfs_kit_py/backup_patches/fix_response_model.py",
    "fix_ipfs_controller_anyio": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_form_data.py",
    "fix_ipfs_daemon_startup": "/home/barberb/ipfs_kit_py/applied_patches/fix_ipfs_kit_errors.py",
    "fix_ipfs_kit_constructor": "/home/barberb/ipfs_kit_py/test/fix_all_tests.py",
    "fix_ipfs_model": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_fix.py",
    "fix_ipfs_model_extensions": "/home/barberb/ipfs_kit_py/fix_cline_mcp_tools.py",
    "fix_jsonrpc_url": "/home/barberb/ipfs_kit_py/fix_jsonrpc_url.py",
    "fix_kademlia_extensions": "/home/barberb/ipfs_kit_py/backup_patches/fix_kademlia_extensions.py",
    "fix_line_881": "/home/barberb/ipfs_kit_py/fix_line_881.py",
    "fix_logger_info": "/home/barberb/ipfs_kit_py/fix_logger_info.py",
    "fix_lotus_client": "/home/barberb/ipfs_kit_py/backup_patches/fix_lotus_client.py",
    "fix_mcp_schema": "/home/barberb/ipfs_kit_py/fix_mcp_schema.py",
    "fix_mcp_server": "/home/barberb/ipfs_kit_py/fix_registration_order.py",
    "fix_mcp_settings": "/home/barberb/ipfs_kit_py/fix_vscode_mcp_connection.py",
    "fix_missing_except": "/home/barberb/ipfs_kit_py/fix_missing_except.py",
    "fix_missing_parentheses": "/home/barberb/ipfs_kit_py/fix_missing_parentheses.py",
    "fix_parentheses": "/home/barberb/ipfs_kit_py/fix_list_comprehension.py",
    "fix_pytest_call": "/home/barberb/ipfs_kit_py/fix_pytest_call.py",
    "fix_register_all_controller_tools": "/home/barberb/ipfs_kit_py/fix_mcp_resource_handler.py",
    "fix_register_with_app": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_api.py",
    "fix_registry": "/home/barberb/ipfs_kit_py/fix_ipfs_registry_complete.py",
    "fix_root_endpoint": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_api_final.py",
    "fix_run_direct_mcp_server": "/home/barberb/ipfs_kit_py/fix_mcp_ipfs_integration.py",
    "fix_server_bridge": "/home/barberb/ipfs_kit_py/implement_mcp_ipfs_tools.py",
    "fix_server_constructor": "/home/barberb/ipfs_kit_py/fix_server_constructor.py",
    "fix_server_indentation": "/home/barberb/ipfs_kit_py/fix_server_indentation.py",
    "fix_server_registration": "/home/barberb/ipfs_kit_py/fix_server_registration.py",
    "fix_server_startup": "/home/barberb/ipfs_kit_py/enhance_mcp_tool_coverage.py",
    "fix_specific_method": "/home/barberb/ipfs_kit_py/backup_patches/fix_lotus_function.py",
    "fix_storage_manager_controller": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_controllers.py",
    "fix_subprocess_call": "/home/barberb/ipfs_kit_py/fix_subprocess_call.py",
    "fix_subprocess_popen": "/home/barberb/ipfs_kit_py/fix_subprocess_popen.py",
    "fix_syntax_error": "/home/barberb/ipfs_kit_py/applied_patches/fix_controller_syntax.py",
    "fix_syntax_errors": "/home/barberb/ipfs_kit_py/fix_all_syntax_errors.py",
    "fix_tools_registry": "/home/barberb/ipfs_kit_py/fix_tools_registry.py",
    "fix_trailing_commas": "/home/barberb/ipfs_kit_py/fix_syntax.py",
    "fix_undefined_imports": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_errors.py",
    "fix_unmatched_parenthesis": "/home/barberb/ipfs_kit_py/fix_unmatched_parenthesis.py",
    "fix_unused_imports": "/home/barberb/ipfs_kit_py/applied_patches/fix_ruff_issues.py",
    "fixture": "/home/barberb/ipfs_kit_py/test/mcp/fix_libp2p_mocks.py",
    "format_as_index": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/jsonschema/_utils.py",
    "format_size": "/home/barberb/ipfs_kit_py/test/performance/test_benchmark_framework.py",
    "from_int": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/urllib3/util/retry.py",
    "fs_journal_checkpoint": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
    "fs_journal_get_history": "/home/barberb/ipfs_kit_py/enhance_ipfs_fs_integration.py",
    "fs_journal_list_tracked": "/home/barberb/ipfs_kit_py/fs_journal_tools.py",
    "fs_journal_revert": "/home/barberb/ipfs_kit_py/enhance_ipfs_fs_integration.py",
    "fs_journal_track": "/home/barberb/ipfs_kit_py/fs_journal_tools.py",
    "fs_list_directory": "/home/barberb/ipfs_kit_py/minimal_mcp_server.py",
    "fs_read_file": "/home/barberb/ipfs_kit_py/vscode_compatible_mcp_server.py",
    "fs_write_file": "/home/barberb/ipfs_kit_py/minimal_mcp_server.py",
    "full_workflow_example": "/home/barberb/ipfs_kit_py/examples/data_science_examples.py",
    "generate_embedding": "/home/barberb/ipfs_kit_py/test/unit/core/test_integrated_search.py",
    "generate_journal_dashboard": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/fs_journal_controller_anyio.py",
    "generate_latest": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/metrics.py",
    "generate_random_content": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_file_add.py",
    "generate_sample_data": "/home/barberb/ipfs_kit_py/examples/wal_visualization_example.py",
    "generate_test_operations": "/home/barberb/ipfs_kit_py/examples/wal_telemetry_example.py",
    "generate_visualization": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_api_anyio.py",
    "get": "/home/barberb/ipfs_kit_py/test/unit/core/mock_ipfs_kit.py",
    "get_alert_config": "/home/barberb/ipfs_kit_py/ipfs_kit_py/observability_api.py",
    "get_all": "/home/barberb/ipfs_kit_py/scripts/daemon/daemon_manager.py",
    "get_all_tools": "/home/barberb/ipfs_kit_py/verify_tools.py",
    "get_annotations": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/typing_extensions.py",
    "get_api_extension": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_telemetry_api_anyio.py",
    "get_async": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
    "get_available_backends": "/home/barberb/ipfs_kit_py/fix_ipfs_model.py",
    "get_available_tools": "/home/barberb/ipfs_kit_py/test_mcp_tools.py",
    "get_available_workers": "/home/barberb/ipfs_kit_py/ipfs_kit_py/integrated_search.py",
    "get_backend": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/storage/storacha_model_anyio.py",
    "get_backend_health": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/metrics_router.py",
    "get_backend_module": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/migration.py",
    "get_benchmark_helper": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api.py",
    "get_block_json": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
    "get_cid": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_multiformats.py",
    "get_cluster_metrics": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit_extensions.py",
    "get_cluster_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "get_compatible_servers": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "get_compatible_servers_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "get_config": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
    "get_connections": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_anyio_integration.py",
    "get_content": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
    "get_content_as_tar": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
    "get_content_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_anyio.py",
    "get_content_json": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
    "get_controller": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
    "get_controller_files": "/home/barberb/ipfs_kit_py/register_all_controller_tools.py",
    "get_controllers": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_backends_api.py",
    "get_credentials_from_env": "/home/barberb/ipfs_kit_py/scripts/api/implement_real_apis.py",
    "get_daemon_status": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/connect_to_mcp.py",
    "get_dag": "/home/barberb/ipfs_kit_py/test/unit/core/mock_ipfs_kit.py",
    "get_dag_node": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
    "get_distribution": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
    "get_entity": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipld_knowledge_graph.py",
    "get_error_summary": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/utils/file_watcher.py",
    "get_file_stats": "/home/barberb/ipfs_kit_py/direct_mcp_server.py",
    "get_filecoin_client": "/home/barberb/ipfs_kit_py/applied_patches/advanced_filecoin_mcp.py",
    "get_filesystem": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "get_free_port": "/home/barberb/ipfs_kit_py/scripts/implementation/mcp_direct_fix.py",
    "get_fullname": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/distlib/metadata.py",
    "get_health": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/metrics_router.py",
    "get_huggingface_token": "/home/barberb/ipfs_kit_py/applied_patches/huggingface_real_init.py",
    "get_info": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
    "get_instance": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/service.py",
    "get_integrator": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/integrator.py",
    "get_ipfs_cluster_path": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_simple.py",
    "get_ipfs_controller": "/home/barberb/ipfs_kit_py/register_ipfs_tools_with_mcp.py",
    "get_ipfs_model_class": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_model_direct.py",
    "get_ipfs_path": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_simple.py",
    "get_ipfs_path_from_server": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_lock_handling.py",
    "get_ipfs_py_class": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_model_fix.py",
    "get_ipfs_simple_api_class": "/home/barberb/ipfs_kit_py/applied_patches/add_pins_monkey_patch.py",
    "get_ipfs_tools": "/home/barberb/ipfs_kit_py/fix_ipfs_tools_registry.py",
    "get_ipfs_version": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/connect_to_mcp.py",
    "get_journal_health_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/fs_journal_controller_anyio.py",
    "get_json": "/home/barberb/ipfs_kit_py/test/test_fixtures/ai_ml_test_fixtures.py",
    "get_known_servers": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "get_known_servers_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "get_lexer_by_name": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pygments/lexers/__init__.py",
    "get_lock": "/home/barberb/ipfs_kit_py/docs/filesystem_spec/fsspec/asyn.py",
    "get_lotus_path": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_simple.py",
    "get_mappings": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/fs/fs_ipfs_bridge.py",
    "get_metadata_index": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "get_model": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
    "get_model_registry": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "get_name": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api_fixed.py",
    "get_network_stats": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/advanced_filecoin_mcp.py",
    "get_node_id": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
    "get_openapi": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
    "get_openapi_schema": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_comparison.py",
    "get_operation_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_api_anyio.py",
    "get_operations": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_api.py",
    "get_optimization_stats": "/home/barberb/ipfs_kit_py/ipfs_kit_py/integrated_search.py",
    "get_origin": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/typing_extensions.py",
    "get_overloads": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/typing_extensions.py",
    "get_peer_id": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
    "get_peers": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
    "get_protocol_value": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_multiformats.py",
    "get_prototype": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/__init__.py",
    "get_realtime_telemetry": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_api_anyio.py",
    "get_report_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_api_anyio.py",
    "get_resource_stats": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/webrtc_controller.py",
    "get_routing_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/integrator.py",
    "get_search_service": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/search.py",
    "get_server_by_id": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "get_server_by_id_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "get_server_class": "/home/barberb/ipfs_kit_py/scripts/server/server_runner.py",
    "get_server_health": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/connect_to_mcp.py",
    "get_server_info": "/home/barberb/ipfs_kit_py/test_mcp_client.py",
    "get_stats": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
    "get_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/aria2_controller.py",
    "get_status_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/aria2_controller_anyio.py",
    "get_storage_backends": "/home/barberb/ipfs_kit_py/backup_patches/fix_storage_backends.py",
    "get_streaming_ops": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/streaming.py",
    "get_supported_platform": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
    "get_task_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "get_telemetry_config": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_api.py",
    "get_tools": "/home/barberb/ipfs_kit_py/direct_mcp_fix.py",
    "get_tracing_config": "/home/barberb/ipfs_kit_py/ipfs_kit_py/observability_api.py",
    "get_version": "/home/barberb/ipfs_kit_py/enhanced_final_mcp_server.py",
    "get_version_v2": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/controllers/ipfs_controller.py",
    "global_exception_handler": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/server_bridge.py",
    "graph_vector_search": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipld_knowledge_graph.py",
    "group_tools_by_category": "/home/barberb/ipfs_kit_py/verify_tools.py",
    "guess_content_type": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/urllib3/fields.py",
    "handle_add_request": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
    "handle_alert": "/home/barberb/ipfs_kit_py/examples/fs_journal_monitor_example.py",
    "handle_asyncio_cancel": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/webrtc_controller.py",
    "handle_benchmark_command": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_cli.py",
    "handle_cache_miss": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/p2p_integration.py",
    "handle_check_dependencies_command": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_cli.py",
    "handle_config": "/home/barberb/ipfs_kit_py/bin/routing_cli.py",
    "handle_create_wallet_request": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_controller_mock.py",
    "handle_create_wallet_request_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/filecoin_controller_anyio.py",
    "handle_dashboard": "/home/barberb/ipfs_kit_py/bin/routing_cli.py",
    "handle_deal_info_request_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/filecoin_controller_anyio.py",
    "handle_delete_request": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/s3_controller.py",
    "handle_download_request": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/s3_controller.py",
    "handle_filecoin_to_ipfs_request": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/filecoin_controller_anyio.py",
    "handle_filecoin_to_ipfs_request_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/filecoin_controller_anyio.py",
    "handle_fs_journal_checkpoint": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
    "handle_fs_journal_export": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
    "handle_fs_journal_list": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
    "handle_fs_journal_ls": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
    "handle_fs_journal_mkdir": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
    "handle_fs_journal_mount": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
    "handle_fs_journal_mv": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
    "handle_fs_journal_read": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
    "handle_fs_journal_recover": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
    "handle_fs_journal_rm": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
    "handle_fs_journal_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
    "handle_fs_journal_write": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
    "handle_get_command": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cli.py",
    "handle_huggingface_to_ipfs_request": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/controllers/storage/huggingface_controller.py",
    "handle_huggingface_to_ipfs_request_async": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/controllers/storage/huggingface_controller_anyio.py",
    "handle_insights": "/home/barberb/ipfs_kit_py/bin/routing_grpc.py",
    "handle_ipfs_to_lassie_request": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/lassie_controller_anyio.py",
    "handle_ipfs_to_s3_request_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/s3_controller_anyio.py",
    "handle_jsonrpc": "/home/barberb/ipfs_kit_py/direct_mcp_server.py",
    "handle_lassie_to_ipfs_request": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/lassie_controller_anyio.py",
    "handle_list_imports_request_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/filecoin_controller_anyio.py",
    "handle_list_known_peers": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_command_handlers.py",
    "handle_list_request_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/s3_controller_anyio.py",
    "handle_list_spaces_request": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/storacha_controller.py",
    "handle_list_wallets_request": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/controllers/storage/filecoin_controller.py",
    "handle_miner_info_request_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/filecoin_controller_anyio.py",
    "handle_multi_peer_signaling": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_multi_peer.py",
    "handle_partition_data_request": "/home/barberb/ipfs_kit_py/ipfs_kit_py/arrow_metadata_index.py",
    "handle_partition_request": "/home/barberb/ipfs_kit_py/ipfs_kit_py/arrow_metadata_index.py",
    "handle_repo_creation_request": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/controllers/storage/huggingface_controller.py",
    "handle_retrieve_content_request": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/lassie_controller_anyio.py",
    "handle_retrieve_data_request_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/filecoin_controller_anyio.py",
    "handle_s3_to_ipfs_request": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/s3_controller.py",
    "handle_s3_to_ipfs_request_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/s3_controller_anyio.py",
    "handle_server": "/home/barberb/ipfs_kit_py/bin/routing_grpc.py",
    "handle_signaling": "/home/barberb/ipfs_kit_py/examples/webrtc_streaming_example.py",
    "handle_space_creation_request": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/storacha_controller_anyio.py",
    "handle_status_request": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/s3_controller_anyio.py",
    "handle_status_request_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/filecoin_controller_anyio.py",
    "handle_storacha_to_ipfs_request": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/storacha_controller_anyio.py",
    "handle_storacha_to_ipfs_request_async": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/controllers/storage/storacha_controller_anyio.py",
    "handle_tool": "/home/barberb/ipfs_kit_py/add_comprehensive_ipfs_tools.py",
    "handle_validation_error": "/home/barberb/ipfs_kit_py/patches/mcp/mcp_error_handling.py",
    "handle_version_command": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cli.py",
    "handler": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/server_bridge.py",
    "hardware_detect": "/home/barberb/ipfs_kit_py/scripts/install/install_lassie.py",
    "has_direct_binary_access": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_cluster_daemons_comprehensive.py",
    "hash_file": "/home/barberb/ipfs_kit_py/examples/high_level_api_example.py",
    "health": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_mcp_server_real.py",
    "health_check": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/examples/mcp_server_auth_example.py",
    "health_endpoint": "/home/barberb/ipfs_kit_py/direct_mcp_fix.py",
    "homepage": "/home/barberb/ipfs_kit_py/simple_mcp_server.py",
    "hostname": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/urllib3/util/url.py",
    "huggingface_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/huggingface.py",
    "huggingface_to_ipfs": "/home/barberb/ipfs_kit_py/scripts/api/implement_real_apis.py",
    "hybrid_search": "/home/barberb/ipfs_kit_py/ipfs_kit_py/integrated_search.py",
    "image_processing_task_handler": "/home/barberb/ipfs_kit_py/examples/cluster_advanced_example.py",
    "implement_chunked_upload": "/home/barberb/ipfs_kit_py/examples/performance_optimizations.py",
    "import_module_from_file": "/home/barberb/ipfs_kit_py/register_enhanced_tools.py",
    "import_module_from_path": "/home/barberb/ipfs_kit_py/applied_patches/enhanced_mcp_server_with_ai_ml.py",
    "import_time_module": "/home/barberb/ipfs_kit_py/test_discovery/mcp_discovery_mock.py",
    "include_router": "/home/barberb/ipfs_kit_py/test/fix_all_tests.py",
    "info": "/home/barberb/ipfs_kit_py/direct_mcp_fix.py",
    "init_services": "/home/barberb/ipfs_kit_py/mcp_server_with_sse.py",
    "initialize": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/search/search.py",
    "initialize_api": "/home/barberb/ipfs_kit_py/examples/libp2p_peer_discovery_example.py",
    "initialize_auth_system": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/integration_advanced.py",
    "initialize_components": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/examples/mcp_server_auth_example.py",
    "initialize_content_registry": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/udm.py",
    "initialize_endpoint": "/home/barberb/ipfs_kit_py/simple_mcp_server.py",
    "initialize_ipfs_model": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_initializer.py",
    "initialize_kademlia": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/protocol_integration.py",
    "initialize_kademlia_config": "/home/barberb/ipfs_kit_py/backup_patches/fix_kademlia_extensions.py",
    "initialize_mcp_server": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/run_mcp_server_initializer.py",
    "initialize_routing_system": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/examples/basic_routing.py",
    "inject_libp2p_into_high_level_api": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api/libp2p_integration_anyio.py",
    "inspect_mcp": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/inspect_running_mcp.py",
    "install_dependencies": "/home/barberb/ipfs_kit_py/scripts/setup/setup_storacha.py",
    "install_dependencies_auto": "/home/barberb/ipfs_kit_py/scripts/install/install_libp2p.py",
    "install_lassie_daemon": "/home/barberb/ipfs_kit_py/scripts/install/install_lassie.py",
    "install_libp2p_dependencies": "/home/barberb/ipfs_kit_py/scripts/install/force_libp2p_installation.py",
    "install_lotus_binary": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_filecoin_controller_direct_enhanced.py",
    "install_lotus_daemon": "/home/barberb/ipfs_kit_py/scripts/install/install_lotus.py",
    "install_lotus_worker": "/home/barberb/ipfs_kit_py/scripts/install/install_lotus.py",
    "install_w3_cli": "/home/barberb/ipfs_kit_py/install_storacha.py",
    "integrate_enhanced_dht_discovery": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/gossipsub_protocol.py",
    "integrity_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/integrity.py",
    "ipfs_add": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "ipfs_add_bytes": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
    "ipfs_add_chunked": "/home/barberb/ipfs_kit_py/examples/performance_optimizations.py",
    "ipfs_add_directory": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
    "ipfs_add_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
    "ipfs_add_metadata": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
    "ipfs_add_path": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "ipfs_add_path2": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "ipfs_add_pin": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "ipfs_add_tool": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "ipfs_advanced": "/home/barberb/ipfs_kit_py/test/test_ipfs_advanced.py",
    "ipfs_api": "/home/barberb/ipfs_kit_py/test/test_mcp_server.py",
    "ipfs_basic_info": "/home/barberb/ipfs_kit_py/direct_mcp_fix.py",
    "ipfs_block_get": "/home/barberb/ipfs_kit_py/test/utils/mcp/simple_test_mcp_server.py",
    "ipfs_block_stat": "/home/barberb/ipfs_kit_py/test/utils/mcp/simple_test_mcp_server.py",
    "ipfs_cat": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
    "ipfs_cat_chunked": "/home/barberb/ipfs_kit_py/examples/performance_optimizations.py",
    "ipfs_cat_tool": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "ipfs_cluster_ctl_add_pin": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
    "ipfs_cluster_ctl_add_pin_recursive": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
    "ipfs_cluster_ctl_execute": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
    "ipfs_cluster_ctl_health": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
    "ipfs_cluster_ctl_peers_ls": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
    "ipfs_cluster_ctl_remove_pin": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
    "ipfs_cluster_ctl_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
    "ipfs_cluster_ctl_test_install": "/home/barberb/ipfs_kit_py/ipfs_kit_py/install_ipfs.py",
    "ipfs_cluster_follow_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_follow.py",
    "ipfs_cluster_follow_test_install": "/home/barberb/ipfs_kit_py/ipfs_kit_py/install_ipfs.py",
    "ipfs_cluster_get_pinset": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
    "ipfs_cluster_health": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "ipfs_cluster_peers_ls": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "ipfs_cluster_recover": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "ipfs_cluster_service_start": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_service.py",
    "ipfs_cluster_service_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_service.py",
    "ipfs_cluster_service_stop": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_service.py",
    "ipfs_cluster_service_test_install": "/home/barberb/ipfs_kit_py/ipfs_kit_py/install_ipfs.py",
    "ipfs_cluster_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "ipfs_dag_get": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/enhanced_ipfs.py",
    "ipfs_dht_find_peer": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_backend.py",
    "ipfs_dht_find_providers": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_backend.py",
    "ipfs_dht_findpeer": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/enhanced_ipfs.py",
    "ipfs_dht_findprovs": "/home/barberb/ipfs_kit_py/test/utils/mcp/simple_test_mcp_server.py",
    "ipfs_dht_get": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/enhanced_ipfs.py",
    "ipfs_dht_provide": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_backend.py",
    "ipfs_dht_query": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_backend.py",
    "ipfs_execute": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "ipfs_files_cp": "/home/barberb/ipfs_kit_py/ipfs_mcp_tools.py",
    "ipfs_files_ls": "/home/barberb/ipfs_kit_py/test/utils/mcp/simple_test_mcp_server.py",
    "ipfs_files_mkdir": "/home/barberb/ipfs_kit_py/ipfs_mcp_tools.py",
    "ipfs_files_mv": "/home/barberb/ipfs_kit_py/ipfs_mcp_tools.py",
    "ipfs_files_read": "/home/barberb/ipfs_kit_py/ipfs_mcp_tools.py",
    "ipfs_files_rm": "/home/barberb/ipfs_kit_py/ipfs_mcp_tools.py",
    "ipfs_files_stat": "/home/barberb/ipfs_kit_py/test/utils/mcp/simple_test_mcp_server.py",
    "ipfs_files_write": "/home/barberb/ipfs_kit_py/ipfs_mcp_tools.py",
    "ipfs_follow_info": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "ipfs_follow_init": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_follow.py",
    "ipfs_follow_start": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_follow.py",
    "ipfs_follow_sync": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "ipfs_fs": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_fsspec_mocked.py",
    "ipfs_fs_bridge_mount": "/home/barberb/ipfs_kit_py/enhance_ipfs_fs_integration.py",
    "ipfs_fs_bridge_status": "/home/barberb/ipfs_kit_py/fix_mcp_ipfs_integration.py",
    "ipfs_fs_bridge_sync": "/home/barberb/ipfs_kit_py/fix_mcp_ipfs_integration.py",
    "ipfs_fs_bridge_unmount": "/home/barberb/ipfs_kit_py/enhance_ipfs_fs_integration.py",
    "ipfs_get": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "ipfs_get_config": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "ipfs_get_config_value": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "ipfs_get_json": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
    "ipfs_get_pinset": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "ipfs_id": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "ipfs_id_tool": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "ipfs_key_gen": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
    "ipfs_key_list": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
    "ipfs_kit_instance": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_kit_mocked.py",
    "ipfs_kit_mocks": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_kit_mocked.py",
    "ipfs_kit_ready": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "ipfs_kit_start": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "ipfs_kit_stop": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "ipfs_list_pins_tool": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "ipfs_ls": "/home/barberb/ipfs_kit_py/ipfs_mcp_tools_integration.py",
    "ipfs_ls_path": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "ipfs_ls_pin": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "ipfs_metrics": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/metrics.py",
    "ipfs_mkdir": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "ipfs_monitoring_middleware": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
    "ipfs_name_publish": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
    "ipfs_name_resolve": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
    "ipfs_object_get": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/enhanced_ipfs.py",
    "ipfs_object_links": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/enhanced_ipfs.py",
    "ipfs_object_stat": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
    "ipfs_pin_add": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
    "ipfs_pin_list": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_mcp_server_real.py",
    "ipfs_pin_ls": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
    "ipfs_pin_rm": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
    "ipfs_pin_tool": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "ipfs_pins": "/home/barberb/ipfs_kit_py/test/utils/mcp/simple_test_mcp_server.py",
    "ipfs_py_instance": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
    "ipfs_remove_path": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "ipfs_remove_pin": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "ipfs_repo_gc": "/home/barberb/ipfs_kit_py/examples/cluster_monitoring_example.py",
    "ipfs_resize": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "ipfs_set_config": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "ipfs_set_config_value": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "ipfs_set_listen_addrs": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "ipfs_stat_path": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "ipfs_status": "/home/barberb/ipfs_kit_py/ipfs_mcp_tools.py",
    "ipfs_stream_generator": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller_anyio.py",
    "ipfs_swarm_connect": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "ipfs_swarm_disconnect": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "ipfs_swarm_peers": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "ipfs_test_install": "/home/barberb/ipfs_kit_py/ipfs_kit_py/install_ipfs.py",
    "ipfs_to_filecoin": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_filecoin_integration.py",
    "ipfs_to_huggingface": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_huggingface_controller_anyio.py",
    "ipfs_to_lassie": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
    "ipfs_to_lassie_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
    "ipfs_unpin_tool": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "ipfs_use_case": "/home/barberb/ipfs_kit_py/examples/probabilistic_data_structures_example.py",
    "ipfs_version": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_mcp_server_real.py",
    "ipfs_version_tool": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "ipget_download_object": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipget.py",
    "ipns_key_list_tool": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "ipns_publish_tool": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "ipns_resolve_tool": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "is_available": "/home/barberb/ipfs_kit_py/ipfs_kit_py/__init__.py",
    "is_controller_test": "/home/barberb/ipfs_kit_py/patches/mcp/migrate_tests.py",
    "is_daemon_health_monitor_running": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "is_initialized": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "is_mcp_patch": "/home/barberb/ipfs_kit_py/patches/organize_patches.py",
    "is_minio_installed": "/home/barberb/ipfs_kit_py/scripts/setup/setup_local_s3.py",
    "is_server_test": "/home/barberb/ipfs_kit_py/patches/mcp/migrate_tests.py",
    "is_valid_cid": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "is_valid_python": "/home/barberb/ipfs_kit_py/applied_patches/fix_code.py",
    "join_paths": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
    "jsonrpc": "/home/barberb/ipfs_kit_py/add_mcp_tools.py",
    "jsonrpc_endpoint": "/home/barberb/ipfs_kit_py/vscode_compatible_mcp_server.py",
    "key_gen": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
    "key_import": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
    "key_rename": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
    "kill_mcp_server_processes": "/home/barberb/ipfs_kit_py/scripts/mcp/server/restart_mcp_server.py",
    "langchain_workflow": "/home/barberb/ipfs_kit_py/examples/high_level_api_ai_ml_example.py",
    "lassie_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/lassie.py",
    "lassie_to_ipfs": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
    "lassie_to_ipfs_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
    "leecher_node": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
    "libp2p_model": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "libp2p_model_no_deps": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/tests/test_mcp_libp2p_model.py",
    "lifespan": "/home/barberb/ipfs_kit_py/ipfs_kit_py/direct_mcp_server.py",
    "list_benchmarks": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api/webrtc_benchmark_helpers_anyio.py",
    "list_buckets": "/home/barberb/ipfs_kit_py/scripts/api/s3_real_api.py",
    "list_credentials": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/credential_controller.py",
    "list_directory": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
    "list_files": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
    "list_fs_ipfs_mappings": "/home/barberb/ipfs_kit_py/add_comprehensive_ipfs_tools.py",
    "list_models": "/home/barberb/ipfs_kit_py/test/test_fixtures/ai_ml_test_fixtures.py",
    "list_objects_v2": "/home/barberb/ipfs_kit_py/patches/storage/s3_storage.py",
    "list_pins": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
    "list_storage_backends": "/home/barberb/ipfs_kit_py/ipfs_kit_py/storage_backends_api.py",
    "list_streams": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_api.py",
    "list_versions": "/home/barberb/ipfs_kit_py/enhance_ipfs_fs_integration.py",
    "load": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "load_car": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "load_collection": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "load_config": "/home/barberb/ipfs_kit_py/scripts/mcp/server/update_mcp_server.py",
    "load_credentials": "/home/barberb/ipfs_kit_py/scripts/api/implement_real_apis.py",
    "load_data": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "load_enhanced_tools": "/home/barberb/ipfs_kit_py/integrate_fs_with_tools.py",
    "load_ipfs_tools": "/home/barberb/ipfs_kit_py/load_ipfs_mcp_tools.py",
    "load_model": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "load_tools": "/home/barberb/ipfs_kit_py/patch_direct_mcp.py",
    "load_tools_into_server": "/home/barberb/ipfs_kit_py/load_mcp_tools.py",
    "log": "/home/barberb/ipfs_kit_py/debug_health_endpoint.py",
    "log_message": "/home/barberb/ipfs_kit_py/vscode_enhanced_jsonrpc_server.py",
    "login": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/router.py",
    "ls": "/home/barberb/ipfs_kit_py/docs/filesystem_spec/fsspec/implementations/dbfs.py",
    "ls_async": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
    "machine_learning_examples": "/home/barberb/ipfs_kit_py/examples/data_science_examples.py",
    "main": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/ipfs_extensions.py",
    "main_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_visualization_anyio.py",
    "make_directory": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
    "make_mock_request": "/home/barberb/ipfs_kit_py/run_mcp_server_tests.py",
    "make_request": "/home/barberb/ipfs_kit_py/test/unit/core/test_direct_endpoints.py",
    "map_backend_cid": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/udm.py",
    "map_ipfs_to_fs": "/home/barberb/ipfs_kit_py/add_comprehensive_ipfs_tools.py",
    "master_node": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
    "match": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/distlib/version.py",
    "match_hostname": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/distlib/compat.py",
    "mbfs_list_backends": "/home/barberb/ipfs_kit_py/multi_backend_fs_integration.py",
    "mbfs_register_backend": "/home/barberb/ipfs_kit_py/multi_backend_fs_integration.py",
    "mbfs_retrieve": "/home/barberb/ipfs_kit_py/multi_backend_fs_integration.py",
    "mcp_anyio_server": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "mcp_endpoint": "/home/barberb/ipfs_kit_py/direct_mcp_fix.py",
    "mcp_request": "/home/barberb/ipfs_kit_py/example_ipfs_fs_usage.py",
    "merge_setting": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/requests/sessions.py",
    "metadata_index_aggregate": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
    "metadata_index_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
    "method_with_doc": "/home/barberb/ipfs_kit_py/test/unit/api/test_api.py",
    "metrics_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/metrics.py",
    "mfs_list_tool": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "mfs_mv_tool": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "mfs_read_tool": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "mfs_rm_tool": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "mfs_stat_tool": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
    "migrate_by_list": "/home/barberb/ipfs_kit_py/ipfs_kit_py/migration_tools/s3_to_ipfs.py",
    "migrate_directory": "/home/barberb/ipfs_kit_py/ipfs_kit_py/migration_tools/s3_to_ipfs.py",
    "migrate_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/migration_tools/s3_to_ipfs.py",
    "migrate_ipfs_to_s3": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
    "migrate_ipfs_to_storacha": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
    "migrate_s3_to_ipfs": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
    "migrate_storacha_to_ipfs": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
    "migration_setup": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_s3_to_ipfs.py",
    "minimal_add_content": "/home/barberb/ipfs_kit_py/applied_patches/fix_ipfs_model.py",
    "mkdir": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/fs_journal_controller_anyio.py",
    "mock_add_content": "/home/barberb/ipfs_kit_py/unified_ipfs_tools.py",
    "mock_api_key_store": "/home/barberb/ipfs_kit_py/tests/test_api_key_management.py",
    "mock_audit_logger": "/home/barberb/ipfs_kit_py/tests/test_api_key_management.py",
    "mock_backend_health": "/home/barberb/ipfs_kit_py/examples/wal_visualization_example.py",
    "mock_cache_manager": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_mcp_integration.py",
    "mock_dependencies": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/tests/test_mcp_libp2p_model.py",
    "mock_discovery_model": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "mock_download": "/home/barberb/ipfs_kit_py/test/unit/core/test_first_run_initialization.py",
    "mock_filecoin_model": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_controller_anyio.py",
    "mock_files_mkdir": "/home/barberb/ipfs_kit_py/unified_ipfs_tools.py",
    "mock_get_all_operations": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_wal.py",
    "mock_http_client": "/home/barberb/ipfs_kit_py/tests/test_oauth_integration.py",
    "mock_ipfs_add_directory": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "mock_ipfs_api": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface_additional.py",
    "mock_ipfs_daemon_start": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "mock_ipfs_dht_findprovs": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "mock_ipfs_get": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "mock_ipfs_id": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "mock_ipfs_model": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
    "mock_ipfs_name_resolve": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "mock_ipfs_remove_pin": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "mock_ipfs_set_config_value": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "mock_ipfs_swarm_connect": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "mock_is_connected": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_error_scenarios.py",
    "mock_lotus_kit": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_filecoin_model.py",
    "mock_model": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_controller.py",
    "mock_module": "/home/barberb/ipfs_kit_py/test/fix_all_tests.py",
    "mock_oauth_persistence": "/home/barberb/ipfs_kit_py/tests/test_oauth_integration.py",
    "mock_pin_add": "/home/barberb/ipfs_kit_py/unified_ipfs_tools.py",
    "mock_replicate_to_cluster": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_replication_integration.py",
    "mock_replicate_to_cluster_async": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_replication_integration_anyio.py",
    "mock_replicate_to_ipfs": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_replication_integration.py",
    "mock_replicate_to_ipfs_async": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_replication_integration_anyio.py",
    "mock_responses": "/home/barberb/ipfs_kit_py/test/test_mcp_server.py",
    "mock_s3_model": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_s3_controller_anyio.py",
    "mock_storacha_model": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storacha_controller_anyio.py",
    "mock_version": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface_additional.py",
    "mock_webrtc_model": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_controller_anyio.py",
    "monitor_report": "/home/barberb/ipfs_kit_py/ipfs_kit_py/lotus_kit.py",
    "monitoring_cluster": "/home/barberb/ipfs_kit_py/test/unit/core/test_monitoring_and_management.py",
    "mount_ipfs_to_fs": "/home/barberb/ipfs_kit_py/add_comprehensive_ipfs_tools.py",
    "move_content_batch": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
    "move_file": "/home/barberb/ipfs_kit_py/direct_mcp_server.py",
    "mutate": "/home/barberb/ipfs_kit_py/ipfs_kit_py/graphql_schema.py",
    "name_publish": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
    "name_resolve": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
    "name_resolve_async": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
    "normalize_instance": "/home/barberb/ipfs_kit_py/patch_missing_methods.py",
    "notifications_websocket": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api_anyio.py",
    "object_new": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
    "object_patch_add_link": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
    "object_patch_rm_link": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
    "object_patch_set_data": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
    "object_put": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
    "on_peer_discovered": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api.py",
    "on_shutdown": "/home/barberb/ipfs_kit_py/examples/ipfs_advanced_integration.py",
    "open_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
    "optimize_cache_configuration": "/home/barberb/ipfs_kit_py/examples/performance_optimizations.py",
    "optimize_high_level_api": "/home/barberb/ipfs_kit_py/examples/performance_optimizations.py",
    "optimizer": "/home/barberb/ipfs_kit_py/tests/test_adaptive_optimizer.py",
    "organize_mcp_patches": "/home/barberb/ipfs_kit_py/patches/organize_mcp_patches.py",
    "organize_patches": "/home/barberb/ipfs_kit_py/patches/organize_patches.py",
    "original_get_filesystem": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/ipfs_kit_integration.py",
    "original_stop_webrtc_streaming": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_anyio_integration.py",
    "param": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/src/mcp/server/fastmcp.py",
    "parse_args": "/home/barberb/ipfs_kit_py/ipfs_kit_py/direct_mcp_server.py",
    "parse_arguments": "/home/barberb/ipfs_kit_py/scripts/server/manage_mcp_server.py",
    "parse_group": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
    "parse_requires_path": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/distlib/database.py",
    "patch_api_for_visualization": "/home/barberb/ipfs_kit_py/examples/wal_visualization_example.py",
    "patch_api_imports": "/home/barberb/ipfs_kit_py/patches/fix_import_paths.py",
    "patch_command_dispatcher": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_command_handlers.py",
    "patch_direct_mcp_server": "/home/barberb/ipfs_kit_py/register_all_controller_tools.py",
    "patch_fastapi_app": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/sse_cors_fix.py",
    "patch_file": "/home/barberb/ipfs_kit_py/applied_patches/direct_mcp_server.py",
    "patch_filecoin_model": "/home/barberb/ipfs_kit_py/patch_missing_methods.py",
    "patch_init_file": "/home/barberb/ipfs_kit_py/patches/fix_import_paths.py",
    "patch_initialization_tests": "/home/barberb/ipfs_kit_py/test/helpers/pyarrow_test_utils.py",
    "patch_ipfs_model": "/home/barberb/ipfs_kit_py/scripts/implementation/mcp_direct_fix.py",
    "patch_ipfs_py": "/home/barberb/ipfs_kit_py/patch_missing_methods.py",
    "patch_mcp_command_handlers": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
    "patch_mcp_discovery_model": "/home/barberb/ipfs_kit_py/patches/mcp/fix_libp2p_async_is_available.py",
    "patch_mcp_server": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/patch_mcp_server.py",
    "patch_mcp_server_runtime": "/home/barberb/ipfs_kit_py/fix_mcp_tool_registration.py",
    "patch_missing_controller_classes": "/home/barberb/ipfs_kit_py/test/fix_all_tests.py",
    "patch_module": "/home/barberb/ipfs_kit_py/ensure_mcp_loggers.py",
    "patch_register_tools": "/home/barberb/ipfs_kit_py/patch_direct_mcp_server.py",
    "patch_run_mcp_server": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/run_mcp_server_initializer.py",
    "patch_server": "/home/barberb/ipfs_kit_py/patch_direct_mcp_server.py",
    "patch_shutdown": "/home/barberb/ipfs_kit_py/patch_direct_mcp_server.py",
    "patch_stream_read_until": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/__init__.py",
    "patch_webrtc_controller_methods": "/home/barberb/ipfs_kit_py/fixes/webrtc_event_loop_fix.py",
    "patched_init": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/mcp_compatibility.py",
    "patched_start_daemon": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/mcp_compatibility.py",
    "pause_daemon_after_test": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_daemons.py",
    "pause_download": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/aria2_controller.py",
    "pause_download_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/aria2_controller_anyio.py",
    "perform_migration": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/migration.py",
    "perform_operation_with_retry": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "perform_wal_operations": "/home/barberb/ipfs_kit_py/examples/wal_cli_integration_example.py",
    "perform_with_retry": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "periodic_metrics_update": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/extensions/routing.py",
    "permission_manager": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_permissions_integration.py",
    "pin_add": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_register.py",
    "pin_add_async": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
    "pin_content": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
    "pin_content_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_anyio.py",
    "pin_ls": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "pin_ls_async": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
    "pin_mock_content": "/home/barberb/ipfs_kit_py/mcp_server_with_sse.py",
    "pin_multiple": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "pin_operations_test": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_fixes.py",
    "pin_rm": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_register.py",
    "pin_rm_async": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
    "ping": "/home/barberb/ipfs_kit_py/final_mcp_server.py",
    "pins": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api.py",
    "plot_entry_types": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_monitor.py",
    "plot_metrics": "/home/barberb/ipfs_kit_py/examples/fsspec_benchmark.py",
    "plot_operation_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_visualization.py",
    "poll_connection_stats": "/home/barberb/ipfs_kit_py/scripts/test/webrtc_monitor_integration.py",
    "prepare_distributed_task": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "print_api_stability_report": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api_stability.py",
    "print_header": "/home/barberb/ipfs_kit_py/examples/data_science_examples.py",
    "print_json": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/connect_to_mcp.py",
    "print_section": "/home/barberb/ipfs_kit_py/examples/cluster_state_example.py",
    "print_success": "/home/barberb/ipfs_kit_py/test_vscode_mcp_integration.py",
    "print_task_details": "/home/barberb/ipfs_kit_py/ipfs_kit_py/migration_tools/migration_cli.py",
    "print_tools_by_category": "/home/barberb/ipfs_kit_py/verify_tools.py",
    "process_file": "/home/barberb/ipfs_kit_py/applied_patches/process_files_individually.py",
    "process_message": "/home/barberb/ipfs_kit_py/mcp_server_with_sse.py",
    "profile_tiered_cache": "/home/barberb/ipfs_kit_py/examples/performance_profiling.py",
    "progress_callback": "/home/barberb/ipfs_kit_py/examples/mfs_resumable_examples.py",
    "publish_metadata_index": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "publish_name": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
    "publish_to_ipns": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
    "purge_downloads": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/aria2_controller.py",
    "purge_downloads_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/aria2_controller_anyio.py",
    "put_dag_node": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
    "pyarrow_examples": "/home/barberb/ipfs_kit_py/examples/data_science_examples.py",
    "pyarrow_mock_context": "/home/barberb/ipfs_kit_py/test/pyarrow_test_utils.py",
    "query": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "query_entities": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipld_knowledge_graph.py",
    "query_metadata_index": "/home/barberb/ipfs_kit_py/examples/ai_ml_metadata_example.py",
    "raise_if_fsspec": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_integrated_get_filesystem.py",
    "random_string": "/home/barberb/ipfs_kit_py/test/unit/core/test_all_controllers.py",
    "rbac_manager": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/tests/test_auth.py",
    "read_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller_mfs_methods.py",
    "read_file_slice": "/home/barberb/ipfs_kit_py/applied_patches/direct_mcp_server.py",
    "read_file_slice_endpoint": "/home/barberb/ipfs_kit_py/unified_mcp_server.py",
    "read_root": "/home/barberb/ipfs_kit_py/scripts/server/run_fixed_mcp_server.py",
    "read_text": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
    "record_routing_outcome": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing_integration.py",
    "record_test_result": "/home/barberb/ipfs_kit_py/test_final_mcp_server.py",
    "recover": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/fs_journal_controller_anyio.py",
    "recv": "/home/barberb/ipfs_kit_py/ipfs_kit_py/streaming_security_integration.py",
    "refresh_data": "/home/barberb/ipfs_kit_py/bin/bg_dashboard.py",
    "register_additional_tools": "/home/barberb/ipfs_kit_py/final_mcp_server.py",
    "register_advanced_ipfs_routes": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_integration.py",
    "register_all_ipfs_tools": "/home/barberb/ipfs_kit_py/unified_ipfs_tools.py",
    "register_all_tools": "/home/barberb/ipfs_kit_py/final_mcp_server.py",
    "register_controller": "/home/barberb/ipfs_kit_py/mcp_server_fixed_all.py",
    "register_default_tools": "/home/barberb/ipfs_kit_py/simple_mcp_server.py",
    "register_fs_handlers_with_tools": "/home/barberb/ipfs_kit_py/integrate_fs_with_tools.py",
    "register_fs_journal_commands": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
    "register_integration_tools": "/home/barberb/ipfs_kit_py/enhance_ipfs_fs_integration.py",
    "register_ipfs_fs_tools": "/home/barberb/ipfs_kit_py/final_mcp_server.py",
    "register_ipfs_tools": "/home/barberb/ipfs_kit_py/final_mcp_server.py",
    "register_mcp_tools": "/home/barberb/ipfs_kit_py/load_mcp_tools.py",
    "register_multi_backend_tools": "/home/barberb/ipfs_kit_py/register_multi_backend_tools.py",
    "register_peer_websocket": "/home/barberb/ipfs_kit_py/ipfs_kit_py/peer_websocket.py",
    "register_resource": "/home/barberb/ipfs_kit_py/enhanced_final_mcp_server.py",
    "register_routes": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
    "register_server": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "register_server_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "register_task_handler": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit_extensions.py",
    "register_tool": "/home/barberb/ipfs_kit_py/simple_mcp_server.py",
    "register_tools": "/home/barberb/ipfs_kit_py/run_direct_mcp_server.py",
    "register_tools_with_direct_mcp": "/home/barberb/ipfs_kit_py/register_multi_backend_tools.py",
    "register_tools_with_mcp": "/home/barberb/ipfs_kit_py/register_enhanced_tools.py",
    "register_wal_commands": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_cli_integration.py",
    "register_with_app": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs/router.py",
    "register_with_mcp": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs/router.py",
    "remove": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/fs_journal_controller_anyio.py",
    "remove_credential": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_credential_controller_anyio.py",
    "remove_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller_mfs_methods.py",
    "remove_server": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "remove_server_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "remove_symlinks": "/home/barberb/ipfs_kit_py/applied_patches/fix_imports.py",
    "replicate_webrtc_metadata": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication_anyio.py",
    "report_error": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/utils/file_watcher.py",
    "request": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive.py",
    "requires_permission": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/server_integration.py",
    "reset": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/controllers/ipfs_controller.py",
    "reset_metrics": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/monitoring/performance_monitor.py",
    "reset_stats": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server_anyio.py",
    "resolve_ai_datasets": "/home/barberb/ipfs_kit_py/ipfs_kit_py/graphql_schema.py",
    "resolve_cluster_peers": "/home/barberb/ipfs_kit_py/ipfs_kit_py/graphql_schema.py",
    "resolve_cluster_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/graphql_schema.py",
    "resolve_content": "/home/barberb/ipfs_kit_py/ipfs_kit_py/graphql_schema.py",
    "resolve_ipns": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
    "resolve_keys": "/home/barberb/ipfs_kit_py/ipfs_kit_py/graphql_schema.py",
    "resolve_name": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
    "resolve_pins": "/home/barberb/ipfs_kit_py/ipfs_kit_py/graphql_schema.py",
    "resolve_resolve_ipns": "/home/barberb/ipfs_kit_py/ipfs_kit_py/graphql_schema.py",
    "resource_metrics_provider": "/home/barberb/ipfs_kit_py/examples/cluster_management_example.py",
    "restart_mcp_server": "/home/barberb/ipfs_kit_py/scripts/setup/setup_filecoin_gateway.py",
    "restart_servers": "/home/barberb/ipfs_kit_py/fix_vscode_mcp_integration.py",
    "restart_vscode": "/home/barberb/ipfs_kit_py/fix_vscode_mcp_integration.py",
    "resumable_ops": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced_resumable.py",
    "resumable_ops_no_permissions": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_permissions_integration.py",
    "retrieve_from_backend": "/home/barberb/ipfs_kit_py/ipfs_kit_py/test_storage_backends_comprehensive.py",
    "rollback": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
    "root": "/home/barberb/ipfs_kit_py/ipfs_kit_py/direct_mcp_server.py",
    "router": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_s3_controller_anyio.py",
    "routing_manager": "/home/barberb/ipfs_kit_py/test/test_routing_system_integration.py",
    "run": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_cli.py",
    "run_access_pattern_benchmark": "/home/barberb/ipfs_kit_py/examples/fsspec_benchmark.py",
    "run_all_benchmarks": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark.py",
    "run_all_tests": "/home/barberb/ipfs_kit_py/examples/performance_profiling.py",
    "run_api_test": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server.py",
    "run_backend_diagnostic": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_backends_api.py",
    "run_basic_benchmark": "/home/barberb/ipfs_kit_py/examples/benchmark_example.py",
    "run_basic_operations": "/home/barberb/ipfs_kit_py/examples/persistent_datastore_example.py",
    "run_benchmark": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api/webrtc_benchmark_helpers_anyio.py",
    "run_benchmark_test_version": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark_framework.py",
    "run_benchmarks": "/home/barberb/ipfs_kit_py/examples/wal_performance_benchmark.py",
    "run_bidirectional_example": "/home/barberb/ipfs_kit_py/examples/peer_websocket_anyio_example.py",
    "run_client": "/home/barberb/ipfs_kit_py/examples/notification_client_example.py",
    "run_cluster_command": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
    "run_cluster_follow_command": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_follow.py",
    "run_cluster_service_command": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_service.py",
    "run_command": "/home/barberb/ipfs_kit_py/ipfs_kit_py/lotus_daemon.py",
    "run_comprehensive_benchmark": "/home/barberb/ipfs_kit_py/examples/benchmark_framework_example.py",
    "run_coroutine_safely": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_server_combined.py",
    "run_demo": "/home/barberb/ipfs_kit_py/examples/ipfs_advanced_integration.py",
    "run_dht_example": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/advanced_ipfs_operations.py",
    "run_example_server": "/home/barberb/ipfs_kit_py/examples/mcp_server_example.py",
    "run_implementation_scripts": "/home/barberb/ipfs_kit_py/scripts/setup/setup_mcp_real_implementations.py",
    "run_ipc_server": "/home/barberb/ipfs_kit_py/examples/arrow_ipc_routing_example.py",
    "run_ipfs_command": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/enhanced_ipfs.py",
    "run_ipfs_integration_test": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_integration.py",
    "run_ipget_command": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipget.py",
    "run_ipns_example": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/advanced_ipfs_operations.py",
    "run_libp2p_verification": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p.py",
    "run_lotus_daemon_tests": "/home/barberb/ipfs_kit_py/scripts/test/final_lotus_verification.py",
    "run_master_node": "/home/barberb/ipfs_kit_py/examples/cluster_management_example.py",
    "run_mcp_emulator_demo": "/home/barberb/ipfs_kit_py/examples/mcp_emulator.py",
    "run_mcp_server": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server.py",
    "run_migration_test": "/home/barberb/ipfs_kit_py/test/unit/migration/test_migration_functionality.py",
    "run_mini_test": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server.py",
    "run_parallel_benchmark": "/home/barberb/ipfs_kit_py/examples/benchmark_example.py",
    "run_performance_benchmark": "/home/barberb/ipfs_kit_py/examples/persistent_datastore_example.py",
    "run_server": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
    "run_server_tests": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_all_webrtc_fixes.py",
    "run_test": "/home/barberb/ipfs_kit_py/ipfs_kit_py/test_storage_backends_comprehensive.py",
    "run_tests": "/home/barberb/ipfs_kit_py/ipfs_kit_py/scripts/test_ai_ml_integration.py",
    "run_tool": "/home/barberb/ipfs_kit_py/simple_mcp_server.py",
    "run_verification": "/home/barberb/ipfs_kit_py/verify_enhanced_mcp.py",
    "run_websocket_server": "/home/barberb/ipfs_kit_py/examples/websocket_peer_discovery_example.py",
    "run_worker_node": "/home/barberb/ipfs_kit_py/examples/cluster_management_example.py",
    "runtime_checkable": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/typing_extensions.py",
    "s3_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/s3.py",
    "safe_import": "/home/barberb/ipfs_kit_py/patch_missing_methods.py",
    "save_config": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
    "save_model": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "save_state": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced_resumable.py",
    "save_to_disk": "/home/barberb/ipfs_kit_py/test/unit/storage/test_storage_backends_to_disk.py",
    "save_to_ipfs": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "search_content": "/home/barberb/ipfs_kit_py/examples/high_level_api_example.py",
    "search_models": "/home/barberb/ipfs_kit_py/ipfs_kit_py/integrated_search.py",
    "secure_handle_notification_websocket": "/home/barberb/ipfs_kit_py/ipfs_kit_py/streaming_security_integration.py",
    "secure_handle_webrtc_signaling": "/home/barberb/ipfs_kit_py/ipfs_kit_py/streaming_security_integration.py",
    "select_backend": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_router.py",
    "send_event": "/home/barberb/ipfs_kit_py/mcp_server_with_sse.py",
    "sep": "/home/barberb/ipfs_kit_py/pytest_direct_fix.py",
    "server_config": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_fixes.py",
    "server_info": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/examples/mcp_server_auth_example.py",
    "setUp": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_algorithms.py",
    "setUpClass": "/home/barberb/ipfs_kit_py/tests/integration/backends/test_ipfs_backend.py",
    "set_pins_count": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_prometheus.py",
    "setup": "/home/barberb/ipfs_kit_py/applied_patches/fix_errors.py",
    "setup_advanced_routing": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/__init__.py",
    "setup_and_cleanup": "/home/barberb/ipfs_kit_py/test/functional/streaming/test_streaming_anyio.py",
    "setup_api": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/advanced_ipfs_operations.py",
    "setup_api_client": "/home/barberb/ipfs_kit_py/scripts/test/webrtc_monitor_integration.py",
    "setup_api_server": "/home/barberb/ipfs_kit_py/examples/wal_api_example.py",
    "setup_aws_configuration": "/home/barberb/ipfs_kit_py/scripts/setup/setup_s3_implementation.py",
    "setup_class": "/home/barberb/ipfs_kit_py/test/unit/core/test_monitoring_and_management.py",
    "setup_configuration": "/home/barberb/ipfs_kit_py/scripts/api/implement_real_apis.py",
    "setup_directories": "/home/barberb/ipfs_kit_py/scripts/test/comprehensive_test_with_backup.py",
    "setup_environment": "/home/barberb/ipfs_kit_py/applied_patches/improved_mcp_server.py",
    "setup_example_data": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/framework_integration_example.py",
    "setup_extensions": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_mcp_server_real.py",
    "setup_gateway": "/home/barberb/ipfs_kit_py/scripts/setup/setup_filecoin_gateway.py",
    "setup_ipfs_with_libp2p": "/home/barberb/ipfs_kit_py/examples/libp2p_example.py",
    "setup_knowledge_graph": "/home/barberb/ipfs_kit_py/examples/knowledge_graph_example.py",
    "setup_lassie_mock_server": "/home/barberb/ipfs_kit_py/scripts/setup/setup_lassie_implementation.py",
    "setup_logging": "/home/barberb/ipfs_kit_py/examples/tiered_cache_example.py",
    "setup_lotus_gateway": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_integration.py",
    "setup_method": "/home/barberb/ipfs_kit_py/test/performance/test_streaming_performance_anyio.py",
    "setup_mock_environment": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_server.py",
    "setup_mock_modules": "/home/barberb/ipfs_kit_py/run_simple_tests.py",
    "setup_mocks": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
    "setup_multi_backend_integration": "/home/barberb/ipfs_kit_py/integrate_fs_with_tools.py",
    "setup_python_paths": "/home/barberb/ipfs_kit_py/final_integration.py",
    "setup_signal_handlers": "/home/barberb/ipfs_kit_py/applied_patches/run_mcp_blue_green_server.py",
    "setup_storacha_mock_server": "/home/barberb/ipfs_kit_py/scripts/setup/setup_storacha_implementation.py",
    "setup_test_app": "/home/barberb/ipfs_kit_py/test/unit/api/test_distributed_controller_fastapi.py",
    "setup_test_environment": "/home/barberb/ipfs_kit_py/examples/metadata_replication_example.py",
    "setup_webrtc_server": "/home/barberb/ipfs_kit_py/examples/webrtc_benchmark_example.py",
    "shutdown": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
    "shutdown_event": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/direct_mcp_server.py",
    "shutdown_sync": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/peer_websocket_controller.py",
    "signal_handler": "/home/barberb/ipfs_kit_py/scripts/server/run_server.py",
    "simulate_api_traffic": "/home/barberb/ipfs_kit_py/test/test_metrics_extension.py",
    "simulate_backend_outage": "/home/barberb/ipfs_kit_py/examples/wal_high_level_api_example.py",
    "simulate_cat": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_normalized_ipfs.py",
    "simulate_health_change": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/monitoring_example.py",
    "simulate_initialize_request": "/home/barberb/ipfs_kit_py/debug_vscode_connection.py",
    "source_credentials": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_mcp_server_real.py",
    "sse": "/home/barberb/ipfs_kit_py/ipfs_kit_py/run_mcp_server_real_storage.py",
    "sse_app": "/home/barberb/ipfs_kit_py/direct_mcp_fix.py",
    "sse_endpoint": "/home/barberb/ipfs_kit_py/mcp_server_with_sse.py",
    "sse_handler": "/home/barberb/ipfs_kit_py/mcp_server_fixed_all.py",
    "sse_test": "/home/barberb/ipfs_kit_py/enhanced_mcp_server_fixed.py",
    "stable_api": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api_stability.py",
    "stable_method": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api_stability.py",
    "standard_client": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "start": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
    "start_blue_green_deployment": "/home/barberb/ipfs_kit_py/applied_patches/direct_mcp_server.py",
    "start_daemon_health_monitor": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "start_daemons": "/home/barberb/ipfs_kit_py/patch_missing_methods.py",
    "start_debug_server": "/home/barberb/ipfs_kit_py/debug/mcp/run_tests_with_debug.py",
    "start_enhanced_mcp_server": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_server.py",
    "start_ipfs_cluster_service": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_simple.py",
    "start_ipfs_daemon": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_mcp_server_real.py",
    "start_lotus_daemon": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_daemons.py",
    "start_mcp_server": "/home/barberb/ipfs_kit_py/scripts/mcp/server/restart_mcp_server.py",
    "start_server": "/home/barberb/ipfs_kit_py/scripts/mcp/server/update_mcp_server.py",
    "start_worker": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "startup_event": "/home/barberb/ipfs_kit_py/complete_mcp_server.py",
    "stat_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller_mfs_methods.py",
    "status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_mcp_server_real.py",
    "stdio_server": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/src/mcp/server/stdio.py",
    "stop": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/alerting.py",
    "stop_collection": "/home/barberb/ipfs_kit_py/patches/mcp/mcp_monitoring.py",
    "stop_daemon_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/aria2_controller_anyio.py",
    "stop_daemon_health_monitor": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/mcp_compatibility.py",
    "stop_daemons": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "stop_existing_servers": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_server.py",
    "stop_mcp_server": "/home/barberb/ipfs_kit_py/verify_and_restart_mcp.py",
    "stop_running_servers": "/home/barberb/ipfs_kit_py/applied_patches/improved_mcp_server.py",
    "stop_server": "/home/barberb/ipfs_kit_py/scripts/mcp/wrappers/mcp_server_wrapper.py",
    "stop_streaming": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_anyio_integration.py",
    "stop_websocket_peer_discovery_server": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "storacha_http_request": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_storacha_kit.py",
    "storacha_status": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/enhanced_storacha.py",
    "storage_health": "/home/barberb/ipfs_kit_py/applied_patches/fixed_mcp_server.py",
    "storage_status": "/home/barberb/ipfs_kit_py/direct_mcp_server.py",
    "storage_transfer": "/home/barberb/ipfs_kit_py/direct_model_fix.py",
    "store": "/home/barberb/ipfs_kit_py/examples/routing_optimization_demo.py",
    "store_add": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_storacha_kit.py",
    "store_content": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/udm.py",
    "store_with_lotus": "/home/barberb/ipfs_kit_py/test/unit/core/mock_ipfs_kit.py",
    "stream_cat": "/home/barberb/ipfs_kit_py/patches/mcp/mcp_streaming.py",
    "stream_content": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_resource_management.py",
    "stream_dag_export": "/home/barberb/ipfs_kit_py/patches/mcp/mcp_streaming.py",
    "stream_media": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api_updated.py",
    "stream_to_ipfs": "/home/barberb/ipfs_kit_py/backup_files/streaming_metrics_patch.py",
    "subscribe": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
    "success": "/home/barberb/ipfs_kit_py/test/test_ipfs_advanced.py",
    "supports_color": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_telemetry_cli.py",
    "suppress_logging": "/home/barberb/ipfs_kit_py/test/helpers/patch_cluster_state.py",
    "suppress_logs_during_test": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
    "swarm_connect": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
    "swarm_peers": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
    "sync_fs_to_ipfs": "/home/barberb/ipfs_kit_py/add_comprehensive_ipfs_tools.py",
    "sync_ipfs_to_fs": "/home/barberb/ipfs_kit_py/add_comprehensive_ipfs_tools.py",
    "sync_to_mfs": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
    "system_info": "/home/barberb/ipfs_kit_py/vscode_compatible_mcp_server.py",
    "tearDown": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_telemetry_api_integration_anyio.py",
    "tearDownClass": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_tiered_cache.py",
    "temp_config_dir": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/client/test_config.py",
    "temp_dir": "/home/barberb/ipfs_kit_py/test/test_mcp_server.py",
    "temp_identity_path": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/tests/test_libp2p_mcp_integration.py",
    "temp_test_dir": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface_additional.py",
    "test": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "test_001_service_wrapper_import": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_cluster_daemons_comprehensive.py",
    "test_002_follow_wrapper_import": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_cluster_daemons_comprehensive.py",
    "test_003_run_service_wrapper_fake_daemon": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_cluster_daemons_comprehensive.py",
    "test_004_run_follow_wrapper_fake_daemon": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_cluster_daemons_comprehensive.py",
    "test_005_service_module_test_method": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_cluster_daemons_comprehensive.py",
    "test_006_service_basic_init": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_cluster_daemons_comprehensive.py",
    "test_007_check_daemon_status": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_cluster_daemons_comprehensive.py",
    "test_01_credential_management": "/home/barberb/ipfs_kit_py/test/unit/api/test_filecoin_api.py",
    "test_01_dependencies": "/home/barberb/ipfs_kit_py/test/utils/mcp/verify_mcp_libp2p_integration.py",
    "test_01_no_lock_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_lock_file_handling_direct.py",
    "test_01_server_health": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_features.py",
    "test_01_stale_lock_file": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_lock_handling.py",
    "test_02_health_check": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_unified.py",
    "test_03_operations_log": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_features.py",
    "test_03_stale_lock_file_no_removal": "/home/barberb/ipfs_kit_py/test/unit/core/test_lock_file_handling_direct.py",
    "test_04_ipfs_add_content": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_unified.py",
    "test_04_mcp_model": "/home/barberb/ipfs_kit_py/test/utils/mcp/verify_mcp_libp2p_integration.py",
    "test_05_ipfs_add_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_unified.py",
    "test_05_mcp_controller": "/home/barberb/ipfs_kit_py/test/utils/mcp/verify_mcp_libp2p_integration.py",
    "test_06_ipfs_cat_content": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_unified.py",
    "test_06_mcp_server": "/home/barberb/ipfs_kit_py/test/utils/mcp/verify_mcp_libp2p_integration.py",
    "test_06_stop_daemon": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_features.py",
    "test_07_ipfs_pin_operations": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_unified.py",
    "test_07_mcp_anyio_integration": "/home/barberb/ipfs_kit_py/test/utils/mcp/verify_mcp_libp2p_integration.py",
    "test_08_ipfs_controller_endpoints": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_features.py",
    "test_09_cli_controller_endpoints": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_features.py",
    "test_09_daemon_management": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_unified.py",
    "test_11_daemon_auto_restart": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_features.py",
    "test_11_operation_logging": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_unified.py",
    "test_13_mock_mode": "/home/barberb/ipfs_kit_py/test/unit/api/test_filecoin_api.py",
    "test_15_filecoin_to_ipfs_integration": "/home/barberb/ipfs_kit_py/test/unit/api/test_filecoin_api.py",
    "test_active_lock_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_daemon_lock_handling.py",
    "test_adapter_with_ipfs_kit": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_method_normalization.py",
    "test_add": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
    "test_add_car_to_ipfs": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_integration_with_kit.py",
    "test_add_content": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_method_normalization.py",
    "test_add_content_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
    "test_add_content_bytes_response": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_fixes_all.py",
    "test_add_content_handles_bytes_response": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive_fixes.py",
    "test_add_content_simulation": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_model_parquet_cache.py",
    "test_add_file_path": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
    "test_add_generic_credential_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_credential_controller_anyio.py",
    "test_add_ipfs_credentials": "/home/barberb/ipfs_kit_py/test/unit/core/test_credential_controller.py",
    "test_add_record_to_index": "/home/barberb/ipfs_kit_py/test/unit/core/test_metadata_index_integration.py",
    "test_add_relationship": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_knowledge_graph.py",
    "test_add_remove_strategy": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_router.py",
    "test_add_s3_credentials": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_credential_management_anyio.py",
    "test_add_storacha_credentials": "/home/barberb/ipfs_kit_py/test/unit/core/test_credential_controller.py",
    "test_add_storacha_credentials_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_credential_controller_anyio.py",
    "test_advanced_prefetch_thread_management": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
    "test_ai_benchmark_model": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
    "test_ai_create_knowledge_graph_failure": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
    "test_ai_create_vector_index": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
    "test_ai_distributed_training_cancel_job": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
    "test_ai_distributed_training_submit_job": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
    "test_ai_hybrid_search": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
    "test_ai_langchain_load_documents": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
    "test_ai_langchain_query": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
    "test_ai_llama_index_create_index": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
    "test_ai_ml_integration_runs_with_pandas_missing": "/home/barberb/ipfs_kit_py/test/unit/core/test_optional_dependencies.py",
    "test_ai_optimize_model": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
    "test_ai_register_dataset": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
    "test_ai_register_model": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
    "test_ai_test_inference": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
    "test_all_endpoints": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api.py",
    "test_announce_content": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_anyio_cli_ipfs_integration": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration_anyio.py",
    "test_anyio_full_workflow": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration_anyio.py",
    "test_anyio_ipfs_fs_journal_integration": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration_anyio.py",
    "test_anyio_webrtc_ipfs_integration": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration_anyio.py",
    "test_api_endpoint": "/home/barberb/ipfs_kit_py/test_mcp_api.py",
    "test_api_key_backend_access": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/tests/test_auth.py",
    "test_api_method_normal": "/home/barberb/ipfs_kit_py/test/unit/api/test_api.py",
    "test_api_method_unexpected_error": "/home/barberb/ipfs_kit_py/test/unit/api/test_api.py",
    "test_api_operation_stress": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_performance.py",
    "test_api_operations": "/home/barberb/ipfs_kit_py/test/unit/api/test_lotus_api_integration.py",
    "test_app": "/home/barberb/ipfs_kit_py/tests/test_api_key_management.py",
    "test_apply_policy_without_bridge": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
    "test_apply_replication_policy_without_bridge": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
    "test_ar_cache_basic": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_fsspec_mocked.py",
    "test_aria2_global_stats": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_aria2.py",
    "test_aria2_health_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_aria2.py",
    "test_aria2_list_downloads": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_aria2.py",
    "test_arrow_metadata_index_class": "/home/barberb/ipfs_kit_py/test/unit/core/test_dependency_handling.py",
    "test_async_context": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
    "test_async_filecoin_to_ipfs": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_model_anyio.py",
    "test_async_handle_backend_status_request": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
    "test_async_handle_replication_policy_request": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
    "test_async_handle_verify_request": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
    "test_async_list_connections": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_controller.py",
    "test_auth_success_flow": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_huggingface_controller.py",
    "test_authenticate_failure": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
    "test_auto_retry_on_daemon_not_running": "/home/barberb/ipfs_kit_py/test/unit/core/test_auto_retry.py",
    "test_automatic_recovery_actions": "/home/barberb/ipfs_kit_py/test/unit/core/test_monitoring_and_management.py",
    "test_backend_availability": "/home/barberb/ipfs_kit_py/test/test_routing_system_integration.py",
    "test_backend_initialization": "/home/barberb/ipfs_kit_py/tests/integration/backends/test_ipfs_backend.py",
    "test_backend_integration_simulation": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_tiered_cache.py",
    "test_backend_storage_import": "/home/barberb/ipfs_kit_py/basic_unit_tests.py",
    "test_backend_storage_methods": "/home/barberb/ipfs_kit_py/verify_fixes_direct.py",
    "test_backend_unavailable": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_integration_anyio.py",
    "test_backend_unavailable_async": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_integration_anyio.py",
    "test_basic_function": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_tool_manager.py",
    "test_basic_operation": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_method_normalization.py",
    "test_basic_operations": "/home/barberb/ipfs_kit_py/scripts/test_ipfs_backend_fixed.py",
    "test_basic_routing": "/home/barberb/ipfs_kit_py/test/test_routing_integration.py",
    "test_basic_tier_functionality": "/home/barberb/ipfs_kit_py/test/unit/core/test_tiered_storage_backends.py",
    "test_batch_operations_partial_success": "/home/barberb/ipfs_kit_py/test/unit/core/test_error_handling.py",
    "test_binary_is_executable": "/home/barberb/ipfs_kit_py/test/unit/core/test_binary_functionality.py",
    "test_binary_returns_version": "/home/barberb/ipfs_kit_py/test/unit/core/test_binary_functionality.py",
    "test_block_get_async_success": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_block_operations_anyio.py",
    "test_block_get_success": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_block_operations.py",
    "test_block_put_async_with_format_parameter": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_block_operations_anyio.py",
    "test_block_put_with_format_parameter": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_block_operations.py",
    "test_block_stat_async_failure": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_block_operations_anyio.py",
    "test_block_stat_async_success": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_block_operations_anyio.py",
    "test_block_stat_success": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_block_operations.py",
    "test_bootstrap_operations": "/home/barberb/ipfs_kit_py/test/test_ipfs_advanced.py",
    "test_bytes_response_handling": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_fix_result.py",
    "test_cache_error_recovery": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_error_scenarios.py",
    "test_cache_initialization": "/home/barberb/ipfs_kit_py/test/unit/core/test_tiered_storage.py",
    "test_cache_manager": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_mini.py",
    "test_cache_operation": "/home/barberb/ipfs_kit_py/test/unit/core/test_distributed_controller.py",
    "test_cache_reuse": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_integrated_get_filesystem.py",
    "test_call_nonexistent_method": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
    "test_cat": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
    "test_cat_content": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_kit_mocked.py",
    "test_check_connection_success": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_filecoin_model.py",
    "test_check_daemon_status_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
    "test_check_dependencies": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_controller_anyio.py",
    "test_check_existence": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_cli_controller.py",
    "test_check_status": "/home/barberb/ipfs_kit_py/test/test_backends/test_storacha_backend.py",
    "test_check_websocket_support": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
    "test_clean_stale_servers_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "test_clean_stale_servers_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "test_cleanup": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_wal.py",
    "test_cleanup_ended_connections": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_streaming.py",
    "test_cleanup_system": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_controller.py",
    "test_clear_history": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_metrics.py",
    "test_cli_add_command": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
    "test_cli_add_content_multipart": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_advanced.py",
    "test_cli_based_workflow": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_end_to_end.py",
    "test_cli_command_options": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
    "test_cli_controller": "/home/barberb/ipfs_kit_py/test/unit/core/test_all_controllers.py",
    "test_cli_endpoints": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_controllers.py",
    "test_cli_error_handling": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
    "test_cli_error_handling_validation_error": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface_additional.py",
    "test_cli_exists_command": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
    "test_cli_ipfs_integration": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_mocked_integration.py",
    "test_cli_ipfs_integration_async": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_mocked_integration_anyio.py",
    "test_cli_key_value_parsing": "/home/barberb/ipfs_kit_py/test/helpers/cli_interface_examples.py",
    "test_cli_ls_command": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
    "test_cli_pin_add_command": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
    "test_cli_pin_ls_command": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
    "test_cli_publish_command": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
    "test_cli_shutdown_command": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
    "test_cli_swarm_peers_command": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
    "test_cli_version": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_controller.py",
    "test_cli_version_command": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
    "test_cli_wal_list_command": "/home/barberb/ipfs_kit_py/test/helpers/cli_interface_examples.py",
    "test_cli_wal_status_command": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface_additional.py",
    "test_cli_with_config_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
    "test_cli_with_no_color_flag": "/home/barberb/ipfs_kit_py/test/helpers/cli_interface_examples.py",
    "test_cli_with_verbose_flag": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface_additional.py",
    "test_cli_with_yaml_format": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
    "test_client": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
    "test_client_server_connection": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_anyio.py",
    "test_close": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_integration_anyio.py",
    "test_close_all_connections": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_fix_detailed.py",
    "test_close_connection": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_controller.py",
    "test_close_resource_cleanup": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
    "test_cluster_operations_leecher": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
    "test_cluster_pin_add_auto_retry": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_auto_retry.py",
    "test_cluster_pin_rm_auto_retry": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_auto_retry.py",
    "test_cluster_status": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
    "test_collect_metrics": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_metrics.py",
    "test_collect_operation_stats": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_fs_journal_monitor.py",
    "test_combined_search": "/home/barberb/ipfs_kit_py/test/unit/core/test_integrated_search.py",
    "test_concurrent_access": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_error_scenarios.py",
    "test_concurrent_dht_operations": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_anyio_extended.py",
    "test_concurrent_files_operations": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_files_operations_anyio.py",
    "test_concurrent_same_chunk_request_deduplication": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced_resumable.py",
    "test_config": "/home/barberb/ipfs_kit_py/ipfs_kit_py/scripts/test_ai_ml_integration.py",
    "test_config_parameters": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_integrated_get_filesystem.py",
    "test_connect": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
    "test_connect_peer": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_cli_controller.py",
    "test_connect_to_peer": "/home/barberb/ipfs_kit_py/test/mcp/network_tests/test_mcp_peer_websocket.py",
    "test_connect_to_server": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller.py",
    "test_connect_with_multiaddr": "/home/barberb/ipfs_kit_py/test/unit/core/test_multiaddress.py",
    "test_connect_without_server_url": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_peer_websocket_controller.py",
    "test_connection_error_retry": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_error_scenarios.py",
    "test_connection_pool_creation": "/home/barberb/ipfs_kit_py/run_simple_tests.py",
    "test_content_analysis": "/home/barberb/ipfs_kit_py/test/test_routing_system_integration.py",
    "test_content_announcement_via_ipfskit": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_connection.py",
    "test_content_provider_search": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_integration_anyio.py",
    "test_content_publication": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_integration_anyio.py",
    "test_content_replication": "/home/barberb/ipfs_kit_py/test/unit/core/test_tiered_storage.py",
    "test_content_retrieval_performance": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_performance.py",
    "test_content_retrieval_via_ipfskit": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_connection.py",
    "test_content_storage": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_connection.py",
    "test_context_detection": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
    "test_context_injection": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_tool_manager.py",
    "test_context_injection_async": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_tool_manager.py",
    "test_context_optional": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_tool_manager.py",
    "test_context_parameter_detection": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_tool_manager.py",
    "test_context_propagation": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_telemetry_api_integration.py",
    "test_controller_bytes_response": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_fix_result.py",
    "test_controller_initialization": "/home/barberb/ipfs_kit_py/test/mcp/network_tests/test_mcp_distributed.py",
    "test_controller_integration": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_status_integrated.py",
    "test_copy_file_error": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
    "test_copy_file_success": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
    "test_copy_resumable_permission_check": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_permissions_integration.py",
    "test_core_package_import": "/home/barberb/ipfs_kit_py/test/unit/core/test_dependency_handling.py",
    "test_correlation_id_tracking": "/home/barberb/ipfs_kit_py/test/unit/core/test_error_handling.py",
    "test_create_car": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_integration_with_kit.py",
    "test_create_dag_node": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_integration_with_kit.py",
    "test_create_gossipsub": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_pubsub.py",
    "test_create_journal_monitor": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_fs_journal_monitor.py",
    "test_create_metadata_from_ipfs_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index_additional.py",
    "test_create_metadata_with_directory": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index_additional.py",
    "test_create_offer_with_replication": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication.py",
    "test_create_offer_with_replication_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication_anyio.py",
    "test_create_repository_failure": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
    "test_create_space": "/home/barberb/ipfs_kit_py/test/mcp/server/test_storacha_mcp.py",
    "test_create_space_error": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_storacha_model.py",
    "test_create_unknown_router": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_pubsub.py",
    "test_credential_endpoints": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_controllers.py",
    "test_credential_endpoints_exist": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_credential_management.py",
    "test_daemon_endpoints": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_anyio.py",
    "test_daemon_not_running": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_error_scenarios.py",
    "test_dag_get": "/home/barberb/ipfs_kit_py/test/test_ipfs_advanced.py",
    "test_dag_get_with_path_parameter": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
    "test_dag_get_with_path_parameter_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
    "test_dag_put_failure": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
    "test_dag_put_failure_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
    "test_dag_put_with_format_parameter": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
    "test_dag_put_with_format_parameter_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
    "test_dag_resolve": "/home/barberb/ipfs_kit_py/test/test_ipfs_advanced.py",
    "test_dag_resolve_failure": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
    "test_dag_resolve_failure_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
    "test_dag_resolve_success": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
    "test_dag_resolve_success_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
    "test_dask_integration": "/home/barberb/ipfs_kit_py/test/unit/core/test_data_science_integration.py",
    "test_data_migration_workflow": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_end_to_end.py",
    "test_debug_endpoint_includes_metrics": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_component_monitoring.py",
    "test_debug_middleware": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server_anyio.py",
    "test_debug_output": "/home/barberb/ipfs_kit_py/test/unit/core/test_daemon_status_direct.py",
    "test_deep_directory_creation": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_files_operations_anyio.py",
    "test_delete_credential": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_credential_management_anyio.py",
    "test_detect_by_content": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced.py",
    "test_detect_changes": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced.py",
    "test_dht_find_peer": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_dht_find_peer_failure": "/home/barberb/ipfs_kit_py/test/test_ipfs_dht_operations.py",
    "test_dht_find_providers": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_dht_find_providers_failure": "/home/barberb/ipfs_kit_py/test/test_ipfs_dht_operations.py",
    "test_dht_findpeer_async_empty_response": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_dht_operations_anyio.py",
    "test_dht_findpeer_async_error": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_anyio_extended.py",
    "test_dht_findpeer_empty_response": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_dht_operations.py",
    "test_dht_findpeer_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_extended.py",
    "test_dht_findpeer_server_error": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_extended.py",
    "test_dht_findpeer_unexpected_error_type": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_extended.py",
    "test_dht_findpeer_validation_error": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_extended.py",
    "test_dht_findprovs_async_empty_response": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_dht_operations_anyio.py",
    "test_dht_findprovs_async_error": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_anyio_extended.py",
    "test_dht_findprovs_async_success": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_dht_operations_anyio.py",
    "test_dht_findprovs_empty_response": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_dht_operations.py",
    "test_dht_findprovs_null_response": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_extended.py",
    "test_dht_findprovs_success": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_dht_operations.py",
    "test_dht_findprovs_with_large_response": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_extended.py",
    "test_dht_findprovs_with_num_providers_parameter": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_anyio_extended.py",
    "test_dht_provide": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_dht_provide_failure": "/home/barberb/ipfs_kit_py/test/test_ipfs_dht_operations.py",
    "test_dict_response_handling": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_fix_result.py",
    "test_disable_warn_on_duplicate_tools": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_tool_manager.py",
    "test_disconnect_from_server": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller.py",
    "test_discover_partitions": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index_additional.py",
    "test_discover_peers": "/home/barberb/ipfs_kit_py/test/unit/api/test_distributed_controller_fastapi.py",
    "test_discover_servers_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "test_discover_servers_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "test_distributed_controller": "/home/barberb/ipfs_kit_py/test/unit/core/test_all_controllers.py",
    "test_document_indexing": "/home/barberb/ipfs_kit_py/scripts/verify_search_integration.py",
    "test_downgrade_worker_to_leecher": "/home/barberb/ipfs_kit_py/test/unit/core/test_dynamic_role_switching.py",
    "test_download_binaries": "/home/barberb/ipfs_kit_py/test/unit/core/test_binary_download.py",
    "test_download_file_with_name": "/home/barberb/ipfs_kit_py/test/unit/api/test_api.py",
    "test_endpoint": "/home/barberb/ipfs_kit_py/scripts/verify_api_endpoints.py",
    "test_enforce_minimum_replication_factor": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_metadata_replication_anyio.py",
    "test_enhanced_dht_discovery_creation": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_integration.py",
    "test_error_conversion": "/home/barberb/ipfs_kit_py/test/functional/error_handling/test_standardized_error_handling.py",
    "test_error_handling": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_fix_result.py",
    "test_error_handling_dependencies_not_available": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_additional_coverage.py",
    "test_error_handling_file_not_found": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_additional_coverage.py",
    "test_error_handling_http_api_failure": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_additional_coverage.py",
    "test_error_middleware": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server_anyio.py",
    "test_estimate_retrieval_cost": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_metrics.py",
    "test_estimate_time_to_completion": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_state_helpers.py",
    "test_estimate_total_cost": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_metrics.py",
    "test_exists": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
    "test_exists_endpoint": "/home/barberb/ipfs_kit_py/test/unit/core/test_anyio_server.py",
    "test_export_state_to_json": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_state_helpers.py",
    "test_extend_high_level_api_with_aiml_telemetry": "/home/barberb/ipfs_kit_py/test/unit/ai_ml/test_wal_telemetry_ai_ml_anyio.py",
    "test_extend_ipfs_kit_class": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_integration.py",
    "test_extension_initialization": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_telemetry_api_integration.py",
    "test_failed_transaction": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced.py",
    "test_fastmcp_resource_mime_type": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/issues/test_152_resource_mime_type.py",
    "test_fault_tolerance": "/home/barberb/ipfs_kit_py/examples/wal_enabled_api_example.py",
    "test_fetch_image": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
    "test_fetch_image_with_transform": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
    "test_file_upload": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_fixes.py",
    "test_filecoin": "/home/barberb/ipfs_kit_py/test/unit/core/test_all_backends.py",
    "test_filecoin_model_direct": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_comprehensive.py",
    "test_filecoin_status": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_filecoin.py",
    "test_filecoin_support": "/home/barberb/ipfs_kit_py/scripts/setup/setup_filecoin_gateway.py",
    "test_filecoin_to_ipfs_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_controller.py",
    "test_filecoin_to_ipfs_success": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_filecoin_integration.py",
    "test_files_mkdir": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_mfs_operations.py",
    "test_files_operations_with_sync_compatibility": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_files_operations_anyio.py",
    "test_files_stat": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_mfs_operations.py",
    "test_files_write": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_mfs_operations.py",
    "test_filesystem_journal": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive.py",
    "test_filesystem_journal_integration": "/home/barberb/ipfs_kit_py/test/unit/core/test_fs_journal_fixed.py",
    "test_finalize_read_permission_check": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_permissions_integration.py",
    "test_find_content_source": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_bridge_model.py",
    "test_find_libp2p_peers": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_peer_discovery.py",
    "test_find_nodes_by_role": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_state_helpers.py",
    "test_find_peers_websocket": "/home/barberb/ipfs_kit_py/test/mcp/network_tests/test_mcp_peer_websocket.py",
    "test_find_providers": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_find_tasks_by_resource_requirements": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_state_helpers.py",
    "test_find_tasks_by_status": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_state_helpers.py",
    "test_fixed_ipfs_backend": "/home/barberb/ipfs_kit_py/test/test_backends/test_fixed_ipfs_backend.py",
    "test_flush_files_error": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
    "test_flush_files_success": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
    "test_form_add": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_fixes.py",
    "test_format_message_string": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_pubsub.py",
    "test_from_ipfs": "/home/barberb/ipfs_kit_py/test/test_backends/test_storacha_backend.py",
    "test_fs_journal": "/home/barberb/ipfs_kit_py/test_ipfs_fs_integration.py",
    "test_fs_journal_controller": "/home/barberb/ipfs_kit_py/test/unit/core/test_all_controllers.py",
    "test_fs_read_handles_bytes_content": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive_fixes.py",
    "test_fsspec_not_available": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_integrated_get_filesystem.py",
    "test_full_ipfs_webrtc_fs_journal_workflow": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration.py",
    "test_full_workflow_integration_async": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_mocked_integration_anyio.py",
    "test_gateway_configuration": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_gateway_compatibility.py",
    "test_gateway_content_cached": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_gateway_compatibility.py",
    "test_gateway_fallback_chain": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_gateway_compatibility.py",
    "test_gateway_path_formatting": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_gateway_compatibility.py",
    "test_generate_cluster_certificates": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_authentication.py",
    "test_generate_node_identity": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_authentication.py",
    "test_generate_telemetry_report_async": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_telemetry_api_integration_anyio.py",
    "test_generate_ucan_token": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_authentication.py",
    "test_get": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
    "test_get_backend": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_distributed_controller_anyio.py",
    "test_get_backend_status": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
    "test_get_best_alternative": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_router.py",
    "test_get_compatible_servers_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "test_get_compatible_servers_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "test_get_config": "/home/barberb/ipfs_kit_py/test/unit/api/test_api.py",
    "test_get_connected_peers": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_get_content": "/home/barberb/ipfs_kit_py/tests/integration/backends/test_ipfs_backend.py",
    "test_get_content_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
    "test_get_content_bytes_fix": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_fix.py",
    "test_get_content_bytes_response": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_fixes_all.py",
    "test_get_content_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
    "test_get_content_from_backend": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_bridge_model.py",
    "test_get_content_metadata": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_bridge_model.py",
    "test_get_content_tiers_all_backends": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_backends_interop.py",
    "test_get_cost_model": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_metrics.py",
    "test_get_daemon_status_endpoint": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_daemon_management_anyio.py",
    "test_get_debug_endpoints": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_advanced.py",
    "test_get_filesystem_exception": "/home/barberb/ipfs_kit_py/test/unit/core/test_fsspec_standalone.py",
    "test_get_filesystem_method": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
    "test_get_filesystem_success": "/home/barberb/ipfs_kit_py/tools/test_utils/test_fsspec_integration.py",
    "test_get_journal_health_status": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_fs_journal_monitor.py",
    "test_get_local_server_info_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "test_get_metadata": "/home/barberb/ipfs_kit_py/tests/integration/backends/test_ipfs_backend.py",
    "test_get_metadata_index": "/home/barberb/ipfs_kit_py/test/unit/core/test_metadata_index_integration.py",
    "test_get_operation_status": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_api.py",
    "test_get_operations_by_status": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_wal.py",
    "test_get_optimal_source": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_bridge_model.py",
    "test_get_peer_by_id": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_peer_websocket_controller.py",
    "test_get_peer_by_id_not_found": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
    "test_get_peer_info": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_get_peers": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_distributed_endpoints.py",
    "test_get_performance_metrics": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
    "test_get_preferred_backends": "/home/barberb/ipfs_kit_py/tests/test_adaptive_optimizer.py",
    "test_get_prompt": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
    "test_get_prompt_with_resource": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
    "test_get_role_requirements": "/home/barberb/ipfs_kit_py/test/unit/core/test_dynamic_role_switching.py",
    "test_get_server_by_id_endpoint_not_found": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "test_get_server_status": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
    "test_get_server_status_endpoint": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
    "test_get_set_metric": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_router.py",
    "test_get_state_interface_info": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_state.py",
    "test_get_state_path_from_metadata": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_state_helpers.py",
    "test_get_stats": "/home/barberb/ipfs_kit_py/test/unit/core/test_method_normalizer.py",
    "test_get_status_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_fs_journal_controller_anyio.py",
    "test_get_success_rate": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_metrics.py",
    "test_get_task_execution_metrics": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_state_helpers.py",
    "test_get_task_status": "/home/barberb/ipfs_kit_py/test/mcp/network_tests/test_mcp_distributed.py",
    "test_get_telemetry_configuration_async": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_telemetry_api_integration_anyio.py",
    "test_get_throughput": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_metrics.py",
    "test_global_convenience_function": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_integration.py",
    "test_gossipsub_and_enhanced_discovery": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_protocols.py",
    "test_handle_cache_miss": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_integration.py",
    "test_handle_fetch_cid_request_async_impl": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
    "test_handle_filecoin_to_ipfs_request": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_controller_mock.py",
    "test_handle_filecoin_to_ipfs_request_error": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_controller_mock.py",
    "test_handle_huggingface_to_ipfs_request_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_huggingface_controller_anyio.py",
    "test_handle_ipfs_to_lassie_request_sync_fallback": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
    "test_handle_lassie_to_ipfs_request_async_impl": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
    "test_handle_lassie_to_ipfs_request_sync_fallback": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
    "test_handle_list_wallets_request": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_controller_mock.py",
    "test_handle_migration_request_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller_anyio.py",
    "test_handle_missing_samples": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
    "test_handle_partition_request": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index.py",
    "test_handle_s3_to_ipfs_request": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_s3_controller.py",
    "test_handle_s3_to_ipfs_request_error": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_s3_controller_anyio.py",
    "test_handle_space_creation_request": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storacha_controller_anyio.py",
    "test_handle_status_request": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_s3_controller_anyio.py",
    "test_handle_status_request_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_huggingface_controller_anyio.py",
    "test_handle_status_request_async_impl": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
    "test_handle_status_request_error": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_controller_anyio.py",
    "test_handle_storacha_to_ipfs_request": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storacha_controller_anyio.py",
    "test_handle_transfer_request_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller_anyio.py",
    "test_handle_upload_request_form": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_s3_controller.py",
    "test_handle_webrtc_streaming": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_streaming.py",
    "test_health": "/home/barberb/ipfs_kit_py/test/unit/core/test_daemon_status_direct.py",
    "test_health_check": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
    "test_health_check_includes_daemon_status": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_daemon_management_anyio.py",
    "test_health_endpoint": "/home/barberb/ipfs_kit_py/test/unit/core/test_anyio_server.py",
    "test_health_monitoring": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_mcp_discovery_comprehensive.py",
    "test_high_level_api_compatibility": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_ipns.py",
    "test_http_ipns_publish": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_ipns.py",
    "test_http_stream_endpoint": "/home/barberb/ipfs_kit_py/test/functional/streaming/test_streaming_anyio.py",
    "test_http_upload_stream_endpoint": "/home/barberb/ipfs_kit_py/test/functional/streaming/test_streaming_anyio.py",
    "test_huggingface": "/home/barberb/ipfs_kit_py/test/unit/core/test_all_backends.py",
    "test_huggingface_integration": "/home/barberb/ipfs_kit_py/applied_patches/fix_huggingface_integration.py",
    "test_huggingface_model_parity": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
    "test_huggingface_status": "/home/barberb/ipfs_kit_py/test/unit/ai_ml/test_huggingface.py",
    "test_huggingface_to_ipfs_download_error": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
    "test_huggingface_to_ipfs_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_huggingface_controller_anyio.py",
    "test_huggingface_to_ipfs_ipfs_error": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
    "test_huggingface_to_ipfs_missing_dependency": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
    "test_huggingface_to_ipfs_missing_filename": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
    "test_huggingface_to_ipfs_missing_repo_id": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
    "test_huggingface_to_ipfs_success": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
    "test_hyperparameter_tuning": "/home/barberb/ipfs_kit_py/test/integration/ai/test_ai_ml_integrations.py",
    "test_identify_backend_operation": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/tests/test_auth.py",
    "test_image_data_integration": "/home/barberb/ipfs_kit_py/test/unit/core/test_data_science_integration.py",
    "test_import_ipfs_kit": "/home/barberb/ipfs_kit_py/run_tests.py",
    "test_import_lotus_kit": "/home/barberb/ipfs_kit_py/run_tests.py",
    "test_import_wallet_data": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_lotus_kit.py",
    "test_init": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index.py",
    "test_init_default": "/home/barberb/ipfs_kit_py/test/performance/test_performance_metrics.py",
    "test_init_metadata_replication": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_metadata_replication.py",
    "test_init_with_multiple_backends": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
    "test_init_with_webrtc_support": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_controller.py",
    "test_init_with_websocket_support": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
    "test_initialization": "/home/barberb/ipfs_kit_py/tests/test_adaptive_optimizer.py",
    "test_initialization_error": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index_additional.py",
    "test_install": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "test_integration": "/home/barberb/ipfs_kit_py/test_ipfs_fs_integration.py",
    "test_integration_mcp_server_ipns_endpoints": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
    "test_invalid_cid_error_handling": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_error_scenarios.py",
    "test_invalid_daemon_type_validation": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_daemon_management_anyio.py",
    "test_ipfs": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
    "test_ipfs_add": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_add.py",
    "test_ipfs_add_and_cat": "/home/barberb/ipfs_kit_py/test/test_mcp_server.py",
    "test_ipfs_add_directory": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "test_ipfs_add_method": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
    "test_ipfs_add_pin": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "test_ipfs_api": "/home/barberb/ipfs_kit_py/scripts/implementation/mcp_direct_fix.py",
    "test_ipfs_backend": "/home/barberb/ipfs_kit_py/ipfs_kit_py/tests/test_ipfs_backend.py",
    "test_ipfs_backend_import": "/home/barberb/ipfs_kit_py/test/unit/ipfs/test_ipfs_client_fix.py",
    "test_ipfs_backend_import_mechanism": "/home/barberb/ipfs_kit_py/scripts/test_ipfs_dependency_fixed.py",
    "test_ipfs_backend_initialization": "/home/barberb/ipfs_kit_py/scripts/test_ipfs_backend_fixed.py",
    "test_ipfs_basic_functionality": "/home/barberb/ipfs_kit_py/run_simple_tests.py",
    "test_ipfs_cat": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "test_ipfs_cat_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_anyio.py",
    "test_ipfs_cat_method": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
    "test_ipfs_cat_query": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_fixed.py",
    "test_ipfs_client_import": "/home/barberb/ipfs_kit_py/test/unit/ipfs/test_ipfs_client_fix.py",
    "test_ipfs_client_reconnection": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_error_scenarios.py",
    "test_ipfs_cluster_ctl": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
    "test_ipfs_cluster_follow": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_daemons.py",
    "test_ipfs_cluster_follow_status": "/home/barberb/ipfs_kit_py/test/unit/core/test_controller_directly.py",
    "test_ipfs_cluster_follow_status_direct": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_status_integrated.py",
    "test_ipfs_cluster_service": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_service.py",
    "test_ipfs_cluster_service_status": "/home/barberb/ipfs_kit_py/test/unit/core/test_controller_directly.py",
    "test_ipfs_connection_import": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
    "test_ipfs_controller": "/home/barberb/ipfs_kit_py/test/unit/core/test_all_controllers.py",
    "test_ipfs_controller_key_gen_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
    "test_ipfs_controller_key_list_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
    "test_ipfs_controller_name_publish_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
    "test_ipfs_controller_name_resolve_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
    "test_ipfs_daemon_start": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "test_ipfs_daemon_status": "/home/barberb/ipfs_kit_py/test/test_backends/test_ipfs_backend.py",
    "test_ipfs_daemon_stop": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "test_ipfs_dag_operations": "/home/barberb/ipfs_kit_py/test/test_mcp_server.py",
    "test_ipfs_dht_provide": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "test_ipfs_endpoints": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_controllers.py",
    "test_ipfs_error_hierarchy": "/home/barberb/ipfs_kit_py/test/unit/core/test_error_handling.py",
    "test_ipfs_filesystem": "/home/barberb/ipfs_kit_py/test_final_mcp_server.py",
    "test_ipfs_fs_cached_access": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_fsspec_mocked.py",
    "test_ipfs_fs_journal_integration": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration.py",
    "test_ipfs_fs_journal_integration_async": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_mocked_integration_anyio.py",
    "test_ipfs_fs_ls": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_fsspec_mocked.py",
    "test_ipfs_fs_path_to_cid": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_fsspec_mocked.py",
    "test_ipfs_fs_pin": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_fsspec_mocked.py",
    "test_ipfs_get": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "test_ipfs_get_config": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "test_ipfs_id": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_fixed.py",
    "test_ipfs_key_gen_async_functionality": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
    "test_ipfs_key_gen_async_with_type_and_size": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
    "test_ipfs_key_gen_functionality": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
    "test_ipfs_key_gen_with_type_and_size": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
    "test_ipfs_key_list_async_functionality": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
    "test_ipfs_key_list_functionality": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
    "test_ipfs_kit_binary_path_creation": "/home/barberb/ipfs_kit_py/test/unit/core/test_first_run_initialization.py",
    "test_ipfs_kit_import": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
    "test_ipfs_kit_initialization": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
    "test_ipfs_kit_initialization_download": "/home/barberb/ipfs_kit_py/test/unit/core/test_binary_download.py",
    "test_ipfs_kit_py_integration": "/home/barberb/ipfs_kit_py/test_final_mcp_server.py",
    "test_ipfs_kit_uses_existing_path": "/home/barberb/ipfs_kit_py/test/unit/core/test_first_run_initialization.py",
    "test_ipfs_ls_pinset": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "test_ipfs_media_stream_track": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_streaming.py",
    "test_ipfs_model": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_mini.py",
    "test_ipfs_model_parity": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
    "test_ipfs_name_publish": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "test_ipfs_name_publish_async_failure": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
    "test_ipfs_name_publish_async_with_json_response": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
    "test_ipfs_name_publish_async_with_key": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
    "test_ipfs_name_publish_failure": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
    "test_ipfs_name_publish_handles_bytes_stdout": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive_fixes.py",
    "test_ipfs_name_publish_with_json_response": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
    "test_ipfs_name_publish_with_key": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
    "test_ipfs_name_resolve_async_failure": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
    "test_ipfs_name_resolve_async_with_ipns_prefix_handling": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
    "test_ipfs_name_resolve_async_with_nocache_parameter": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
    "test_ipfs_name_resolve_async_with_recursive_parameter": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
    "test_ipfs_name_resolve_async_with_string_response": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
    "test_ipfs_name_resolve_async_with_timeout_parameter": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
    "test_ipfs_name_resolve_failure": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
    "test_ipfs_name_resolve_handles_bytes_stdout": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive_fixes.py",
    "test_ipfs_name_resolve_handles_dict_response": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_name_resolve.py",
    "test_ipfs_name_resolve_with_ipns_prefix_handling": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
    "test_ipfs_name_resolve_with_nocache_parameter": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
    "test_ipfs_name_resolve_with_recursive_parameter": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
    "test_ipfs_name_resolve_with_string_response": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
    "test_ipfs_name_resolve_with_timeout_parameter": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
    "test_ipfs_object_operations": "/home/barberb/ipfs_kit_py/test/test_mcp_server.py",
    "test_ipfs_pin": "/home/barberb/ipfs_kit_py/test_mcp_tools.py",
    "test_ipfs_pin_add": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_fixed.py",
    "test_ipfs_pin_add_query": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_fixed.py",
    "test_ipfs_pin_ls": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_fixed.py",
    "test_ipfs_pin_operations": "/home/barberb/ipfs_kit_py/test/test_mcp_server.py",
    "test_ipfs_pin_rm": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_fixed.py",
    "test_ipfs_pin_rm_query": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_fixed.py",
    "test_ipfs_py_import": "/home/barberb/ipfs_kit_py/scripts/test_ipfs_dependency_fixed.py",
    "test_ipfs_remove_pin": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "test_ipfs_specific_pin_methods": "/home/barberb/ipfs_kit_py/test/test_backends/test_ipfs_backend.py",
    "test_ipfs_swarm_disconnect": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "test_ipfs_swarm_methods_existence": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
    "test_ipfs_swarm_peers": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
    "test_ipfs_to_filecoin_import_failure": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_filecoin_model.py",
    "test_ipfs_to_filecoin_ipfs_failure": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_filecoin_model.py",
    "test_ipfs_to_huggingface_ipfs_error": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
    "test_ipfs_to_huggingface_missing_cid": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
    "test_ipfs_to_huggingface_missing_dependency": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
    "test_ipfs_to_huggingface_missing_repo_id": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
    "test_ipfs_to_s3_ipfs_error": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_s3_model.py",
    "test_ipfs_to_storacha_ipfs_error": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_storacha_model.py",
    "test_ipfs_version": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api.py",
    "test_ipfs_webrtc_integration": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_mocked_integration.py",
    "test_ipfs_webrtc_integration_async": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_mocked_integration_anyio.py",
    "test_ipget": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipget.py",
    "test_ipld_extension_initialization": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_integration_with_kit.py",
    "test_is_backend_available": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_wal.py",
    "test_isolation_mode": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server_anyio.py",
    "test_issue_auth_token": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_authentication.py",
    "test_job_creation": "/home/barberb/ipfs_kit_py/test/integration/ai/test_ai_ml_integrations.py",
    "test_join_paths": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced.py",
    "test_json_add": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_fixes.py",
    "test_jsonrpc_endpoint": "/home/barberb/ipfs_kit_py/test_final_mcp_server.py",
    "test_jsonrpc_server": "/home/barberb/ipfs_kit_py/simple_verify_mcp.py",
    "test_key_operations": "/home/barberb/ipfs_kit_py/test/test_ipfs_advanced.py",
    "test_kwargs_handling": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_integrated_get_filesystem.py",
    "test_large_file_handling": "/home/barberb/ipfs_kit_py/test/test_mcp_server.py",
    "test_lassie_integration": "/home/barberb/ipfs_kit_py/applied_patches/fix_lassie_integration.py",
    "test_lassie_status": "/home/barberb/ipfs_kit_py/test/unit/core/test_lassie.py",
    "test_latency_tracking": "/home/barberb/ipfs_kit_py/test/unit/core/test_tiered_storage.py",
    "test_leader_election_process": "/home/barberb/ipfs_kit_py/test/unit/core/test_distributed_coordination.py",
    "test_learning_from_outcomes": "/home/barberb/ipfs_kit_py/test/test_routing_system_integration.py",
    "test_leecher_get_pinset": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
    "test_leecher_pin_operations": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
    "test_leecher_role": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_connection.py",
    "test_libp2p_communication": "/home/barberb/ipfs_kit_py/test/mcp/network_tests/test_mcp_communication_anyio.py",
    "test_libp2p_health": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_libp2p_health_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_libp2p_server_integration.py",
    "test_libp2p_model": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_libp2p_server_integration.py",
    "test_list_connections": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_webrtc.py",
    "test_list_files": "/home/barberb/ipfs_kit_py/test_mcp_tools.py",
    "test_list_files_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
    "test_list_files_error": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_files_operations_anyio.py",
    "test_list_known_peers_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_distributed_controller_anyio.py",
    "test_list_message_handlers": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_list_miners_success": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_filecoin_model.py",
    "test_list_pins": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive.py",
    "test_list_pins_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
    "test_list_pins_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
    "test_list_prompts": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
    "test_list_tasks": "/home/barberb/ipfs_kit_py/test/mcp/network_tests/test_mcp_distributed.py",
    "test_list_uploads": "/home/barberb/ipfs_kit_py/test/mcp/server/test_storacha_mcp.py",
    "test_llm_context_generation": "/home/barberb/ipfs_kit_py/test/unit/core/test_integrated_search.py",
    "test_load_dataset": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
    "test_load_multimodal_dataset": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
    "test_lock_file_handling": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive.py",
    "test_lock_file_no_removal": "/home/barberb/ipfs_kit_py/test/unit/core/test_lock_handling.py",
    "test_log_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server_anyio.py",
    "test_lotus_daemon_management": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_lotus_daemon.py",
    "test_lotus_kit_available": "/home/barberb/ipfs_kit_py/test/test_fix_verification.py",
    "test_lotus_kit_available_constant": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
    "test_lotus_kit_initialization": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_lotus_functionality.py",
    "test_lowlevel_server_lifespan": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/test_lifespan.py",
    "test_ls_multi_gw": "/home/barberb/ipfs_kit_py/docs/ipfsspec/test/test_async.py",
    "test_make_directory_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
    "test_make_directory_error": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_files_operations_anyio.py",
    "test_make_directory_success": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_files_operations_anyio.py",
    "test_master_get_pinset": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
    "test_master_peer_listing": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
    "test_master_pin_operations": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
    "test_master_role": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_connection.py",
    "test_mcp_api_feature_completeness": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
    "test_mcp_cli_integration": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_cli.py",
    "test_mcp_content_replication_info": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_tiered_cache.py",
    "test_mcp_discovery_controller_anyio_import": "/home/barberb/ipfs_kit_py/test/unit/core/test_controller_import.py",
    "test_mcp_endpoints": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_paths.py",
    "test_mcp_ensure_replication": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_tiered_cache.py",
    "test_mcp_fixes": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_fixes.py",
    "test_mcp_integration": "/home/barberb/ipfs_kit_py/test/unit/core/test_tiered_storage_backends.py",
    "test_mcp_ipfs_methods": "/home/barberb/ipfs_kit_py/test_ipfs_methods.py",
    "test_mcp_lock_handling": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_lock_handling.py",
    "test_mcp_replication_api_endpoint": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_tiered_cache.py",
    "test_mcp_replication_thresholds": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_tiered_cache.py",
    "test_mcp_server": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p.py",
    "test_mcp_server_initialization": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
    "test_mcp_server_integration": "/home/barberb/ipfs_kit_py/ipfs_kit_py/scripts/test_ai_ml_integration.py",
    "test_mcp_shutdown": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_shutdown.py",
    "test_mcp_special_test_keys": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_tiered_cache.py",
    "test_mcp_tools_registration": "/home/barberb/ipfs_kit_py/test_ipfs_fs_integration.py",
    "test_metadata_only_search": "/home/barberb/ipfs_kit_py/test/unit/core/test_integrated_search.py",
    "test_method": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
    "test_method_call_forwarding": "/home/barberb/ipfs_kit_py/test/unit/core/test_method_normalizer.py",
    "test_method_normalization": "/home/barberb/ipfs_kit_py/test/unit/core/test_method_normalizer.py",
    "test_method_normalization_stress": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_normalized_ipfs.py",
    "test_metrics_collection": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_fsspec_metrics.py",
    "test_metrics_collector_records_requests": "/home/barberb/ipfs_kit_py/test/integration/test_blue_green_deployment.py",
    "test_metrics_creation": "/home/barberb/ipfs_kit_py/test/test_metrics_extension.py",
    "test_middleware_error_handling": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_error_scenarios.py",
    "test_migrate_between_tiers": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_backends_interop.py",
    "test_migrate_by_list": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_s3_to_ipfs.py",
    "test_migrate_by_list_with_string_cids": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_to_s3.py",
    "test_migrate_content_direct_implementation": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
    "test_migrate_content_with_bridge": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
    "test_migrate_directory": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_to_storacha.py",
    "test_migrate_empty_list": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_s3_to_ipfs.py",
    "test_migrate_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_s3_to_ipfs.py",
    "test_migrate_file_failure": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_to_s3.py",
    "test_migrate_file_no_pin": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_s3_to_ipfs.py",
    "test_migrate_file_with_filename": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_to_s3.py",
    "test_migration_imports": "/home/barberb/ipfs_kit_py/scripts/verify_migration_controller.py",
    "test_migration_with_verification_failure": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
    "test_minimum_replication_factor_enforcement": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication.py",
    "test_minimum_replication_factor_enforcement_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication_anyio.py",
    "test_mock_tiered_cache_manager_with_all_backends": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_tiered_cache.py",
    "test_model": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_model_direct.py",
    "test_model_classes": "/home/barberb/ipfs_kit_py/test/unit/api/test_api.py",
    "test_model_endpoint": "/home/barberb/ipfs_kit_py/test/integration/ai/test_ai_ml_integrations.py",
    "test_model_enforces_replication_policy": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication.py",
    "test_model_enforces_replication_policy_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication_anyio.py",
    "test_model_initialize_with_replication": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_metadata_replication_anyio.py",
    "test_model_initialize_with_replication_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_metadata_replication_anyio.py",
    "test_model_ipns_publish": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_ipns.py",
    "test_model_passes_buffer_params_to_track": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_stream_buffer_optimization.py",
    "test_model_registry_class": "/home/barberb/ipfs_kit_py/test/unit/core/test_dependency_handling.py",
    "test_model_with_normalized_ipfs": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_normalized_ipfs.py",
    "test_monitor_startup_and_shutdown": "/home/barberb/ipfs_kit_py/test/unit/core/test_daemon_health_monitor.py",
    "test_monitoring": "/home/barberb/ipfs_kit_py/ipfs_kit_py/scripts/test_ai_ml_integration.py",
    "test_move_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_fs_journal_controller_anyio.py",
    "test_move_content_batch": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced.py",
    "test_move_file_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
    "test_move_file_with_parents": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
    "test_multiaddr_manipulation": "/home/barberb/ipfs_kit_py/test/unit/core/test_multiaddress.py",
    "test_multiaddr_string_conversion": "/home/barberb/ipfs_kit_py/test/unit/core/test_multiaddress.py",
    "test_name_publish": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipns_model.py",
    "test_new_endpoints": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_endpoints.py",
    "test_no_available_backends": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_algorithms.py",
    "test_no_lock_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_lock_handling_simple.py",
    "test_node_initialization": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
    "test_non_ascii_description": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
    "test_normal_startup": "/home/barberb/ipfs_kit_py/test/unit/core/test_lock_handling.py",
    "test_object_new": "/home/barberb/ipfs_kit_py/test/test_ipfs_advanced.py",
    "test_object_put": "/home/barberb/ipfs_kit_py/test/test_ipfs_advanced.py",
    "test_open": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
    "test_operation_error_type_classification": "/home/barberb/ipfs_kit_py/test/unit/core/test_error_handling.py",
    "test_operation_failure_propagates": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_filecoin_model.py",
    "test_optional_context": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
    "test_other_controllers": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_endpoints.py",
    "test_pandas_parquet_integration": "/home/barberb/ipfs_kit_py/test/unit/core/test_data_science_integration.py",
    "test_parquet_dataset_integration": "/home/barberb/ipfs_kit_py/test/unit/core/test_data_science_integration.py",
    "test_partitioning": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_wal.py",
    "test_peer_info_from_dict": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_anyio.py",
    "test_peer_info_initialization": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_anyio.py",
    "test_peer_initialization": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_connection.py",
    "test_peer_websocket_status": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api.py",
    "test_perform_with_retry": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
    "test_persistence_metrics": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_component_monitoring.py",
    "test_pin_add": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
    "test_pin_content": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_normalized_ipfs.py",
    "test_pin_content_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
    "test_pin_content_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
    "test_pin_content_simulation": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_model_parquet_cache.py",
    "test_pin_ls": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
    "test_pin_operations": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_fixes.py",
    "test_pin_rm": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
    "test_ping_peer": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_distributed_endpoints.py",
    "test_post_apply_policy": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller_anyio.py",
    "test_post_verify_content": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller_anyio.py",
    "test_problematic_methods_local": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_anyio_integration.py",
    "test_progressive_fetch": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_stream_buffer_optimization.py",
    "test_prometheus_integration_async": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_telemetry_api_integration_anyio.py",
    "test_prompt_decorator": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
    "test_prompt_decorator_with_description": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
    "test_protocol_registration": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_integration_anyio.py",
    "test_provider_finding_via_ipfskit": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_connection.py",
    "test_publish": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
    "test_publish_metadata_index": "/home/barberb/ipfs_kit_py/test/unit/core/test_metadata_index_integration.py",
    "test_pubsub_get_peers": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_pubsub_get_topics": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_pubsub_publish": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_pubsub_subscribe": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_pubsub_unsubscribe": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_put_in_tier_all_backends": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_backends_interop.py",
    "test_pyarrow_integration": "/home/barberb/ipfs_kit_py/test/unit/core/test_data_science_integration.py",
    "test_pydantic_model_function": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_tool_manager.py",
    "test_query_pins": "/home/barberb/ipfs_kit_py/test/unit/api/test_graphql_api.py",
    "test_read_chunk_permission_check": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_permissions_integration.py",
    "test_read_file": "/home/barberb/ipfs_kit_py/test_mcp_tools.py",
    "test_read_file_error": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
    "test_read_file_with_offset_and_count": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
    "test_record_and_use_performance_metrics": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_integration.py",
    "test_record_connection_attempt": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_anyio.py",
    "test_record_failed_operation": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_metrics.py",
    "test_record_outcome": "/home/barberb/ipfs_kit_py/test/test_routing_system_integration.py",
    "test_record_usage": "/home/barberb/ipfs_kit_py/tests/test_adaptive_optimizer.py",
    "test_recovery_from_wal": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_replication_integration_anyio.py",
    "test_register_message_handler": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_register_node": "/home/barberb/ipfs_kit_py/test/unit/api/test_distributed_controller_fastapi.py",
    "test_register_peer_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_metadata_replication_anyio.py",
    "test_register_routes": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
    "test_register_server_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "test_register_wal_commands": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_cli_integration_anyio.py",
    "test_remove_credential_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_credential_controller_anyio.py",
    "test_remove_credentials": "/home/barberb/ipfs_kit_py/test/unit/core/test_credential_controller.py",
    "test_remove_directory_recursive": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
    "test_remove_file_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
    "test_replicate_content": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_bridge_model.py",
    "test_replicate_webrtc_metadata_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication.py",
    "test_replicate_webrtc_metadata_endpoint_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication_anyio.py",
    "test_replication_policy": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_backends_interop.py",
    "test_replication_policy_thresholds": "/home/barberb/ipfs_kit_py/test/unit/core/test_tiered_cache.py",
    "test_reset": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_reset_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
    "test_resource_mismatched_params": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
    "test_resource_multiple_mismatched_params": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
    "test_resource_template_edge_cases": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/issues/test_141_resource_templates.py",
    "test_resource_with_params": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
    "test_resource_with_untyped_params": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
    "test_result_dictionary_pattern": "/home/barberb/ipfs_kit_py/test/unit/core/test_error_handling.py",
    "test_resume_operation": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced_resumable.py",
    "test_retrieve_content": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_retrieve_content_info": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_retry_exhaustion": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_error_scenarios.py",
    "test_retry_with_demo_method": "/home/barberb/ipfs_kit_py/test/unit/core/test_auto_retry.py",
    "test_return_mock_parameter": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_integrated_get_filesystem.py",
    "test_role_based_behavior": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_kit_mocked.py",
    "test_role_specific_daemon_monitoring": "/home/barberb/ipfs_kit_py/test/unit/core/test_daemon_health_monitor.py",
    "test_role_specific_shutdown": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
    "test_role_switching": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
    "test_route_registration": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
    "test_route_registration_without_websocket": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_peer_websocket_controller_anyio.py",
    "test_run_benchmark": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_webrtc.py",
    "test_run_ipfs_command": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
    "test_run_ipfs_command_error": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
    "test_run_ipfs_command_raw_output": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
    "test_run_ipfs_command_timeout": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
    "test_s3_connection": "/home/barberb/ipfs_kit_py/scripts/setup/setup_local_s3.py",
    "test_s3_controller_http_endpoints": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
    "test_s3_model_parity": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
    "test_s3_status": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_s3.py",
    "test_s3_to_ipfs_success": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_s3_model.py",
    "test_save_car": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_additional_coverage.py",
    "test_scikit_learn_integration": "/home/barberb/ipfs_kit_py/test/unit/core/test_data_science_integration.py",
    "test_seaborn_visualization": "/home/barberb/ipfs_kit_py/test/unit/core/test_data_science_integration.py",
    "test_search_imports": "/home/barberb/ipfs_kit_py/scripts/verify_search_integration.py",
    "test_search_module_exists": "/home/barberb/ipfs_kit_py/tests/integration/search/test_search.py",
    "test_search_text_error_handling": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index_additional.py",
    "test_select_backend_for_small_document": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_integration.py",
    "test_select_backend_for_write": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_algorithms.py",
    "test_select_backend_with_analyzer": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_algorithms.py",
    "test_select_backend_with_client_ip": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_algorithms.py",
    "test_select_backend_with_strategy": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_router.py",
    "test_server": "/home/barberb/ipfs_kit_py/test/unit/core/test_server_response.py",
    "test_server_health": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_server_initialization": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_anyio.py",
    "test_server_initialization_with_normalized_ipfs": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_normalized_ipfs_anyio.py",
    "test_server_integration": "/home/barberb/ipfs_kit_py/test/unit/core/test_integration.py",
    "test_server_routes_registration": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_metadata_replication_anyio.py",
    "test_server_status": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller.py",
    "test_server_tracking": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_controller.py",
    "test_set_quality": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_webrtc.py",
    "test_shuffled_batch_iteration": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
    "test_shutdown": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_peer_websocket_controller_anyio.py",
    "test_simple_echo": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/test_examples.py",
    "test_simulate_operations": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_telemetry_api_integration.py",
    "test_simulation_functions_directly": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_normalized_ipfs.py",
    "test_simulation_mode": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_mfs_operations.py",
    "test_skip_wal_parameter": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_integration.py",
    "test_sse_connection": "/home/barberb/ipfs_kit_py/diagnose_vscode_extension.py",
    "test_sse_endpoint": "/home/barberb/ipfs_kit_py/archive/mcp_start_scripts/verify_sse_endpoints.py",
    "test_stale_lock_file_without_removal": "/home/barberb/ipfs_kit_py/test/unit/core/test_lock_handling_simple.py",
    "test_start_daemon_endpoint": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_daemon_management_anyio.py",
    "test_start_peer": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_start_resumable_read_with_permissions": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_permissions_integration.py",
    "test_start_resumable_write": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced_resumable.py",
    "test_start_resumable_write_permission_denied": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_permissions_integration.py",
    "test_start_server": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_peer_websocket_controller.py",
    "test_start_server_endpoint": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
    "test_start_server_exception": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_peer_websocket_controller_anyio.py",
    "test_start_stream": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_controller.py",
    "test_stat_file_success": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_files_operations_anyio.py",
    "test_state_operation": "/home/barberb/ipfs_kit_py/test/mcp/network_tests/test_mcp_distributed.py",
    "test_static_files": "/home/barberb/ipfs_kit_py/test/unit/core/test_integration.py",
    "test_statistics": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_wal.py",
    "test_stats_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
    "test_status_success": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_filecoin_integration.py",
    "test_stop_daemon_monitor_endpoint": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_daemon_management_anyio.py",
    "test_stop_peer": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_stop_server_exception": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_peer_websocket_controller_anyio.py",
    "test_stop_streaming": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_fix_detailed.py",
    "test_storacha": "/home/barberb/ipfs_kit_py/test/unit/core/test_all_backends.py",
    "test_storacha_credentials": "/home/barberb/ipfs_kit_py/test/mcp/server/test_storacha_mcp.py",
    "test_storacha_integration": "/home/barberb/ipfs_kit_py/applied_patches/fix_all_storacha.py",
    "test_storacha_model_parity": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
    "test_storacha_to_ipfs_success": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_storacha_model.py",
    "test_storacha_to_ipfs_validation_error": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_storacha_model.py",
    "test_storage_api_async": "/home/barberb/ipfs_kit_py/examples/storage_controller_anyio_example.py",
    "test_storage_backends": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_fixed.py",
    "test_storage_controllers_initialization_normal": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_controllers.py",
    "test_storage_health": "/home/barberb/ipfs_kit_py/run_mcp_server_tests.py",
    "test_storage_status_endpoints": "/home/barberb/ipfs_kit_py/run_mcp_server_tests.py",
    "test_storage_type_enum": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
    "test_storage_wal_with_pytest": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_wal.py",
    "test_store_content": "/home/barberb/ipfs_kit_py/test/test_udm_extension.py",
    "test_store_metadata_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_metadata_replication_anyio.py",
    "test_store_metadata_endpoint_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_metadata_replication_anyio.py",
    "test_stream_content": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_fix.py",
    "test_stream_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_controller_anyio.py",
    "test_stream_media": "/home/barberb/ipfs_kit_py/test/functional/streaming/test_streaming_anyio.py",
    "test_stream_media_async": "/home/barberb/ipfs_kit_py/test/functional/streaming/test_streaming_anyio.py",
    "test_stream_to_ipfs_performance": "/home/barberb/ipfs_kit_py/test/performance/test_streaming_performance_anyio.py",
    "test_streaming_imports": "/home/barberb/ipfs_kit_py/scripts/verify_streaming.py",
    "test_swarm_peers": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_kit_mocked.py",
    "test_sync_local_to_mfs": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced.py",
    "test_sync_thread_main": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index_additional.py",
    "test_task_creation_and_distribution": "/home/barberb/ipfs_kit_py/test/unit/core/test_distributed_coordination.py",
    "test_task_management": "/home/barberb/ipfs_kit_py/scripts/verify_migration_controller.py",
    "test_task_operations": "/home/barberb/ipfs_kit_py/test/unit/core/test_distributed_controller.py",
    "test_template_to_resource_conversion": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
    "test_tier_demotion": "/home/barberb/ipfs_kit_py/test/unit/core/test_tiered_storage.py",
    "test_tier_movement_to_storacha": "/home/barberb/ipfs_kit_py/test/unit/core/test_tiered_storage_backends.py",
    "test_tls_connection_setup": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_authentication.py",
    "test_to_pytorch": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
    "test_to_tensorflow": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
    "test_tool_error_details": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
    "test_tracing_integration_async": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_telemetry_api_integration_anyio.py",
    "test_track_cleanup_with_buffer": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_stream_buffer_optimization.py",
    "test_track_model_operation": "/home/barberb/ipfs_kit_py/test/unit/ai_ml/test_wal_telemetry_ai_ml.py",
    "test_transfer_content_without_bridge": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
    "test_transfer_missing_capabilities": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
    "test_unavailable_libp2p": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_unpin": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
    "test_unpin_content_bytes_response": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_fixes_all.py",
    "test_unpin_content_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
    "test_unpin_content_handles_bytes_response": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive_fixes.py",
    "test_unregister_message_handler": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
    "test_update_api_key_restrictions_endpoint": "/home/barberb/ipfs_kit_py/tests/test_api_key_management.py",
    "test_update_dataset": "/home/barberb/ipfs_kit_py/test/integration/ai/test_ai_ml_integrations.py",
    "test_update_model": "/home/barberb/ipfs_kit_py/test/integration/ai/test_ai_ml_integrations.py",
    "test_update_record": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index.py",
    "test_update_stats_nonexistent": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index_additional.py",
    "test_upload_file_error": "/home/barberb/ipfs_kit_py/test/unit/api/test_api.py",
    "test_upload_file_failure_invalid_params": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_s3_model.py",
    "test_user_creation": "/home/barberb/ipfs_kit_py/test/test_auth_extension.py",
    "test_valid_topics": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_pubsub.py",
    "test_validate_cid_format": "/home/barberb/ipfs_kit_py/test/unit/core/test_parameter_validation.py",
    "test_validate_command_arguments": "/home/barberb/ipfs_kit_py/test/unit/core/test_parameter_validation.py",
    "test_validate_required_parameters": "/home/barberb/ipfs_kit_py/test/unit/core/test_parameter_validation.py",
    "test_vector_search": "/home/barberb/ipfs_kit_py/scripts/verify_search_integration.py",
    "test_verify_capability_for_operation": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_authentication.py",
    "test_verify_content_with_nonexistent_backend": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
    "test_verify_metadata_replication_endpoint": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_metadata_replication_anyio.py",
    "test_verify_metadata_replication_endpoint_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_metadata_replication_anyio.py",
    "test_version_command": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
    "test_visualize_telemetry_metrics_async": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_telemetry_api_integration_anyio.py",
    "test_wait_for_completion": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_integration.py",
    "test_wait_for_operation": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_integration.py",
    "test_wait_for_operation_async": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_integration_anyio.py",
    "test_wal_health_command": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_cli_integration.py",
    "test_wal_health_command_sync": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_cli_integration_anyio.py",
    "test_wal_status_command": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_cli_integration.py",
    "test_warn_if_async_context": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_model_anyio.py",
    "test_webrtc_benchmark": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_controller.py",
    "test_webrtc_check": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive.py",
    "test_webrtc_communication": "/home/barberb/ipfs_kit_py/test/mcp/network_tests/test_mcp_communication_anyio.py",
    "test_webrtc_dependency_check": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_fix_detailed.py",
    "test_webrtc_imports": "/home/barberb/ipfs_kit_py/backup_files/test_webrtc_fix.py",
    "test_webrtc_ipfs_integration": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration.py",
    "test_webrtc_ipfs_integration_anyio": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration_anyio.py",
    "test_webrtc_list_connections": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_controller.py",
    "test_webrtc_operations": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_advanced.py",
    "test_websocket_media_stream": "/home/barberb/ipfs_kit_py/test/functional/streaming/test_streaming_anyio.py",
    "test_with_multipart_form": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_controller.py",
    "test_worker_get_pinset": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
    "test_worker_pin_operations": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
    "test_worker_role_initialization": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index_additional.py",
    "test_workflow_integration": "/home/barberb/ipfs_kit_py/test/unit/core/test_data_science_integration.py",
    "test_write_chunk": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced_resumable.py",
    "test_write_file": "/home/barberb/ipfs_kit_py/test_mcp_tools.py",
    "test_write_file_async": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
    "test_write_file_error": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
    "test_write_multiple_chunks": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced_resumable.py",
    "test_write_multiple_chunks_permission_check": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_permissions_integration.py",
    "test_zero_byte_file_stat": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_files_operations_anyio.py",
    "textme": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/examples/fastmcp/text_me.py",
    "timed_response": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_extended.py",
    "to_dict": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_peer_websocket_controller_anyio.py",
    "to_ipfs": "/home/barberb/ipfs_kit_py/scripts/api/filecoin_real_api.py",
    "toggle_daemon": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_lock_handling.py",
    "tool": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/src/mcp/server/fastmcp.py",
    "tool_endpoint": "/home/barberb/ipfs_kit_py/simple_mcp_server.py",
    "tool_handler": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/server_bridge.py",
    "tools_health": "/home/barberb/ipfs_kit_py/mcp_server_fixed_all.py",
    "trace_model": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "track_api_request": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_prometheus.py",
    "track_connection_pool": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_prometheus.py",
    "track_content_get": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
    "track_dht_operation": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
    "track_integration_usage": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
    "track_model_operation": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_telemetry_ai_ml.py",
    "track_streaming_operation": "/home/barberb/ipfs_kit_py/backup_files/streaming_metrics_patch.py",
    "transfer_to_backend": "/home/barberb/ipfs_kit_py/ipfs_kit_py/test_storage_backends_comprehensive.py",
    "unmap_ipfs_from_fs": "/home/barberb/ipfs_kit_py/add_comprehensive_ipfs_tools.py",
    "unmount_ipfs_from_fs": "/home/barberb/ipfs_kit_py/add_comprehensive_ipfs_tools.py",
    "unpin": "/home/barberb/ipfs_kit_py/test/unit/core/mock_ipfs_kit.py",
    "unpin_content": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
    "unregister_peer": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api.py",
    "update_claude_mcp_settings": "/home/barberb/ipfs_kit_py/update_vscode_settings_for_proxy.py",
    "update_comprehensive_features_doc": "/home/barberb/ipfs_kit_py/register_all_controller_tools.py",
    "update_controller_registry": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/integrate_auth.py",
    "update_filecoin_credentials": "/home/barberb/ipfs_kit_py/scripts/setup/setup_local_filecoin.py",
    "update_final_mcp_server": "/home/barberb/ipfs_kit_py/final_integration.py",
    "update_from_dict": "/home/barberb/ipfs_kit_py/ipfs_kit_py/peer_websocket.py",
    "update_imports": "/home/barberb/ipfs_kit_py/patches/mcp/migrate_tests.py",
    "update_imports_in_storage_controller": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_controllers.py",
    "update_integration_script": "/home/barberb/ipfs_kit_py/register_all_controller_tools.py",
    "update_ipfs_comprehensive_tools_doc": "/home/barberb/ipfs_kit_py/register_all_controller_tools.py",
    "update_ipfs_controller": "/home/barberb/ipfs_kit_py/applied_patches/fix_ipfs_cluster_status.py",
    "update_ipfs_tools_registry": "/home/barberb/ipfs_kit_py/add_new_ipfs_tools.py",
    "update_last_used": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/rbac_enhanced.py",
    "update_local_server": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/mcp_discovery_controller_anyio.py",
    "update_local_storage_settings": "/home/barberb/ipfs_kit_py/update_vscode_settings_for_proxy.py",
    "update_mcp_config": "/home/barberb/ipfs_kit_py/scripts/setup/setup_storacha_implementation.py",
    "update_mcp_server": "/home/barberb/ipfs_kit_py/scripts/api/implement_real_apis.py",
    "update_mcp_server_integration": "/home/barberb/ipfs_kit_py/fix_ipfs_mcp_tools_integration.py",
    "update_mcp_server_tools": "/home/barberb/ipfs_kit_py/register_ipfs_tools_with_mcp.py",
    "update_mcp_server_with_proxies": "/home/barberb/ipfs_kit_py/backup_patches/fix_storage_backends.py",
    "update_mcp_server_with_sse": "/home/barberb/ipfs_kit_py/fix_mcp_initialize_endpoint.py",
    "update_node_info": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_prometheus.py",
    "update_pins_method": "/home/barberb/ipfs_kit_py/scripts/fixes/update_pins_method.py",
    "update_prometheus_metrics_async": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_telemetry_ai_ml_anyio.py",
    "update_server_info": "/home/barberb/ipfs_kit_py/test/test_discovery/mcp_discovery_mock.py",
    "update_system_info": "/home/barberb/ipfs_kit_py/debug/mcp/debug_server.py",
    "update_visualizations": "/home/barberb/ipfs_kit_py/scripts/test/webrtc_monitor_integration.py",
    "update_vscode_mcp_config": "/home/barberb/ipfs_kit_py/update_vscode_mcp_config.py",
    "update_vscode_settings": "/home/barberb/ipfs_kit_py/fix_vscode_mcp_integration.py",
    "update_wrapper_attributes": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pydantic/_internal/_validate_call.py",
    "upgrade_to_worker": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
    "upload_file": "/home/barberb/ipfs_kit_py/patches/storage/s3_storage.py",
    "validate_command_args": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
    "validate_name_or_cid": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
    "validates": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/jsonschema/validators.py",
    "vector_search_workflow": "/home/barberb/ipfs_kit_py/examples/high_level_api_ai_ml_example.py",
    "verify_connectivity": "/home/barberb/ipfs_kit_py/verify_enhanced_mcp.py",
    "verify_content": "/home/barberb/ipfs_kit_py/examples/storage_controller_anyio_example.py",
    "verify_enhanced_tools": "/home/barberb/ipfs_kit_py/verify_fs_tool_integration.py",
    "verify_filecoin_integration": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_integration.py",
    "verify_fs_operations": "/home/barberb/ipfs_kit_py/verify_fs_tool_integration.py",
    "verify_health_check": "/home/barberb/ipfs_kit_py/all_in_one_verify.py",
    "verify_ipfs_backend": "/home/barberb/ipfs_kit_py/scripts/verify_ipfs_backend.py",
    "verify_ipfs_cat": "/home/barberb/ipfs_kit_py/all_in_one_verify.py",
    "verify_ipfs_content": "/home/barberb/ipfs_kit_py/test/unit/core/test_fs_journal_fixed.py",
    "verify_ipfs_mcp_tools_integration": "/home/barberb/ipfs_kit_py/update_and_restart_mcp_server.py",
    "verify_ipfs_pin_add": "/home/barberb/ipfs_kit_py/all_in_one_verify.py",
    "verify_ipfs_pin_ls": "/home/barberb/ipfs_kit_py/all_in_one_verify.py",
    "verify_ipfs_pin_rm": "/home/barberb/ipfs_kit_py/all_in_one_verify.py",
    "verify_jsonrpc_support": "/home/barberb/ipfs_kit_py/all_in_one_verify.py",
    "verify_lotus_with_daemon": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_lotus_with_daemon.py",
    "verify_mcp_config": "/home/barberb/ipfs_kit_py/verify_and_restart_mcp.py",
    "verify_mcp_server": "/home/barberb/ipfs_kit_py/scripts/verify_mcp_server.py",
    "verify_server_health": "/home/barberb/ipfs_kit_py/applied_patches/improved_mcp_server.py",
    "verify_simulation_retrieval": "/home/barberb/ipfs_kit_py/test/unit/storage/test_storage_backends_simulation.py",
    "verify_sse_endpoints": "/home/barberb/ipfs_kit_py/verify_enhanced_mcp.py",
    "verify_storage_backends": "/home/barberb/ipfs_kit_py/all_in_one_verify.py",
    "vfs_delete": "/home/barberb/ipfs_kit_py/minimal_mcp_server.py",
    "vfs_mount": "/home/barberb/ipfs_kit_py/minimal_mcp_server.py",
    "vfs_read": "/home/barberb/ipfs_kit_py/minimal_mcp_server.py",
    "vfs_status": "/home/barberb/ipfs_kit_py/minimal_mcp_server.py",
    "vfs_write": "/home/barberb/ipfs_kit_py/minimal_mcp_server.py",
    "visualization_examples": "/home/barberb/ipfs_kit_py/examples/data_science_examples.py",
    "visualize_benchmark": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api/webrtc_benchmark_helpers_anyio.py",
    "visualize_results": "/home/barberb/ipfs_kit_py/examples/probabilistic_data_structures_integration_example.py",
    "vs_code_initialize": "/home/barberb/ipfs_kit_py/direct_mcp_server.py",
    "wait_for_server": "/home/barberb/ipfs_kit_py/scripts/server/start_and_test_anyio_server.py",
    "webrtc_signaling": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/direct_mcp_server.py",
    "websocket_endpoint": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/direct_mcp_server.py",
    "websocket_server": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/src/mcp/server/websocket.py",
    "weights_sum_to_one": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/extensions/routing.py",
    "welcome": "/home/barberb/ipfs_kit_py/examples/storage_controller_anyio_example.py",
    "with_pyarrow_mocks": "/home/barberb/ipfs_kit_py/test/helpers/pyarrow_test_utils.py",
    "write_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py"
  },
  "incomplete_tools": 0,
  "partial_tools": 2538,
  "tool_sources": {},
  "tools": {
    "SelectBackend": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from routing_pb2_grpc.py",
      "has_implementation": true,
      "implementation": "SelectBackend",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/routing/grpc/routing_pb2_grpc.py",
      "name": "SelectBackend",
      "status": "partial - missing schema"
    },
    "TypedDict": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from typing_extensions.py",
      "has_implementation": true,
      "implementation": "TypedDict",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/typing_extensions.py",
      "name": "TypedDict",
      "status": "partial - missing schema"
    },
    "__call__": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "__call__",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "__call__",
      "status": "partial - missing schema"
    },
    "__del__": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "__del__",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "__del__",
      "status": "partial - missing schema"
    },
    "__exit__": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "__exit__",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
      "name": "__exit__",
      "status": "partial - missing schema"
    },
    "__getattr__": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_normalized_ipfs.py",
      "has_implementation": true,
      "implementation": "__getattr__",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/cli_controller_anyio.py",
      "name": "__getattr__",
      "status": "partial - missing schema"
    },
    "__init__": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_compatibility.py",
      "has_implementation": true,
      "implementation": "__init__",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/services/performance_optimization_service.py",
      "name": "__init__",
      "status": "partial - missing schema"
    },
    "__init___v2": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cli_controller_anyio.py",
      "has_implementation": true,
      "implementation": "__init___v2",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/integration.py",
      "name": "__init___v2",
      "status": "partial - missing schema"
    },
    "__new__": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from typing_extensions.py",
      "has_implementation": true,
      "implementation": "__new__",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/typing_extensions.py",
      "name": "__new__",
      "status": "partial - missing schema"
    },
    "__post_init__": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_discovery_mock.py",
      "has_implementation": true,
      "implementation": "__post_init__",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/adaptive_optimizer.py",
      "name": "__post_init__",
      "status": "partial - missing schema"
    },
    "_add_additional_types": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "_add_additional_types",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
      "name": "_add_additional_types",
      "status": "partial - missing schema"
    },
    "_add_basic_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from server_bridge.py",
      "has_implementation": true,
      "implementation": "_add_basic_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/server_bridge.py",
      "name": "_add_basic_endpoints",
      "status": "partial - missing schema"
    },
    "_add_doc": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from six.py",
      "has_implementation": true,
      "implementation": "_add_doc",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
      "name": "_add_doc",
      "status": "partial - missing schema"
    },
    "_add_journal_entry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_tools.py",
      "has_implementation": true,
      "implementation": "_add_journal_entry",
      "implementation_file": "/home/barberb/ipfs_kit_py/fs_journal_tools.py",
      "name": "_add_journal_entry",
      "status": "partial - missing schema"
    },
    "_add_normalized_methods": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from method_normalizer.py",
      "has_implementation": true,
      "implementation": "_add_normalized_methods",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/utils/method_normalizer.py",
      "name": "_add_normalized_methods",
      "status": "partial - missing schema"
    },
    "_aggregate_parameters": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "_aggregate_parameters",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "_aggregate_parameters",
      "status": "partial - missing schema"
    },
    "_async_measure_endpoint_latency": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_performance.py",
      "has_implementation": true,
      "implementation": "_async_measure_endpoint_latency",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_performance.py",
      "name": "_async_measure_endpoint_latency",
      "status": "partial - missing schema"
    },
    "_benchmark_access_pattern": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from benchmark_framework.py",
      "has_implementation": true,
      "implementation": "_benchmark_access_pattern",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark_framework.py",
      "name": "_benchmark_access_pattern",
      "status": "partial - missing schema"
    },
    "_best_version": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from metadata.py",
      "has_implementation": true,
      "implementation": "_best_version",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/distlib/metadata.py",
      "name": "_best_version",
      "status": "partial - missing schema"
    },
    "_call_mfs_method": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_files_operations_anyio.py",
      "has_implementation": true,
      "implementation": "_call_mfs_method",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
      "name": "_call_mfs_method",
      "status": "partial - missing schema"
    },
    "_cf_data_from_bytes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from low_level.py",
      "has_implementation": true,
      "implementation": "_cf_data_from_bytes",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/urllib3/contrib/_securetransport/low_level.py",
      "name": "_cf_data_from_bytes",
      "status": "partial - missing schema"
    },
    "_check_ai_ml_and_call": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "_check_ai_ml_and_call",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "_check_ai_ml_and_call",
      "status": "partial - missing schema"
    },
    "_check_and_install_dependencies": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from huggingface_kit.py",
      "has_implementation": true,
      "implementation": "_check_and_install_dependencies",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/huggingface_kit.py",
      "name": "_check_and_install_dependencies",
      "status": "partial - missing schema"
    },
    "_check_connection_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_connection_pool.py",
      "has_implementation": true,
      "implementation": "_check_connection_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_connection_pool.py",
      "name": "_check_connection_health",
      "status": "partial - missing schema"
    },
    "_check_dns_resolution": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from storacha.py",
      "has_implementation": true,
      "implementation": "_check_dns_resolution",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/storacha.py",
      "name": "_check_dns_resolution",
      "status": "partial - missing schema"
    },
    "_check_fsspec_available": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_integrated_get_filesystem.py",
      "has_implementation": true,
      "implementation": "_check_fsspec_available",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api.py",
      "name": "_check_fsspec_available",
      "status": "partial - missing schema"
    },
    "_check_generic": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from typing_extensions.py",
      "has_implementation": true,
      "implementation": "_check_generic",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/typing_extensions.py",
      "name": "_check_generic",
      "status": "partial - missing schema"
    },
    "_check_graph_query_and_call": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "_check_graph_query_and_call",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "_check_graph_query_and_call",
      "status": "partial - missing schema"
    },
    "_check_ipfs_available": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_bridge.py",
      "has_implementation": true,
      "implementation": "_check_ipfs_available",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
      "name": "_check_ipfs_available",
      "status": "partial - missing schema"
    },
    "_check_tier_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from hierarchical_storage_methods.py",
      "has_implementation": true,
      "implementation": "_check_tier_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/hierarchical_storage_methods.py",
      "name": "_check_tier_health",
      "status": "partial - missing schema"
    },
    "_check_version_and_capabilities": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from lassie_storage.py",
      "has_implementation": true,
      "implementation": "_check_version_and_capabilities",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/enhanced_lassie_storage.py",
      "name": "_check_version_and_capabilities",
      "status": "partial - missing schema"
    },
    "_clean_cache": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from storacha_backend.py",
      "has_implementation": true,
      "implementation": "_clean_cache",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/s3_backend.py",
      "name": "_clean_cache",
      "status": "partial - missing schema"
    },
    "_cleanup": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server_with_watcher.py",
      "has_implementation": true,
      "implementation": "_cleanup",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cluster_state.py",
      "name": "_cleanup",
      "status": "partial - missing schema"
    },
    "_cleanup_temp_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server_with_tools.py",
      "has_implementation": true,
      "implementation": "_cleanup_temp_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/direct_mcp_server.py",
      "name": "_cleanup_temp_files",
      "status": "partial - missing schema"
    },
    "_close_mmap_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cache_manager.py",
      "has_implementation": true,
      "implementation": "_close_mmap_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/persistence/cache_manager.py",
      "name": "_close_mmap_files",
      "status": "partial - missing schema"
    },
    "_cmd_list": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_cli.py",
      "has_implementation": true,
      "implementation": "_cmd_list",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_cli.py",
      "name": "_cmd_list",
      "status": "partial - missing schema"
    },
    "_collect_process_metrics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_monitoring.py",
      "has_implementation": true,
      "implementation": "_collect_process_metrics",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/mcp_monitoring.py",
      "name": "_collect_process_metrics",
      "status": "partial - missing schema"
    },
    "_collect_role_permissions": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from rbac_enhanced.py",
      "has_implementation": true,
      "implementation": "_collect_role_permissions",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/rbac_enhanced.py",
      "name": "_collect_role_permissions",
      "status": "partial - missing schema"
    },
    "_configure_task_distribution": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from role_manager.py",
      "has_implementation": true,
      "implementation": "_configure_task_distribution",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cluster/role_manager.py",
      "name": "_configure_task_distribution",
      "status": "partial - missing schema"
    },
    "_could_be_inserted_optional": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from typing_extensions.py",
      "has_implementation": true,
      "implementation": "_could_be_inserted_optional",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/typing_extensions.py",
      "name": "_could_be_inserted_optional",
      "status": "partial - missing schema"
    },
    "_create_communicator": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from protocol_integration.py",
      "has_implementation": true,
      "implementation": "_create_communicator",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/protocol_integration.py",
      "name": "_create_communicator",
      "status": "partial - missing schema"
    },
    "_create_default_schema": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from arrow_metadata_index.py",
      "has_implementation": true,
      "implementation": "_create_default_schema",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/arrow_metadata_index.py",
      "name": "_create_default_schema",
      "status": "partial - missing schema"
    },
    "_create_default_static_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from dashboard.py",
      "has_implementation": true,
      "implementation": "_create_default_static_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/dashboard.py",
      "name": "_create_default_static_files",
      "status": "partial - missing schema"
    },
    "_create_ipfs_mock": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_bridge_model.py",
      "has_implementation": true,
      "implementation": "_create_ipfs_mock",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_bridge_model.py",
      "name": "_create_ipfs_mock",
      "status": "partial - missing schema"
    },
    "_create_metrics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from prometheus_exporter.py",
      "has_implementation": true,
      "implementation": "_create_metrics",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/prometheus_exporter.py",
      "name": "_create_metrics",
      "status": "partial - missing schema"
    },
    "_create_mock_filecoin": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_high_level_api.py",
      "has_implementation": true,
      "implementation": "_create_mock_filecoin",
      "implementation_file": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
      "name": "_create_mock_filecoin",
      "status": "partial - missing schema"
    },
    "_create_mock_implementation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_backend.py",
      "has_implementation": true,
      "implementation": "_create_mock_implementation",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_backend.py",
      "name": "_create_mock_implementation",
      "status": "partial - missing schema"
    },
    "_create_mock_replication_manager": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_metadata_replication.py",
      "has_implementation": true,
      "implementation": "_create_mock_replication_manager",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication.py",
      "name": "_create_mock_replication_manager",
      "status": "partial - missing schema"
    },
    "_create_mock_webrtc_manager": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_metadata_replication_anyio.py",
      "has_implementation": true,
      "implementation": "_create_mock_webrtc_manager",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication_anyio.py",
      "name": "_create_mock_webrtc_manager",
      "status": "partial - missing schema"
    },
    "_create_new_registry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "_create_new_registry",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "_create_new_registry",
      "status": "partial - missing schema"
    },
    "_create_routing_static_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from routing_dashboard.py",
      "has_implementation": true,
      "implementation": "_create_routing_static_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/routing_dashboard.py",
      "name": "_create_routing_static_files",
      "status": "partial - missing schema"
    },
    "_create_s3_mock": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_bridge_model.py",
      "has_implementation": true,
      "implementation": "_create_s3_mock",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_bridge_model.py",
      "name": "_create_s3_mock",
      "status": "partial - missing schema"
    },
    "_create_test_data": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipld_knowledge_graph.py",
      "has_implementation": true,
      "implementation": "_create_test_data",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_knowledge_graph.py",
      "name": "_create_test_data",
      "status": "partial - missing schema"
    },
    "_create_test_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from benchmark.py",
      "has_implementation": true,
      "implementation": "_create_test_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark.py",
      "name": "_create_test_files",
      "status": "partial - missing schema"
    },
    "_create_test_network": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_mcp_discovery_mock.py",
      "has_implementation": true,
      "implementation": "_create_test_network",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_discovery/enhanced_mcp_discovery_mock.py",
      "name": "_create_test_network",
      "status": "partial - missing schema"
    },
    "_create_trained_model_outputs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "_create_trained_model_outputs",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "_create_trained_model_outputs",
      "status": "partial - missing schema"
    },
    "_deal_monitoring_thread": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from advanced_filecoin.py",
      "has_implementation": true,
      "implementation": "_deal_monitoring_thread",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/advanced_filecoin.py",
      "name": "_deal_monitoring_thread",
      "status": "partial - missing schema"
    },
    "_deep_update": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_mcp_server.py",
      "has_implementation": true,
      "implementation": "_deep_update",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/enhanced_mcp_server.py",
      "name": "_deep_update",
      "status": "partial - missing schema"
    },
    "_default_key_normalizer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from poolmanager.py",
      "has_implementation": true,
      "implementation": "_default_key_normalizer",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/urllib3/poolmanager.py",
      "name": "_default_key_normalizer",
      "status": "partial - missing schema"
    },
    "_deliver_message_to_handlers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from gossipsub_protocol.py",
      "has_implementation": true,
      "implementation": "_deliver_message_to_handlers",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/gossipsub_protocol.py",
      "name": "_deliver_message_to_handlers",
      "status": "partial - missing schema"
    },
    "_detect_changes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "_detect_changes",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
      "name": "_detect_changes",
      "status": "partial - missing schema"
    },
    "_detect_features": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_model.py",
      "has_implementation": true,
      "implementation": "_detect_features",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/models/ipfs_model.py",
      "name": "_detect_features",
      "status": "partial - missing schema"
    },
    "_discover_streaming_tests": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_test_runner.py",
      "has_implementation": true,
      "implementation": "_discover_streaming_tests",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/utils/mcp/mcp_test_runner.py",
      "name": "_discover_streaming_tests",
      "status": "partial - missing schema"
    },
    "_discover_unit_tests": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_test_runner.py",
      "has_implementation": true,
      "implementation": "_discover_unit_tests",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/utils/mcp/mcp_test_runner.py",
      "name": "_discover_unit_tests",
      "status": "partial - missing schema"
    },
    "_dnsname_match": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ssl_match_hostname.py",
      "has_implementation": true,
      "implementation": "_dnsname_match",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/distlib/compat.py",
      "name": "_dnsname_match",
      "status": "partial - missing schema"
    },
    "_ensure_daemon_running": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "_ensure_daemon_running",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "_ensure_daemon_running",
      "status": "partial - missing schema"
    },
    "_ensure_directories": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from daemon_manager.py",
      "has_implementation": true,
      "implementation": "_ensure_directories",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/daemon/daemon_manager.py",
      "name": "_ensure_directories",
      "status": "partial - missing schema"
    },
    "_ensure_metadata_dir": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_metadata.py",
      "has_implementation": true,
      "implementation": "_ensure_metadata_dir",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/metadata/ipfs_metadata.py",
      "name": "_ensure_metadata_dir",
      "status": "partial - missing schema"
    },
    "_ensure_methods": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_advanced.py",
      "has_implementation": true,
      "implementation": "_ensure_methods",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced.py",
      "name": "_ensure_methods",
      "status": "partial - missing schema"
    },
    "_exchange_server_info": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_mcp_discovery_mock.py",
      "has_implementation": true,
      "implementation": "_exchange_server_info",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_discovery/enhanced_mcp_discovery_mock.py",
      "name": "_exchange_server_info",
      "status": "partial - missing schema"
    },
    "_fill_buffer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_streaming.py",
      "has_implementation": true,
      "implementation": "_fill_buffer",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_streaming.py",
      "name": "_fill_buffer",
      "status": "partial - missing schema"
    },
    "_fn_matches": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from __init__.py",
      "has_implementation": true,
      "implementation": "_fn_matches",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pygments/lexers/__init__.py",
      "name": "_fn_matches",
      "status": "partial - missing schema"
    },
    "_generate_fix_recommendations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_api_fixed.py",
      "has_implementation": true,
      "implementation": "_generate_fix_recommendations",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_fixed.py",
      "name": "_generate_fix_recommendations",
      "status": "partial - missing schema"
    },
    "_get_current_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from storacha_backend.py",
      "has_implementation": true,
      "implementation": "_get_current_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/storacha_backend.py",
      "name": "_get_current_endpoint",
      "status": "partial - missing schema"
    },
    "_get_enhanced_dht_discovery": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from p2p_integration.py",
      "has_implementation": true,
      "implementation": "_get_enhanced_dht_discovery",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/p2p_integration.py",
      "name": "_get_enhanced_dht_discovery",
      "status": "partial - missing schema"
    },
    "_get_initial_peers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from recursive_routing.py",
      "has_implementation": true,
      "implementation": "_get_initial_peers",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/recursive_routing.py",
      "name": "_get_initial_peers",
      "status": "partial - missing schema"
    },
    "_get_ipfs_backend": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_advanced_router.py",
      "has_implementation": true,
      "implementation": "_get_ipfs_backend",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_advanced_router.py",
      "name": "_get_ipfs_backend",
      "status": "partial - missing schema"
    },
    "_get_ipfs_client": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_tools.py",
      "has_implementation": true,
      "implementation": "_get_ipfs_client",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_mcp_tools.py",
      "name": "_get_ipfs_client",
      "status": "partial - missing schema"
    },
    "_get_ipfs_py_class": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_backend_implementation.py",
      "has_implementation": true,
      "implementation": "_get_ipfs_py_class",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_backend.py",
      "name": "_get_ipfs_py_class",
      "status": "partial - missing schema"
    },
    "_get_local_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "_get_local_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
      "name": "_get_local_files",
      "status": "partial - missing schema"
    },
    "_get_model_for_training": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "_get_model_for_training",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "_get_model_for_training",
      "status": "partial - missing schema"
    },
    "_get_npx_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cli.py",
      "has_implementation": true,
      "implementation": "_get_npx_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/src/mcp/cli/cli.py",
      "name": "_get_npx_command",
      "status": "partial - missing schema"
    },
    "_get_s3_client": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from multi_backend_fs_integration.py",
      "has_implementation": true,
      "implementation": "_get_s3_client",
      "implementation_file": "/home/barberb/ipfs_kit_py/multi_backend_fs_integration.py",
      "name": "_get_s3_client",
      "status": "partial - missing schema"
    },
    "_get_worker_capabilities": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "_get_worker_capabilities",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "_get_worker_capabilities",
      "status": "partial - missing schema"
    },
    "_get_working_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from storacha_kit.py",
      "has_implementation": true,
      "implementation": "_get_working_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_storacha_kit.py",
      "name": "_get_working_endpoint",
      "status": "partial - missing schema"
    },
    "_handle_bitswap_want": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_peer.py",
      "has_implementation": true,
      "implementation": "_handle_bitswap_want",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p_peer.py",
      "name": "_handle_bitswap_want",
      "status": "partial - missing schema"
    },
    "_handle_content_miss_with_libp2p": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit_integration.py",
      "has_implementation": true,
      "implementation": "_handle_content_miss_with_libp2p",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/ipfs_kit_integration.py",
      "name": "_handle_content_miss_with_libp2p",
      "status": "partial - missing schema"
    },
    "_handle_dht_findpeer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_mocks.py",
      "has_implementation": true,
      "implementation": "_handle_dht_findpeer",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
      "name": "_handle_dht_findpeer",
      "status": "partial - missing schema"
    },
    "_handle_dht_findprovs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_mocks.py",
      "has_implementation": true,
      "implementation": "_handle_dht_findprovs",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
      "name": "_handle_dht_findprovs",
      "status": "partial - missing schema"
    },
    "_handle_discovery_message": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_peer.py",
      "has_implementation": true,
      "implementation": "_handle_discovery_message",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p_peer.py",
      "name": "_handle_discovery_message",
      "status": "partial - missing schema"
    },
    "_handle_list_known_peers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_mocks.py",
      "has_implementation": true,
      "implementation": "_handle_list_known_peers",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
      "name": "_handle_list_known_peers",
      "status": "partial - missing schema"
    },
    "_handle_name_publish": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_mocks.py",
      "has_implementation": true,
      "implementation": "_handle_name_publish",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
      "name": "_handle_name_publish",
      "status": "partial - missing schema"
    },
    "_handle_name_resolve": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_mocks.py",
      "has_implementation": true,
      "implementation": "_handle_name_resolve",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
      "name": "_handle_name_resolve",
      "status": "partial - missing schema"
    },
    "_handle_parameter_update": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "_handle_parameter_update",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "_handle_parameter_update",
      "status": "partial - missing schema"
    },
    "_handle_partition_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from metadata_sync_handler.py",
      "has_implementation": true,
      "implementation": "_handle_partition_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/metadata_sync_handler.py",
      "name": "_handle_partition_request",
      "status": "partial - missing schema"
    },
    "_handle_ping": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_test_fixtures.py",
      "has_implementation": true,
      "implementation": "_handle_ping",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_fixtures/libp2p_test_fixtures.py",
      "name": "_handle_ping",
      "status": "partial - missing schema"
    },
    "_handle_rest_api": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integration.py",
      "has_implementation": true,
      "implementation": "_handle_rest_api",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/integration.py",
      "name": "_handle_rest_api",
      "status": "partial - missing schema"
    },
    "_handle_sync_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from protocol_extensions.py",
      "has_implementation": true,
      "implementation": "_handle_sync_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/protocol_extensions.py",
      "name": "_handle_sync_request",
      "status": "partial - missing schema"
    },
    "_handle_worker_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "_handle_worker_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "_handle_worker_failure",
      "status": "partial - missing schema"
    },
    "_import_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cli.py",
      "has_implementation": true,
      "implementation": "_import_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/src/mcp/cli/cli.py",
      "name": "_import_server",
      "status": "partial - missing schema"
    },
    "_init_arrow_state": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cluster_management.py",
      "has_implementation": true,
      "implementation": "_init_arrow_state",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cluster_management.py",
      "name": "_init_arrow_state",
      "status": "partial - missing schema"
    },
    "_init_components": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integration.py",
      "has_implementation": true,
      "implementation": "_init_components",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/integration.py",
      "name": "_init_components",
      "status": "partial - missing schema"
    },
    "_init_metadata_replication": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from high_level_api.py",
      "has_implementation": true,
      "implementation": "_init_metadata_replication",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api.py",
      "name": "_init_metadata_replication",
      "status": "partial - missing schema"
    },
    "_init_new_cluster": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from service.py",
      "has_implementation": true,
      "implementation": "_init_new_cluster",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/ha/service.py",
      "name": "_init_new_cluster",
      "status": "partial - missing schema"
    },
    "_init_storage_models": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from storage_manager.py",
      "has_implementation": true,
      "implementation": "_init_storage_models",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/models/storage_manager.py",
      "name": "_init_storage_models",
      "status": "partial - missing schema"
    },
    "_init_task_group": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_peer.py",
      "has_implementation": true,
      "implementation": "_init_task_group",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p_peer.py",
      "name": "_init_task_group",
      "status": "partial - missing schema"
    },
    "_init_tiered_backend": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_replication.py",
      "has_implementation": true,
      "implementation": "_init_tiered_backend",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_replication.py",
      "name": "_init_tiered_backend",
      "status": "partial - missing schema"
    },
    "_init_ui": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from unified_dashboard_example.py",
      "has_implementation": true,
      "implementation": "_init_ui",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/unified_dashboard_example.py",
      "name": "_init_ui",
      "status": "partial - missing schema"
    },
    "_init_vector_search": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_search.py",
      "has_implementation": true,
      "implementation": "_init_vector_search",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/search/mcp_search.py",
      "name": "_init_vector_search",
      "status": "partial - missing schema"
    },
    "_initialize_connection": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_py.py",
      "has_implementation": true,
      "implementation": "_initialize_connection",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs/ipfs_py.py",
      "name": "_initialize_connection",
      "status": "partial - missing schema"
    },
    "_initialize_db": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_tools.py",
      "has_implementation": true,
      "implementation": "_initialize_db",
      "implementation_file": "/home/barberb/ipfs_kit_py/fs_journal_tools.py",
      "name": "_initialize_db",
      "status": "partial - missing schema"
    },
    "_initialize_event_loop": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_dht_discovery.py",
      "has_implementation": true,
      "implementation": "_initialize_event_loop",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/enhanced_dht_discovery.py",
      "name": "_initialize_event_loop",
      "status": "partial - missing schema"
    },
    "_initialize_format_handlers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "_initialize_format_handlers",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "_initialize_format_handlers",
      "status": "partial - missing schema"
    },
    "_initialize_master_security": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cluster_authentication.py",
      "has_implementation": true,
      "implementation": "_initialize_master_security",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cluster_authentication.py",
      "name": "_initialize_master_security",
      "status": "partial - missing schema"
    },
    "_initialize_role_requirements": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cluster_dynamic_roles.py",
      "has_implementation": true,
      "implementation": "_initialize_role_requirements",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cluster_dynamic_roles.py",
      "name": "_initialize_role_requirements",
      "status": "partial - missing schema"
    },
    "_initialize_source": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_streaming.py",
      "has_implementation": true,
      "implementation": "_initialize_source",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_streaming.py",
      "name": "_initialize_source",
      "status": "partial - missing schema"
    },
    "_initialize_topology_optimizer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_multi_peer.py",
      "has_implementation": true,
      "implementation": "_initialize_topology_optimizer",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_multi_peer.py",
      "name": "_initialize_topology_optimizer",
      "status": "partial - missing schema"
    },
    "_initialize_ucan_keys": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cluster_authentication.py",
      "has_implementation": true,
      "implementation": "_initialize_ucan_keys",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cluster_authentication.py",
      "name": "_initialize_ucan_keys",
      "status": "partial - missing schema"
    },
    "_initialize_vector_index": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipld_knowledge_graph.py",
      "has_implementation": true,
      "implementation": "_initialize_vector_index",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipld_knowledge_graph.py",
      "name": "_initialize_vector_index",
      "status": "partial - missing schema"
    },
    "_key_to_filename": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server_anyio.py",
      "has_implementation": true,
      "implementation": "_key_to_filename",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server_anyio.py",
      "name": "_key_to_filename",
      "status": "partial - missing schema"
    },
    "_kill_existing_servers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_features.py",
      "has_implementation": true,
      "implementation": "_kill_existing_servers",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_features.py",
      "name": "_kill_existing_servers",
      "status": "partial - missing schema"
    },
    "_list_mock_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_huggingface_storage.py",
      "has_implementation": true,
      "implementation": "_list_mock_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/enhanced_huggingface_storage.py",
      "name": "_list_mock_files",
      "status": "partial - missing schema"
    },
    "_load_all_credentials": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from credential_manager.py",
      "has_implementation": true,
      "implementation": "_load_all_credentials",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/credential_manager.py",
      "name": "_load_all_credentials",
      "status": "partial - missing schema"
    },
    "_load_ipfs_implementation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_backend.py",
      "has_implementation": true,
      "implementation": "_load_ipfs_implementation",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_backend.py",
      "name": "_load_ipfs_implementation",
      "status": "partial - missing schema"
    },
    "_load_or_create_identity": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_peer.py",
      "has_implementation": true,
      "implementation": "_load_or_create_identity",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p_peer.py",
      "name": "_load_or_create_identity",
      "status": "partial - missing schema"
    },
    "_load_or_create_schema_registry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipld_knowledge_graph.py",
      "has_implementation": true,
      "implementation": "_load_or_create_schema_registry",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipld_knowledge_graph.py",
      "name": "_load_or_create_schema_registry",
      "status": "partial - missing schema"
    },
    "_load_plugins": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_high_level_api.py",
      "has_implementation": true,
      "implementation": "_load_plugins",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api_fixed.py",
      "name": "_load_plugins",
      "status": "partial - missing schema"
    },
    "_load_policies": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from migration_controller.py",
      "has_implementation": true,
      "implementation": "_load_policies",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/migration_tools/migration_controller.py",
      "name": "_load_policies",
      "status": "partial - missing schema"
    },
    "_log_metrics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_monitoring.py",
      "has_implementation": true,
      "implementation": "_log_metrics",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/mcp_monitoring.py",
      "name": "_log_metrics",
      "status": "partial - missing schema"
    },
    "_log_network_event": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from network_simulator.py",
      "has_implementation": true,
      "implementation": "_log_network_event",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/test/network_simulator.py",
      "name": "_log_network_event",
      "status": "partial - missing schema"
    },
    "_make_api_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from filecoin_storage.py",
      "has_implementation": true,
      "implementation": "_make_api_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/storage/filecoin_storage.py",
      "name": "_make_api_request",
      "status": "partial - missing schema"
    },
    "_measure_endpoint_latency": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_performance.py",
      "has_implementation": true,
      "implementation": "_measure_endpoint_latency",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_performance.py",
      "name": "_measure_endpoint_latency",
      "status": "partial - missing schema"
    },
    "_migrate_to_tier": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from hierarchical_storage_methods.py",
      "has_implementation": true,
      "implementation": "_migrate_to_tier",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/hierarchical_storage_methods.py",
      "name": "_migrate_to_tier",
      "status": "partial - missing schema"
    },
    "_mock_hf_hub_download": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_huggingface_kit.py",
      "has_implementation": true,
      "implementation": "_mock_hf_hub_download",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/ai_ml/test_huggingface_kit.py",
      "name": "_mock_hf_hub_download",
      "status": "partial - missing schema"
    },
    "_on_become_primary": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integration.py",
      "has_implementation": true,
      "implementation": "_on_become_primary",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/ha/integration.py",
      "name": "_on_become_primary",
      "status": "partial - missing schema"
    },
    "_optimize_for_master": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from role_manager.py",
      "has_implementation": true,
      "implementation": "_optimize_for_master",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cluster/role_manager.py",
      "name": "_optimize_for_master",
      "status": "partial - missing schema"
    },
    "_parents": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from __init__.py",
      "has_implementation": true,
      "implementation": "_parents",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "name": "_parents",
      "status": "partial - missing schema"
    },
    "_perform_final_cleanup": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_controller_cleanup.py",
      "has_implementation": true,
      "implementation": "_perform_final_cleanup",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/webrtc_controller.py",
      "name": "_perform_final_cleanup",
      "status": "partial - missing schema"
    },
    "_periodic_dht_refresh": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_peer.py",
      "has_implementation": true,
      "implementation": "_periodic_dht_refresh",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p_peer.py",
      "name": "_periodic_dht_refresh",
      "status": "partial - missing schema"
    },
    "_persist_indexes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipld_knowledge_graph.py",
      "has_implementation": true,
      "implementation": "_persist_indexes",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipld_knowledge_graph.py",
      "name": "_persist_indexes",
      "status": "partial - missing schema"
    },
    "_print_startup_message": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from file_watcher.py",
      "has_implementation": true,
      "implementation": "_print_startup_message",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/utils/file_watcher.py",
      "name": "_print_startup_message",
      "status": "partial - missing schema"
    },
    "_print_summary": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_runner.py",
      "has_implementation": true,
      "implementation": "_print_summary",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/test/test_runner.py",
      "name": "_print_summary",
      "status": "partial - missing schema"
    },
    "_progressive_fetch": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_streaming.py",
      "has_implementation": true,
      "implementation": "_progressive_fetch",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_streaming.py",
      "name": "_progressive_fetch",
      "status": "partial - missing schema"
    },
    "_push_new_state": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from resolvers.py",
      "has_implementation": true,
      "implementation": "_push_new_state",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/resolvelib/resolvers.py",
      "name": "_push_new_state",
      "status": "partial - missing schema"
    },
    "_put_in_tier": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from hierarchical_storage_methods.py",
      "has_implementation": true,
      "implementation": "_put_in_tier",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/hierarchical_storage_methods.py",
      "name": "_put_in_tier",
      "status": "partial - missing schema"
    },
    "_raise_not_found_for_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from async_ipfs.py",
      "has_implementation": true,
      "implementation": "_raise_not_found_for_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/ipfsspec/ipfsspec/async_ipfs.py",
      "name": "_raise_not_found_for_status",
      "status": "partial - missing schema"
    },
    "_read_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_streaming_performance.py",
      "has_implementation": true,
      "implementation": "_read_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/performance/test_streaming_performance_anyio.py",
      "name": "_read_file",
      "status": "partial - missing schema"
    },
    "_recover_metadata_backup": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cache_manager.py",
      "has_implementation": true,
      "implementation": "_recover_metadata_backup",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/persistence/cache_manager.py",
      "name": "_recover_metadata_backup",
      "status": "partial - missing schema"
    },
    "_register_auth_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from server_integration.py",
      "has_implementation": true,
      "implementation": "_register_auth_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/server_integration.py",
      "name": "_register_auth_endpoints",
      "status": "partial - missing schema"
    },
    "_register_backends": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from multimedia_storage_app.py",
      "has_implementation": true,
      "implementation": "_register_backends",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/examples/multimedia_storage_app.py",
      "name": "_register_backends",
      "status": "partial - missing schema"
    },
    "_register_data_provider": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from routing_dashboard.py",
      "has_implementation": true,
      "implementation": "_register_data_provider",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/routing_dashboard.py",
      "name": "_register_data_provider",
      "status": "partial - missing schema"
    },
    "_register_exception_handler": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from unified_mcp_server.py",
      "has_implementation": true,
      "implementation": "_register_exception_handler",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhanced_mcp_server_fixed.py",
      "name": "_register_exception_handler",
      "status": "partial - missing schema"
    },
    "_register_migration_tool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from migration_controller.py",
      "has_implementation": true,
      "implementation": "_register_migration_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/migration_tools/migration_controller.py",
      "name": "_register_migration_tool",
      "status": "partial - missing schema"
    },
    "_register_routes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server_anyio.py",
      "has_implementation": true,
      "implementation": "_register_routes",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server_anyio.py",
      "name": "_register_routes",
      "status": "partial - missing schema"
    },
    "_register_websocket_routes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from streaming_security_integration.py",
      "has_implementation": true,
      "implementation": "_register_websocket_routes",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/streaming_security_integration.py",
      "name": "_register_websocket_routes",
      "status": "partial - missing schema"
    },
    "_release_connection": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_connection_pool.py",
      "has_implementation": true,
      "implementation": "_release_connection",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_connection_pool.py",
      "name": "_release_connection",
      "status": "partial - missing schema"
    },
    "_reload_version": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from __init__.py",
      "has_implementation": true,
      "implementation": "_reload_version",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "name": "_reload_version",
      "status": "partial - missing schema"
    },
    "_report_training_completion": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "_report_training_completion",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "_report_training_completion",
      "status": "partial - missing schema"
    },
    "_retrieve_from_peer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from recursive_routing.py",
      "has_implementation": true,
      "implementation": "_retrieve_from_peer",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/recursive_routing.py",
      "name": "_retrieve_from_peer",
      "status": "partial - missing schema"
    },
    "_run_add_benchmarks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from benchmark_framework.py",
      "has_implementation": true,
      "implementation": "_run_add_benchmarks",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark_framework.py",
      "name": "_run_add_benchmarks",
      "status": "partial - missing schema"
    },
    "_run_async_test": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controller_integration_anyio.py",
      "has_implementation": true,
      "implementation": "_run_async_test",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration_anyio.py",
      "name": "_run_async_test",
      "status": "partial - missing schema"
    },
    "_run_cat_benchmarks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from benchmark_framework.py",
      "has_implementation": true,
      "implementation": "_run_cat_benchmarks",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark_framework.py",
      "name": "_run_cat_benchmarks",
      "status": "partial - missing schema"
    },
    "_run_network_benchmarks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from benchmark_framework.py",
      "has_implementation": true,
      "implementation": "_run_network_benchmarks",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark_framework.py",
      "name": "_run_network_benchmarks",
      "status": "partial - missing schema"
    },
    "_run_pin_benchmarks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from benchmark_framework.py",
      "has_implementation": true,
      "implementation": "_run_pin_benchmarks",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark_framework.py",
      "name": "_run_pin_benchmarks",
      "status": "partial - missing schema"
    },
    "_run_simulation_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_telemetry_api_example.py",
      "has_implementation": true,
      "implementation": "_run_simulation_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/wal_telemetry_api_example.py",
      "name": "_run_simulation_async",
      "status": "partial - missing schema"
    },
    "_run_with_profile": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from performance_profiling.py",
      "has_implementation": true,
      "implementation": "_run_with_profile",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/performance_profiling.py",
      "name": "_run_with_profile",
      "status": "partial - missing schema"
    },
    "_save_content_registry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from manager.py",
      "has_implementation": true,
      "implementation": "_save_content_registry",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/manager.py",
      "name": "_save_content_registry",
      "status": "partial - missing schema"
    },
    "_save_metrics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from performance_monitor.py",
      "has_implementation": true,
      "implementation": "_save_metrics",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/monitoring/performance_monitor.py",
      "name": "_save_metrics",
      "status": "partial - missing schema"
    },
    "_schedule_tasks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from unified_dashboard_example.py",
      "has_implementation": true,
      "implementation": "_schedule_tasks",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/unified_dashboard_example.py",
      "name": "_schedule_tasks",
      "status": "partial - missing schema"
    },
    "_secure_default_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from server_integration.py",
      "has_implementation": true,
      "implementation": "_secure_default_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/server_integration.py",
      "name": "_secure_default_endpoints",
      "status": "partial - missing schema"
    },
    "_setup_ai_ml_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "_setup_ai_ml_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "_setup_ai_ml_integration",
      "status": "partial - missing schema"
    },
    "_setup_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controller_integration_anyio.py",
      "has_implementation": true,
      "implementation": "_setup_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration_anyio.py",
      "name": "_setup_async",
      "status": "partial - missing schema"
    },
    "_setup_cluster_management": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "_setup_cluster_management",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "_setup_cluster_management",
      "status": "partial - missing schema"
    },
    "_setup_event_handlers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_webrtc_aiortc_client.py",
      "has_implementation": true,
      "implementation": "_setup_event_handlers",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/mcp_webrtc_aiortc_client.py",
      "name": "_setup_event_handlers",
      "status": "partial - missing schema"
    },
    "_setup_file_watcher": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_server_runner.py",
      "has_implementation": true,
      "implementation": "_setup_file_watcher",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/server/run_server.py",
      "name": "_setup_file_watcher",
      "status": "partial - missing schema"
    },
    "_setup_ipld_extension": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "_setup_ipld_extension",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "_setup_ipld_extension",
      "status": "partial - missing schema"
    },
    "_setup_knowledge_graph": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "_setup_knowledge_graph",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "_setup_knowledge_graph",
      "status": "partial - missing schema"
    },
    "_setup_logging": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from server_bridge.py",
      "has_implementation": true,
      "implementation": "_setup_logging",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/server_bridge.py",
      "name": "_setup_logging",
      "status": "partial - missing schema"
    },
    "_setup_lotus_path": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from install_lotus.py",
      "has_implementation": true,
      "implementation": "_setup_lotus_path",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/install/install_lotus.py",
      "name": "_setup_lotus_path",
      "status": "partial - missing schema"
    },
    "_setup_middlewares": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from auth_system_integration.py",
      "has_implementation": true,
      "implementation": "_setup_middlewares",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/auth_system_integration.py",
      "name": "_setup_middlewares",
      "status": "partial - missing schema"
    },
    "_setup_minimal_tracing": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_telemetry_tracing.py",
      "has_implementation": true,
      "implementation": "_setup_minimal_tracing",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_telemetry_tracing.py",
      "name": "_setup_minimal_tracing",
      "status": "partial - missing schema"
    },
    "_setup_mock_responses": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_mfs_operations.py",
      "has_implementation": true,
      "implementation": "_setup_mock_responses",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_mfs_operations.py",
      "name": "_setup_mock_responses",
      "status": "partial - missing schema"
    },
    "_setup_mock_storage": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_huggingface_storage.py",
      "has_implementation": true,
      "implementation": "_setup_mock_storage",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/enhanced_huggingface_storage.py",
      "name": "_setup_mock_storage",
      "status": "partial - missing schema"
    },
    "_split_file_into_chunks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "_split_file_into_chunks",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "_split_file_into_chunks",
      "status": "partial - missing schema"
    },
    "_start_cache_cleanup_thread": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from server_bridge.py",
      "has_implementation": true,
      "implementation": "_start_cache_cleanup_thread",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/server_bridge.py",
      "name": "_start_cache_cleanup_thread",
      "status": "partial - missing schema"
    },
    "_start_cleanup_task": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_controller.py",
      "has_implementation": true,
      "implementation": "_start_cleanup_task",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/webrtc_controller.py",
      "name": "_start_cleanup_task",
      "status": "partial - missing schema"
    },
    "_start_coordination": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "_start_coordination",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "_start_coordination",
      "status": "partial - missing schema"
    },
    "_start_daemon": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_compatibility.py",
      "has_implementation": true,
      "implementation": "_start_daemon",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/mcp_compatibility.py",
      "name": "_start_daemon",
      "status": "partial - missing schema"
    },
    "_start_health_check": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from daemon_manager.py",
      "has_implementation": true,
      "implementation": "_start_health_check",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/daemon/daemon_manager.py",
      "name": "_start_health_check",
      "status": "partial - missing schema"
    },
    "_start_prefetch": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "_start_prefetch",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "_start_prefetch",
      "status": "partial - missing schema"
    },
    "_start_processing": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from storage_wal.py",
      "has_implementation": true,
      "implementation": "_start_processing",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/storage_wal.py",
      "name": "_start_processing",
      "status": "partial - missing schema"
    },
    "_start_required_daemons": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_ipfs_kit.py",
      "has_implementation": true,
      "implementation": "_start_required_daemons",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "_start_required_daemons",
      "status": "partial - missing schema"
    },
    "_start_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_features.py",
      "has_implementation": true,
      "implementation": "_start_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_features.py",
      "name": "_start_server",
      "status": "partial - missing schema"
    },
    "_start_stream": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_streaming_optimized_example.py",
      "has_implementation": true,
      "implementation": "_start_stream",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/webrtc_streaming_optimized_example.py",
      "name": "_start_stream",
      "status": "partial - missing schema"
    },
    "_stop_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_features.py",
      "has_implementation": true,
      "implementation": "_stop_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_features.py",
      "name": "_stop_server",
      "status": "partial - missing schema"
    },
    "_store_test_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from migration_tests.py",
      "has_implementation": true,
      "implementation": "_store_test_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/migration_tests.py",
      "name": "_store_test_content",
      "status": "partial - missing schema"
    },
    "_subscribe": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from metadata_sync_handler.py",
      "has_implementation": true,
      "implementation": "_subscribe",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/metadata_sync_handler.py",
      "name": "_subscribe",
      "status": "partial - missing schema"
    },
    "_task_done_callback": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_model_anyio.py",
      "has_implementation": true,
      "implementation": "_task_done_callback",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_anyio.py",
      "name": "_task_done_callback",
      "status": "partial - missing schema"
    },
    "_track_call": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_filecoin_integration.py",
      "has_implementation": true,
      "implementation": "_track_call",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_filecoin_integration.py",
      "name": "_track_call",
      "status": "partial - missing schema"
    },
    "_trim_arity": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from core.py",
      "has_implementation": true,
      "implementation": "_trim_arity",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pyparsing/core.py",
      "name": "_trim_arity",
      "status": "partial - missing schema"
    },
    "_type_check_issubclass_arg_1": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from typing_extensions.py",
      "has_implementation": true,
      "implementation": "_type_check_issubclass_arg_1",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/typing_extensions.py",
      "name": "_type_check_issubclass_arg_1",
      "status": "partial - missing schema"
    },
    "_update_connection_pool_metrics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_monitoring.py",
      "has_implementation": true,
      "implementation": "_update_connection_pool_metrics",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
      "name": "_update_connection_pool_metrics",
      "status": "partial - missing schema"
    },
    "_update_ipfs_metrics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_monitoring.py",
      "has_implementation": true,
      "implementation": "_update_ipfs_metrics",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
      "name": "_update_ipfs_metrics",
      "status": "partial - missing schema"
    },
    "_update_ipns_key_count": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_monitoring.py",
      "has_implementation": true,
      "implementation": "_update_ipns_key_count",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
      "name": "_update_ipns_key_count",
      "status": "partial - missing schema"
    },
    "_update_metrics_cache": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from prometheus_exporter.py",
      "has_implementation": true,
      "implementation": "_update_metrics_cache",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/prometheus_exporter.py",
      "name": "_update_metrics_cache",
      "status": "partial - missing schema"
    },
    "_update_node_info": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_monitoring.py",
      "has_implementation": true,
      "implementation": "_update_node_info",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
      "name": "_update_node_info",
      "status": "partial - missing schema"
    },
    "_update_perf_stats": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_backend.py",
      "has_implementation": true,
      "implementation": "_update_perf_stats",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_backend.py",
      "name": "_update_perf_stats",
      "status": "partial - missing schema"
    },
    "_update_stats": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_advanced.py",
      "has_implementation": true,
      "implementation": "_update_stats",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced.py",
      "name": "_update_stats",
      "status": "partial - missing schema"
    },
    "_verify_content_integrity": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from hierarchical_storage_methods.py",
      "has_implementation": true,
      "implementation": "_verify_content_integrity",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/hierarchical_storage_methods.py",
      "name": "_verify_content_integrity",
      "status": "partial - missing schema"
    },
    "_verify_lassie": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from lassie_backend.py",
      "has_implementation": true,
      "implementation": "_verify_lassie",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/storage_manager/backends/lassie_backend.py",
      "name": "_verify_lassie",
      "status": "partial - missing schema"
    },
    "_verify_migration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from migration_controller.py",
      "has_implementation": true,
      "implementation": "_verify_migration",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/migration_tools/migration_controller.py",
      "name": "_verify_migration",
      "status": "partial - missing schema"
    },
    "_warmup": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from performance_profiling.py",
      "has_implementation": true,
      "implementation": "_warmup",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/performance_profiling.py",
      "name": "_warmup",
      "status": "partial - missing schema"
    },
    "_warn_if_async_context": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from s3_controller_anyio.py",
      "has_implementation": true,
      "implementation": "_warn_if_async_context",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/s3_controller_anyio.py",
      "name": "_warn_if_async_context",
      "status": "partial - missing schema"
    },
    "_worker_heartbeat_loop": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "_worker_heartbeat_loop",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "_worker_heartbeat_loop",
      "status": "partial - missing schema"
    },
    "accept": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_websocket_notifications_anyio.py",
      "has_implementation": true,
      "implementation": "accept",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_websocket_notifications_anyio.py",
      "name": "accept",
      "status": "partial - missing schema"
    },
    "add": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_high_level_api.py",
      "has_implementation": true,
      "implementation": "add",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
      "name": "add",
      "status": "partial - missing schema"
    },
    "add_backend_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server_real_apis.py",
      "has_implementation": true,
      "implementation": "add_backend_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/api/implement_real_apis.py",
      "name": "add_backend_endpoints",
      "status": "partial - missing schema"
    },
    "add_basic_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_api.py",
      "has_implementation": true,
      "implementation": "add_basic_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_api.py",
      "name": "add_basic_endpoints",
      "status": "partial - missing schema"
    },
    "add_basic_tests": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_tests.py",
      "has_implementation": true,
      "implementation": "add_basic_tests",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_tests.py",
      "name": "add_basic_tests",
      "status": "partial - missing schema"
    },
    "add_compatibility_methods": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_ipfs_model.py",
      "has_implementation": true,
      "implementation": "add_compatibility_methods",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/mcp_compatibility.py",
      "name": "add_compatibility_methods",
      "status": "partial - missing schema"
    },
    "add_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_model_fix.py",
      "has_implementation": true,
      "implementation": "add_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_register.py",
      "name": "add_content",
      "status": "partial - missing schema"
    },
    "add_content_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_model_anyio.py",
      "has_implementation": true,
      "implementation": "add_content_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_anyio.py",
      "name": "add_content_async",
      "status": "partial - missing schema"
    },
    "add_dataset": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_test_fixtures.py",
      "has_implementation": true,
      "implementation": "add_dataset",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_fixtures/ai_ml_test_fixtures.py",
      "name": "add_dataset",
      "status": "partial - missing schema"
    },
    "add_directory": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_high_level_api.py",
      "has_implementation": true,
      "implementation": "add_directory",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
      "name": "add_directory",
      "status": "partial - missing schema"
    },
    "add_endpoints_to_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from add_missing_endpoints.py",
      "has_implementation": true,
      "implementation": "add_endpoints_to_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/add_missing_endpoints_modified.py",
      "name": "add_endpoints_to_server",
      "status": "partial - missing schema"
    },
    "add_enhanced_dht_discovery_methods": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from gossipsub_protocol.py",
      "has_implementation": true,
      "implementation": "add_enhanced_dht_discovery_methods",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/gossipsub_protocol.py",
      "name": "add_enhanced_dht_discovery_methods",
      "status": "partial - missing schema"
    },
    "add_entity": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipld_knowledge_graph.py",
      "has_implementation": true,
      "implementation": "add_entity",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipld_knowledge_graph.py",
      "name": "add_entity",
      "status": "partial - missing schema"
    },
    "add_environment_variables": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_huggingface_integration.py",
      "has_implementation": true,
      "implementation": "add_environment_variables",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_huggingface_integration.py",
      "name": "add_environment_variables",
      "status": "partial - missing schema"
    },
    "add_error_formatter": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from add_error_format.py",
      "has_implementation": true,
      "implementation": "add_error_formatter",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/add_error_format.py",
      "name": "add_error_formatter",
      "status": "partial - missing schema"
    },
    "add_event": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_monitor.py",
      "has_implementation": true,
      "implementation": "add_event",
      "implementation_file": "/home/barberb/ipfs_kit_py/fixes/webrtc_monitor.py",
      "name": "add_event",
      "status": "partial - missing schema"
    },
    "add_execute_command_to_ipfs_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from add_execute_command.py",
      "has_implementation": true,
      "implementation": "add_execute_command_to_ipfs_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/add_execute_command.py",
      "name": "add_execute_command_to_ipfs_model",
      "status": "partial - missing schema"
    },
    "add_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_high_level_api.py",
      "has_implementation": true,
      "implementation": "add_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
      "name": "add_file",
      "status": "partial - missing schema"
    },
    "add_filecoin_credentials": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from credential_controller_anyio.py",
      "has_implementation": true,
      "implementation": "add_filecoin_credentials",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/credential_controller_anyio.py",
      "name": "add_filecoin_credentials",
      "status": "partial - missing schema"
    },
    "add_generic_credential": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_credential_controller_anyio.py",
      "has_implementation": true,
      "implementation": "add_generic_credential",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/credential_controller_anyio.py",
      "name": "add_generic_credential",
      "status": "partial - missing schema"
    },
    "add_ice_candidate": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from unified_dashboard_example.py",
      "has_implementation": true,
      "implementation": "add_ice_candidate",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/unified_dashboard_example.py",
      "name": "add_ice_candidate",
      "status": "partial - missing schema"
    },
    "add_initialize_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from add_mcp_initialize.py",
      "has_implementation": true,
      "implementation": "add_initialize_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/add_initialize_endpoint.py",
      "name": "add_initialize_endpoint",
      "status": "partial - missing schema"
    },
    "add_ipfs_credentials": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from credential_controller.py",
      "has_implementation": true,
      "implementation": "add_ipfs_credentials",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/credential_controller.py",
      "name": "add_ipfs_credentials",
      "status": "partial - missing schema"
    },
    "add_ipfs_model_extensions": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_model_extensions.py",
      "has_implementation": true,
      "implementation": "add_ipfs_model_extensions",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_extensions.py",
      "name": "add_ipfs_model_extensions",
      "status": "partial - missing schema"
    },
    "add_ipfs_tools_to_mcp": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from directly_modify_mcp.py",
      "has_implementation": true,
      "implementation": "add_ipfs_tools_to_mcp",
      "implementation_file": "/home/barberb/ipfs_kit_py/directly_modify_mcp.py",
      "name": "add_ipfs_tools_to_mcp",
      "status": "partial - missing schema"
    },
    "add_ipfs_track": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_streaming.py",
      "has_implementation": true,
      "implementation": "add_ipfs_track",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_streaming.py",
      "name": "add_ipfs_track",
      "status": "partial - missing schema"
    },
    "add_mock_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_server_with_sse.py",
      "has_implementation": true,
      "implementation": "add_mock_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_server_with_sse.py",
      "name": "add_mock_content",
      "status": "partial - missing schema"
    },
    "add_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_test_fixtures.py",
      "has_implementation": true,
      "implementation": "add_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_fixtures/ai_ml_test_fixtures.py",
      "name": "add_model",
      "status": "partial - missing schema"
    },
    "add_move": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from six.py",
      "has_implementation": true,
      "implementation": "add_move",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
      "name": "add_move",
      "status": "partial - missing schema"
    },
    "add_parallel_query_commands": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cli.py",
      "has_implementation": true,
      "implementation": "add_parallel_query_commands",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cli.py",
      "name": "add_parallel_query_commands",
      "status": "partial - missing schema"
    },
    "add_pass": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_comprehensive.py",
      "has_implementation": true,
      "implementation": "add_pass",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_comprehensive.py",
      "name": "add_pass",
      "status": "partial - missing schema"
    },
    "add_permission": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from rbac_enhanced.py",
      "has_implementation": true,
      "implementation": "add_permission",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/rbac_enhanced.py",
      "name": "add_permission",
      "status": "partial - missing schema"
    },
    "add_pins_method": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from add_missing_method.py",
      "has_implementation": true,
      "implementation": "add_pins_method",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/add_missing_method.py",
      "name": "add_pins_method",
      "status": "partial - missing schema"
    },
    "add_received_message": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_distributed.py",
      "has_implementation": true,
      "implementation": "add_received_message",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/network_tests/test_mcp_distributed.py",
      "name": "add_received_message",
      "status": "partial - missing schema"
    },
    "add_relationship": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipld_knowledge_graph.py",
      "has_implementation": true,
      "implementation": "add_relationship",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipld_knowledge_graph.py",
      "name": "add_relationship",
      "status": "partial - missing schema"
    },
    "add_root_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from add_root_endpoint.py",
      "has_implementation": true,
      "implementation": "add_root_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/add_root_endpoint.py",
      "name": "add_root_endpoint",
      "status": "partial - missing schema"
    },
    "add_s3_credentials": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from credential_controller_anyio.py",
      "has_implementation": true,
      "implementation": "add_s3_credentials",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/credential_controller_anyio.py",
      "name": "add_s3_credentials",
      "status": "partial - missing schema"
    },
    "add_simulation_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_storage_backends.py",
      "has_implementation": true,
      "implementation": "add_simulation_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_storage_backends.py",
      "name": "add_simulation_endpoints",
      "status": "partial - missing schema"
    },
    "add_sse_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from sse_cors_fix.py",
      "has_implementation": true,
      "implementation": "add_sse_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/sse_cors_fix.py",
      "name": "add_sse_endpoint",
      "status": "partial - missing schema"
    },
    "add_sse_starlette_requirement": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_ipfs_extensions.py",
      "has_implementation": true,
      "implementation": "add_sse_starlette_requirement",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_mcp_ipfs_extensions.py",
      "name": "add_sse_starlette_requirement",
      "status": "partial - missing schema"
    },
    "add_storacha_credentials": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from credential_controller.py",
      "has_implementation": true,
      "implementation": "add_storacha_credentials",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/credential_controller.py",
      "name": "add_storacha_credentials",
      "status": "partial - missing schema"
    },
    "add_string": {
      "auto_discovered": true,
      "description": "Tool implementation found in enhanced_final_mcp_server.py",
      "has_implementation": true,
      "implementation": "add_string",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhanced_final_mcp_server.py",
      "name": "add_string",
      "status": "partial - missing schema"
    },
    "add_test_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_example.py",
      "has_implementation": true,
      "implementation": "add_test_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/libp2p_example.py",
      "name": "add_test_content",
      "status": "partial - missing schema"
    },
    "add_texts": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "add_texts",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "add_texts",
      "status": "partial - missing schema"
    },
    "add_transaction": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_controller.py",
      "has_implementation": true,
      "implementation": "add_transaction",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/fs_journal_controller_anyio.py",
      "name": "add_transaction",
      "status": "partial - missing schema"
    },
    "add_warning_header": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from sync_roadmap.py",
      "has_implementation": true,
      "implementation": "add_warning_header",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/sync_roadmap.py",
      "name": "add_warning_header",
      "status": "partial - missing schema"
    },
    "add_webrtc_check_method": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_api_simplified.py",
      "has_implementation": true,
      "implementation": "add_webrtc_check_method",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_api_final.py",
      "name": "add_webrtc_check_method",
      "status": "partial - missing schema"
    },
    "ai_optimize_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from high_level_api_fixed.py",
      "has_implementation": true,
      "implementation": "ai_optimize_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api_fixed.py",
      "name": "ai_optimize_model",
      "status": "partial - missing schema"
    },
    "ai_register_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from high_level_api_fixed.py",
      "has_implementation": true,
      "implementation": "ai_register_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api_fixed.py",
      "name": "ai_register_model",
      "status": "partial - missing schema"
    },
    "all_metrics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from metrics.py",
      "has_implementation": true,
      "implementation": "all_metrics",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/metrics.py",
      "name": "all_metrics",
      "status": "partial - missing schema"
    },
    "analyze_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_resource_handler.py",
      "has_implementation": true,
      "implementation": "analyze_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_mcp_resource_handler.py",
      "name": "analyze_files",
      "status": "partial - missing schema"
    },
    "analyze_metrics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from metrics_optimizer.py",
      "has_implementation": true,
      "implementation": "analyze_metrics",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/metrics_optimizer.py",
      "name": "analyze_metrics",
      "status": "partial - missing schema"
    },
    "announce_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "announce_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "announce_server",
      "status": "partial - missing schema"
    },
    "anyio_client": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "anyio_client",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "anyio_client",
      "status": "partial - missing schema"
    },
    "api_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from unified_mcp_server.py",
      "has_implementation": true,
      "implementation": "api_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhanced_mcp_server_fixed.py",
      "name": "api_health",
      "status": "partial - missing schema"
    },
    "api_initialize_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from unified_mcp_server.py",
      "has_implementation": true,
      "implementation": "api_initialize_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/unified_mcp_server.py",
      "name": "api_initialize_endpoint",
      "status": "partial - missing schema"
    },
    "api_instance": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api_libp2p_anyio.py",
      "has_implementation": true,
      "implementation": "api_instance",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_libp2p_anyio.py",
      "name": "api_instance",
      "status": "partial - missing schema"
    },
    "api_sse": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from unified_mcp_server.py",
      "has_implementation": true,
      "implementation": "api_sse",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhanced_mcp_server_fixed.py",
      "name": "api_sse",
      "status": "partial - missing schema"
    },
    "api_unexpected_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from api.py",
      "has_implementation": true,
      "implementation": "api_unexpected_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
      "name": "api_unexpected_error",
      "status": "partial - missing schema"
    },
    "app": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storacha_controller_anyio.py",
      "has_implementation": true,
      "implementation": "app",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_controller_anyio.py",
      "name": "app",
      "status": "partial - missing schema"
    },
    "app_client": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "app_client",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
      "name": "app_client",
      "status": "partial - missing schema"
    },
    "apply_all_optimizations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from performance_optimizations.py",
      "has_implementation": true,
      "implementation": "apply_all_optimizations",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/performance_optimizations.py",
      "name": "apply_all_optimizations",
      "status": "partial - missing schema"
    },
    "apply_anyio_fixes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_anyio_integration.py",
      "has_implementation": true,
      "implementation": "apply_anyio_fixes",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_anyio_integration.py",
      "name": "apply_anyio_fixes",
      "status": "partial - missing schema"
    },
    "apply_anyio_fixes_to_controller": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_anyio_integration.py",
      "has_implementation": true,
      "implementation": "apply_anyio_fixes_to_controller",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_anyio_integration.py",
      "name": "apply_anyio_fixes_to_controller",
      "status": "partial - missing schema"
    },
    "apply_command_handler_mocks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_command_handlers.py",
      "has_implementation": true,
      "implementation": "apply_command_handler_mocks",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/fix_mcp_command_handlers.py",
      "name": "apply_command_handler_mocks",
      "status": "partial - missing schema"
    },
    "apply_direct_fixes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_direct_libp2p_model.py",
      "has_implementation": true,
      "implementation": "apply_direct_fixes",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_direct_libp2p_model.py",
      "name": "apply_direct_fixes",
      "status": "partial - missing schema"
    },
    "apply_enhanced_fixes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_anyio_monitor_integration.py",
      "has_implementation": true,
      "implementation": "apply_enhanced_fixes",
      "implementation_file": "/home/barberb/ipfs_kit_py/fixes/webrtc_anyio_monitor_integration.py",
      "name": "apply_enhanced_fixes",
      "status": "partial - missing schema"
    },
    "apply_fix": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from final_fix.py",
      "has_implementation": true,
      "implementation": "apply_fix",
      "implementation_file": "/home/barberb/ipfs_kit_py/backup_files/tiered_cache_fix.py",
      "name": "apply_fix",
      "status": "partial - missing schema"
    },
    "apply_fixes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from apply_webrtc_fixes.py",
      "has_implementation": true,
      "implementation": "apply_fixes",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_fix.py",
      "name": "apply_fixes",
      "status": "partial - missing schema"
    },
    "apply_hooks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from hooks.py",
      "has_implementation": true,
      "implementation": "apply_hooks",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/hooks.py",
      "name": "apply_hooks",
      "status": "partial - missing schema"
    },
    "apply_ipfs_kit_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit_integration.py",
      "has_implementation": true,
      "implementation": "apply_ipfs_kit_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/ipfs_kit_integration.py",
      "name": "apply_ipfs_kit_integration",
      "status": "partial - missing schema"
    },
    "apply_libp2p_mocks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_mocks.py",
      "has_implementation": true,
      "implementation": "apply_libp2p_mocks",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
      "name": "apply_libp2p_mocks",
      "status": "partial - missing schema"
    },
    "apply_mcp_server_fixes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_server_refactoring.py",
      "has_implementation": true,
      "implementation": "apply_mcp_server_fixes",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_server_refactoring.py",
      "name": "apply_mcp_server_fixes",
      "status": "partial - missing schema"
    },
    "apply_metrics_patches": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from implement_streaming_metrics.py",
      "has_implementation": true,
      "implementation": "apply_metrics_patches",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/implementation/implement_streaming_metrics.py",
      "name": "apply_metrics_patches",
      "status": "partial - missing schema"
    },
    "apply_monkeypatch": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from add_pins_monkey_patch.py",
      "has_implementation": true,
      "implementation": "apply_monkeypatch",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/add_pins_monkey_patch.py",
      "name": "apply_monkeypatch",
      "status": "partial - missing schema"
    },
    "apply_protocol_extensions": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from __init__.py",
      "has_implementation": true,
      "implementation": "apply_protocol_extensions",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/__init__.py",
      "name": "apply_protocol_extensions",
      "status": "partial - missing schema"
    },
    "apply_protocol_extensions_to_instance": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from __init__.py",
      "has_implementation": true,
      "implementation": "apply_protocol_extensions_to_instance",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/__init__.py",
      "name": "apply_protocol_extensions_to_instance",
      "status": "partial - missing schema"
    },
    "apply_pyarrow_mock_patches": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from pyarrow_test_utils.py",
      "has_implementation": true,
      "implementation": "apply_pyarrow_mock_patches",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/helpers/pyarrow_test_utils.py",
      "name": "apply_pyarrow_mock_patches",
      "status": "partial - missing schema"
    },
    "apply_pytest_patches": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from pytest_fix_complete.py",
      "has_implementation": true,
      "implementation": "apply_pytest_patches",
      "implementation_file": "/home/barberb/ipfs_kit_py/pytest_fix_complete.py",
      "name": "apply_pytest_patches",
      "status": "partial - missing schema"
    },
    "apply_to_module": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_libp2p_mock.py",
      "has_implementation": true,
      "implementation": "apply_to_module",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/libp2p/enhanced_libp2p_mock.py",
      "name": "apply_to_module",
      "status": "partial - missing schema"
    },
    "ar_cache": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_fsspec_mocked.py",
      "has_implementation": true,
      "implementation": "ar_cache",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_fsspec_mocked.py",
      "name": "ar_cache",
      "status": "partial - missing schema"
    },
    "as_query_engine": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "as_query_engine",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "as_query_engine",
      "status": "partial - missing schema"
    },
    "asyncSetUp": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_routing_integration.py",
      "has_implementation": true,
      "implementation": "asyncSetUp",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_controller_cleanup.py",
      "name": "asyncSetUp",
      "status": "partial - missing schema"
    },
    "async_content_generator": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from extended_features.py",
      "has_implementation": true,
      "implementation": "async_content_generator",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
      "name": "async_content_generator",
      "status": "partial - missing schema"
    },
    "async_controller": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_controller.py",
      "has_implementation": true,
      "implementation": "async_controller",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
      "name": "async_controller",
      "status": "partial - missing schema"
    },
    "async_fill_buffer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_stream_buffer_optimization.py",
      "has_implementation": true,
      "implementation": "async_fill_buffer",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_stream_buffer_optimization.py",
      "name": "async_fill_buffer",
      "status": "partial - missing schema"
    },
    "async_test": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_async_fix.py",
      "has_implementation": true,
      "implementation": "async_test",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_async_fix.py",
      "name": "async_test",
      "status": "partial - missing schema"
    },
    "async_test_buffer_underflow": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_stream_buffer_optimization.py",
      "has_implementation": true,
      "implementation": "async_test_buffer_underflow",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_stream_buffer_optimization.py",
      "name": "async_test_buffer_underflow",
      "status": "partial - missing schema"
    },
    "async_test_detect_by_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "async_test_detect_by_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced.py",
      "name": "async_test_detect_by_content",
      "status": "partial - missing schema"
    },
    "async_test_failed_transaction": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "async_test_failed_transaction",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced.py",
      "name": "async_test_failed_transaction",
      "status": "partial - missing schema"
    },
    "async_test_move_content_batch": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "async_test_move_content_batch",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced.py",
      "name": "async_test_move_content_batch",
      "status": "partial - missing schema"
    },
    "async_wrapper": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from asyn_wrapper.py",
      "has_implementation": true,
      "implementation": "async_wrapper",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/filesystem_spec/fsspec/implementations/asyn_wrapper.py",
      "name": "async_wrapper",
      "status": "partial - missing schema"
    },
    "attrib": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from _make.py",
      "has_implementation": true,
      "implementation": "attrib",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/attr/_make.py",
      "name": "attrib",
      "status": "partial - missing schema"
    },
    "auto_retry_on_daemon_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "auto_retry_on_daemon_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "auto_retry_on_daemon_failure",
      "status": "partial - missing schema"
    },
    "b58decode": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from network.py",
      "has_implementation": true,
      "implementation": "b58decode",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/kademlia/network.py",
      "name": "b58decode",
      "status": "partial - missing schema"
    },
    "backup_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_jsonrpc_correct.py",
      "has_implementation": true,
      "implementation": "backup_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/simple_fix_lassie.py",
      "name": "backup_file",
      "status": "partial - missing schema"
    },
    "backup_script": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cleanup_mcp_scripts.py",
      "has_implementation": true,
      "implementation": "backup_script",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/cleanup_mcp_scripts.py",
      "name": "backup_script",
      "status": "partial - missing schema"
    },
    "benchmark_caching": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from benchmark.py",
      "has_implementation": true,
      "implementation": "benchmark_caching",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark.py",
      "name": "benchmark_caching",
      "status": "partial - missing schema"
    },
    "benchmark_fsspec_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from benchmark.py",
      "has_implementation": true,
      "implementation": "benchmark_fsspec_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark.py",
      "name": "benchmark_fsspec_operations",
      "status": "partial - missing schema"
    },
    "benchmark_results": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from api.py",
      "has_implementation": true,
      "implementation": "benchmark_results",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
      "name": "benchmark_results",
      "status": "partial - missing schema"
    },
    "benchmark_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from api.py",
      "has_implementation": true,
      "implementation": "benchmark_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
      "name": "benchmark_status",
      "status": "partial - missing schema"
    },
    "block_get": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_controller.py",
      "has_implementation": true,
      "implementation": "block_get",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
      "name": "block_get",
      "status": "partial - missing schema"
    },
    "block_stat": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_controller.py",
      "has_implementation": true,
      "implementation": "block_stat",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
      "name": "block_stat",
      "status": "partial - missing schema"
    },
    "bootstrap_list": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_advanced_router.py",
      "has_implementation": true,
      "implementation": "bootstrap_list",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
      "name": "bootstrap_list",
      "status": "partial - missing schema"
    },
    "c_data_interface_example": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from arc_cache.py",
      "has_implementation": true,
      "implementation": "c_data_interface_example",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/arc_cache.py",
      "name": "c_data_interface_example",
      "status": "partial - missing schema"
    },
    "cache_info": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from caching.py",
      "has_implementation": true,
      "implementation": "cache_info",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/filesystem_spec/fsspec/caching.py",
      "name": "cache_info",
      "status": "partial - missing schema"
    },
    "cache_result": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from performance_optimizations.py",
      "has_implementation": true,
      "implementation": "cache_result",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/performance_optimizations.py",
      "name": "cache_result",
      "status": "partial - missing schema"
    },
    "calculate_file_hash": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_backends_simulation.py",
      "has_implementation": true,
      "implementation": "calculate_file_hash",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/storage/test_storage_backends_to_disk.py",
      "name": "calculate_file_hash",
      "status": "partial - missing schema"
    },
    "call_mcp_method": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_fs_tool_integration.py",
      "has_implementation": true,
      "implementation": "call_mcp_method",
      "implementation_file": "/home/barberb/ipfs_kit_py/verify_fs_tool_integration.py",
      "name": "call_mcp_method",
      "status": "partial - missing schema"
    },
    "call_tool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_tools.py",
      "has_implementation": true,
      "implementation": "call_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/test_mcp_tools.py",
      "name": "call_tool",
      "status": "partial - missing schema"
    },
    "callback": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_dht_operations.py",
      "has_implementation": true,
      "implementation": "callback",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_dht_operations.py",
      "name": "callback",
      "status": "partial - missing schema"
    },
    "cat": {
      "auto_discovered": true,
      "description": "Tool implementation found in enhanced_final_mcp_server.py",
      "has_implementation": true,
      "implementation": "cat",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_register.py",
      "name": "cat",
      "status": "partial - missing schema"
    },
    "cat_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_high_level_api.py",
      "has_implementation": true,
      "implementation": "cat_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
      "name": "cat_async",
      "status": "partial - missing schema"
    },
    "cat_mock_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_proxy_server.py",
      "has_implementation": true,
      "implementation": "cat_mock_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_server_with_sse.py",
      "name": "cat_mock_content",
      "status": "partial - missing schema"
    },
    "categorize_test": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from migrate_mcp_tests.py",
      "has_implementation": true,
      "implementation": "categorize_test",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/migrate_mcp_tests.py",
      "name": "categorize_test",
      "status": "partial - missing schema"
    },
    "categorize_test_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from organize_mcp_tests.py",
      "has_implementation": true,
      "implementation": "categorize_test_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/organize_mcp_tests.py",
      "name": "categorize_test_file",
      "status": "partial - missing schema"
    },
    "check_anyio_available": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_test_filecoin_model_anyio.py",
      "has_implementation": true,
      "implementation": "check_anyio_available",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/test/run_test_filecoin_model_anyio.py",
      "name": "check_anyio_available",
      "status": "partial - missing schema"
    },
    "check_api_credentials": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_filecoin_controller_direct.py",
      "has_implementation": true,
      "implementation": "check_api_credentials",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_filecoin_api.py",
      "name": "check_api_credentials",
      "status": "partial - missing schema"
    },
    "check_backend_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_backends_api.py",
      "has_implementation": true,
      "implementation": "check_backend_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/test_storage_backends_comprehensive.py",
      "name": "check_backend_status",
      "status": "partial - missing schema"
    },
    "check_cloud_provider": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_mcp_server_real.py",
      "has_implementation": true,
      "implementation": "check_cloud_provider",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_mcp_server_real.py",
      "name": "check_cloud_provider",
      "status": "partial - missing schema"
    },
    "check_connection": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_lassie_controller_anyio.py",
      "has_implementation": true,
      "implementation": "check_connection",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/lotus_kit.py",
      "name": "check_connection",
      "status": "partial - missing schema"
    },
    "check_daemon_process": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_lotus_api_integration.py",
      "has_implementation": true,
      "implementation": "check_daemon_process",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_daemons.py",
      "name": "check_daemon_process",
      "status": "partial - missing schema"
    },
    "check_daemon_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_daemon_status_fix.py",
      "has_implementation": true,
      "implementation": "check_daemon_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/simulated_api.py",
      "name": "check_daemon_status",
      "status": "partial - missing schema"
    },
    "check_daemon_status_wrapper": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_compatibility.py",
      "has_implementation": true,
      "implementation": "check_daemon_status_wrapper",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/mcp_compatibility.py",
      "name": "check_daemon_status_wrapper",
      "status": "partial - missing schema"
    },
    "check_database_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from optimized_monitoring_example.py",
      "has_implementation": true,
      "implementation": "check_database_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/monitoring_example.py",
      "name": "check_database_health",
      "status": "partial - missing schema"
    },
    "check_dependencies": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from final_integration.py",
      "has_implementation": true,
      "implementation": "check_dependencies",
      "implementation_file": "/home/barberb/ipfs_kit_py/backup_patches/fix_webrtc_anyio.py",
      "name": "check_dependencies",
      "status": "partial - missing schema"
    },
    "check_dependency": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from install_storacha.py",
      "has_implementation": true,
      "implementation": "check_dependency",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/install/install_storacha.py",
      "name": "check_dependency",
      "status": "partial - missing schema"
    },
    "check_disk_space": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_backup_system.py",
      "has_implementation": true,
      "implementation": "check_disk_space",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/backup/test_backup_system.py",
      "name": "check_disk_space",
      "status": "partial - missing schema"
    },
    "check_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from simple_verify_mcp.py",
      "has_implementation": true,
      "implementation": "check_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/simple_verify_mcp.py",
      "name": "check_endpoint",
      "status": "partial - missing schema"
    },
    "check_existing_lotus": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_real_lotus.py",
      "has_implementation": true,
      "implementation": "check_existing_lotus",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_real_lotus.py",
      "name": "check_existing_lotus",
      "status": "partial - missing schema"
    },
    "check_extension_logs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from diagnose_vscode_extension.py",
      "has_implementation": true,
      "implementation": "check_extension_logs",
      "implementation_file": "/home/barberb/ipfs_kit_py/diagnose_vscode_extension.py",
      "name": "check_extension_logs",
      "status": "partial - missing schema"
    },
    "check_final_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from final_integration.py",
      "has_implementation": true,
      "implementation": "check_final_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/final_integration.py",
      "name": "check_final_server",
      "status": "partial - missing schema"
    },
    "check_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_daemon_management.py",
      "has_implementation": true,
      "implementation": "check_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_lock_handling.py",
      "name": "check_health",
      "status": "partial - missing schema"
    },
    "check_huggingface_cli": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_huggingface.py",
      "has_implementation": true,
      "implementation": "check_huggingface_cli",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_huggingface.py",
      "name": "check_huggingface_cli",
      "status": "partial - missing schema"
    },
    "check_import": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_installation.py",
      "has_implementation": true,
      "implementation": "check_import",
      "implementation_file": "/home/barberb/ipfs_kit_py/tools/test_installation.py",
      "name": "check_import",
      "status": "partial - missing schema"
    },
    "check_ipfs_api": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_simple.py",
      "has_implementation": true,
      "implementation": "check_ipfs_api",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_simple.py",
      "name": "check_ipfs_api",
      "status": "partial - missing schema"
    },
    "check_ipfs_available": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from high_level_api_ai_ml_example.py",
      "has_implementation": true,
      "implementation": "check_ipfs_available",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/high_level_api_ai_ml_example.py",
      "name": "check_ipfs_available",
      "status": "partial - missing schema"
    },
    "check_ipfs_cluster_api": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_simple.py",
      "has_implementation": true,
      "implementation": "check_ipfs_cluster_api",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_simple.py",
      "name": "check_ipfs_cluster_api",
      "status": "partial - missing schema"
    },
    "check_ipfs_cluster_modules": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_ipfs_cluster_status.py",
      "has_implementation": true,
      "implementation": "check_ipfs_cluster_modules",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_ipfs_cluster_status.py",
      "name": "check_ipfs_cluster_modules",
      "status": "partial - missing schema"
    },
    "check_ipfs_daemon": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_ipfs_tools.py",
      "has_implementation": true,
      "implementation": "check_ipfs_daemon",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_mcp_server_real.py",
      "name": "check_ipfs_daemon",
      "status": "partial - missing schema"
    },
    "check_is_macos": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from lotus_daemon_macos_example.py",
      "has_implementation": true,
      "implementation": "check_is_macos",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/lotus_daemon_macos_example.py",
      "name": "check_is_macos",
      "status": "partial - missing schema"
    },
    "check_libp2p_dependencies": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from check_libp2p_availability.py",
      "has_implementation": true,
      "implementation": "check_libp2p_dependencies",
      "implementation_file": "/home/barberb/ipfs_kit_py/utils/check/check_libp2p_availability.py",
      "name": "check_libp2p_dependencies",
      "status": "partial - missing schema"
    },
    "check_lotus_api": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_simple.py",
      "has_implementation": true,
      "implementation": "check_lotus_api",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_simple.py",
      "name": "check_lotus_api",
      "status": "partial - missing schema"
    },
    "check_lotus_installation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_filecoin_implementation.py",
      "has_implementation": true,
      "implementation": "check_lotus_installation",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_filecoin_implementation.py",
      "name": "check_lotus_installation",
      "status": "partial - missing schema"
    },
    "check_mcp_server_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_tool_registration.py",
      "has_implementation": true,
      "implementation": "check_mcp_server_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_mcp_tool_registration.py",
      "name": "check_mcp_server_health",
      "status": "partial - missing schema"
    },
    "check_method_added": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_ipfs_model.py",
      "has_implementation": true,
      "implementation": "check_method_added",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_ipfs_model.py",
      "name": "check_method_added",
      "status": "partial - missing schema"
    },
    "check_script_executable": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_mcp_real_implementations.py",
      "has_implementation": true,
      "implementation": "check_script_executable",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_mcp_real_implementations.py",
      "name": "check_script_executable",
      "status": "partial - missing schema"
    },
    "check_server_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from final_integration.py",
      "has_implementation": true,
      "implementation": "check_server_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/backup_patches/fix_storage_backends.py",
      "name": "check_server_health",
      "status": "partial - missing schema"
    },
    "check_server_running": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_server_wrapper.py",
      "has_implementation": true,
      "implementation": "check_server_running",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/wrappers/mcp_server_wrapper.py",
      "name": "check_server_running",
      "status": "partial - missing schema"
    },
    "check_unified_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from final_integration.py",
      "has_implementation": true,
      "implementation": "check_unified_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/final_integration.py",
      "name": "check_unified_tools",
      "status": "partial - missing schema"
    },
    "check_vscode_extensions": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from diagnose_vscode_extension.py",
      "has_implementation": true,
      "implementation": "check_vscode_extensions",
      "implementation_file": "/home/barberb/ipfs_kit_py/diagnose_vscode_extension.py",
      "name": "check_vscode_extensions",
      "status": "partial - missing schema"
    },
    "check_vscode_settings": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from check_vscode_integration.py",
      "has_implementation": true,
      "implementation": "check_vscode_settings",
      "implementation_file": "/home/barberb/ipfs_kit_py/check_vscode_integration.py",
      "name": "check_vscode_settings",
      "status": "partial - missing schema"
    },
    "check_webrtc_dependencies": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_streaming.py",
      "has_implementation": true,
      "implementation": "check_webrtc_dependencies",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/webrtc.py",
      "name": "check_webrtc_dependencies",
      "status": "partial - missing schema"
    },
    "check_websocket_support": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_peer_websocket_controller_anyio.py",
      "has_implementation": true,
      "implementation": "check_websocket_support",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_peer_websocket_controller_anyio.py",
      "name": "check_websocket_support",
      "status": "partial - missing schema"
    },
    "choose_boundary": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from filepost.py",
      "has_implementation": true,
      "implementation": "choose_boundary",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/urllib3/filepost.py",
      "name": "choose_boundary",
      "status": "partial - missing schema"
    },
    "clean_stale_servers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "clean_stale_servers",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "clean_stale_servers",
      "status": "partial - missing schema"
    },
    "clean_stale_servers_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "clean_stale_servers_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "clean_stale_servers_async",
      "status": "partial - missing schema"
    },
    "cleanup": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_runner.py",
      "has_implementation": true,
      "implementation": "cleanup",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/storacha_backend.py",
      "name": "cleanup",
      "status": "partial - missing schema"
    },
    "cleanup_test_environment": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_cluster_service.py",
      "has_implementation": true,
      "implementation": "cleanup_test_environment",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_cluster_service.py",
      "name": "cleanup_test_environment",
      "status": "partial - missing schema"
    },
    "clear_cache": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from database.py",
      "has_implementation": true,
      "implementation": "clear_cache",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cache/parallel_query_execution.py",
      "name": "clear_cache",
      "status": "partial - missing schema"
    },
    "cli_version": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from simple_test_mcp_server.py",
      "has_implementation": true,
      "implementation": "cli_version",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/utils/mcp/simple_test_mcp_server.py",
      "name": "cli_version",
      "status": "partial - missing schema"
    },
    "client": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "client",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_libp2p_server_integration.py",
      "name": "client",
      "status": "partial - missing schema"
    },
    "close": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_connection_pool.py",
      "has_implementation": true,
      "implementation": "close",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
      "name": "close",
      "status": "partial - missing schema"
    },
    "close_connection": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_anyio_integration.py",
      "has_implementation": true,
      "implementation": "close_connection",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_streaming.py",
      "name": "close_connection",
      "status": "partial - missing schema"
    },
    "cluster_auth_setup": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_authentication.py",
      "has_implementation": true,
      "implementation": "cluster_auth_setup",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_authentication.py",
      "name": "cluster_auth_setup",
      "status": "partial - missing schema"
    },
    "cluster_nodes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_distributed_coordination.py",
      "has_implementation": true,
      "implementation": "cluster_nodes",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_distributed_coordination.py",
      "name": "cluster_nodes",
      "status": "partial - missing schema"
    },
    "cluster_pin_add": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "cluster_pin_add",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "cluster_pin_add",
      "status": "partial - missing schema"
    },
    "cluster_pin_ls": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "cluster_pin_ls",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "cluster_pin_ls",
      "status": "partial - missing schema"
    },
    "cluster_pin_rm": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "cluster_pin_rm",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "cluster_pin_rm",
      "status": "partial - missing schema"
    },
    "cluster_state_setup": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_distributed_state_sync.py",
      "has_implementation": true,
      "implementation": "cluster_state_setup",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_distributed_state_sync.py",
      "name": "cluster_state_setup",
      "status": "partial - missing schema"
    },
    "cluster_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "cluster_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "cluster_status",
      "status": "partial - missing schema"
    },
    "cmp_using": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from _cmp.py",
      "has_implementation": true,
      "implementation": "cmp_using",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/attr/_cmp.py",
      "name": "cmp_using",
      "status": "partial - missing schema"
    },
    "collect": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from prometheus_exporter.py",
      "has_implementation": true,
      "implementation": "collect",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/prometheus_exporter.py",
      "name": "collect",
      "status": "partial - missing schema"
    },
    "collect_stats": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_webrtc_aiortc_client.py",
      "has_implementation": true,
      "implementation": "collect_stats",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/mcp_webrtc_aiortc_client.py",
      "name": "collect_stats",
      "status": "partial - missing schema"
    },
    "compare_benchmarks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_benchmark_helpers.py",
      "has_implementation": true,
      "implementation": "compare_benchmarks",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api/webrtc_benchmark_helpers_anyio.py",
      "name": "compare_benchmarks",
      "status": "partial - missing schema"
    },
    "compare_bloom_vs_set": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from probabilistic_data_structures_example.py",
      "has_implementation": true,
      "implementation": "compare_bloom_vs_set",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/probabilistic_data_structures_example.py",
      "name": "compare_bloom_vs_set",
      "status": "partial - missing schema"
    },
    "connect": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from unified_dashboard_example.py",
      "has_implementation": true,
      "implementation": "connect",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/webrtc_streaming_example.py",
      "name": "connect",
      "status": "partial - missing schema"
    },
    "connect_to_libp2p_peer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_peer_discovery.py",
      "has_implementation": true,
      "implementation": "connect_to_libp2p_peer",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_peer_discovery.py",
      "name": "connect_to_libp2p_peer",
      "status": "partial - missing schema"
    },
    "connect_to_peer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_ipfs_kit.py",
      "has_implementation": true,
      "implementation": "connect_to_peer",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/high_level_api_integration.py",
      "name": "connect_to_peer",
      "status": "partial - missing schema"
    },
    "connect_to_peers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from websocket_peer_discovery_example.py",
      "has_implementation": true,
      "implementation": "connect_to_peers",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/websocket_peer_discovery_example.py",
      "name": "connect_to_peers",
      "status": "partial - missing schema"
    },
    "connect_to_websocket": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_websocket_example.py",
      "has_implementation": true,
      "implementation": "connect_to_websocket",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/wal_websocket_example.py",
      "name": "connect_to_websocket",
      "status": "partial - missing schema"
    },
    "controller": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "controller",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
      "name": "controller",
      "status": "partial - missing schema"
    },
    "controller_with_app": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_controller.py",
      "has_implementation": true,
      "implementation": "controller_with_app",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
      "name": "controller_with_app",
      "status": "partial - missing schema"
    },
    "copy": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from structs.py",
      "has_implementation": true,
      "implementation": "copy",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/resolvelib/structs.py",
      "name": "copy",
      "status": "partial - missing schema"
    },
    "copy_content_batch": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "copy_content_batch",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
      "name": "copy_content_batch",
      "status": "partial - missing schema"
    },
    "copy_directory_structure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_imports.py",
      "has_implementation": true,
      "implementation": "copy_directory_structure",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_imports.py",
      "name": "copy_directory_structure",
      "status": "partial - missing schema"
    },
    "copy_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server_with_tools.py",
      "has_implementation": true,
      "implementation": "copy_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_mcp_server.py",
      "name": "copy_file",
      "status": "partial - missing schema"
    },
    "count_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from update_and_restart_mcp_server.py",
      "has_implementation": true,
      "implementation": "count_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/update_and_restart_mcp_server.py",
      "name": "count_tools",
      "status": "partial - missing schema"
    },
    "create": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "create",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "create",
      "status": "partial - missing schema"
    },
    "create_active_lock_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_lock_handling.py",
      "has_implementation": true,
      "implementation": "create_active_lock_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_lock_handling.py",
      "name": "create_active_lock_file",
      "status": "partial - missing schema"
    },
    "create_advanced_ipfs_router": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_advanced_router.py",
      "has_implementation": true,
      "implementation": "create_advanced_ipfs_router",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_advanced_router.py",
      "name": "create_advanced_ipfs_router",
      "status": "partial - missing schema"
    },
    "create_app": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_server_fixed_all.py",
      "has_implementation": true,
      "implementation": "create_app",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/run_mcp_server_real_storage.py",
      "name": "create_app",
      "status": "partial - missing schema"
    },
    "create_app_wrapper": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_mcp_server_initializer.py",
      "has_implementation": true,
      "implementation": "create_app_wrapper",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/run_mcp_server_initializer.py",
      "name": "create_app_wrapper",
      "status": "partial - missing schema"
    },
    "create_auth_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integrate_auth.py",
      "has_implementation": true,
      "implementation": "create_auth_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/integrate_auth.py",
      "name": "create_auth_config",
      "status": "partial - missing schema"
    },
    "create_backend_proxy": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_storage_backends.py",
      "has_implementation": true,
      "implementation": "create_backend_proxy",
      "implementation_file": "/home/barberb/ipfs_kit_py/backup_patches/fix_storage_backends.py",
      "name": "create_backend_proxy",
      "status": "partial - missing schema"
    },
    "create_backup": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_issues.py",
      "has_implementation": true,
      "implementation": "create_backup",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_issues.py",
      "name": "create_backup",
      "status": "partial - missing schema"
    },
    "create_bucket": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from s3_storage.py",
      "has_implementation": true,
      "implementation": "create_bucket",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/storage/s3_storage.py",
      "name": "create_bucket",
      "status": "partial - missing schema"
    },
    "create_cid_from_bytes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_multiformats.py",
      "has_implementation": true,
      "implementation": "create_cid_from_bytes",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_multiformats.py",
      "name": "create_cid_from_bytes",
      "status": "partial - missing schema"
    },
    "create_complete_mcp_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from complete_mcp_config.py",
      "has_implementation": true,
      "implementation": "create_complete_mcp_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/complete_mcp_config.py",
      "name": "create_complete_mcp_config",
      "status": "partial - missing schema"
    },
    "create_config_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_enabled_api_example.py",
      "has_implementation": true,
      "implementation": "create_config_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/wal_enabled_api_example.py",
      "name": "create_config_file",
      "status": "partial - missing schema"
    },
    "create_dag_node": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "create_dag_node",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "create_dag_node",
      "status": "partial - missing schema"
    },
    "create_default_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_compatibility.py",
      "has_implementation": true,
      "implementation": "create_default_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_compatibility.py",
      "name": "create_default_server",
      "status": "partial - missing schema"
    },
    "create_dir": {
      "auto_discovered": true,
      "description": "Tool implementation found in enhanced_final_mcp_server.py",
      "has_implementation": true,
      "implementation": "create_dir",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhanced_final_mcp_server.py",
      "name": "create_dir",
      "status": "partial - missing schema"
    },
    "create_direct_loader": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from load_mcp_tools.py",
      "has_implementation": true,
      "implementation": "create_direct_loader",
      "implementation_file": "/home/barberb/ipfs_kit_py/load_mcp_tools.py",
      "name": "create_direct_loader",
      "status": "partial - missing schema"
    },
    "create_directories": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_integration.py",
      "has_implementation": true,
      "implementation": "create_directories",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_integration.py",
      "name": "create_directories",
      "status": "partial - missing schema"
    },
    "create_dummy_cache": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from async_cache_example.py",
      "has_implementation": true,
      "implementation": "create_dummy_cache",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/async_cache_example.py",
      "name": "create_dummy_cache",
      "status": "partial - missing schema"
    },
    "create_dummy_mcp_components": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from unified_mcp_server.py",
      "has_implementation": true,
      "implementation": "create_dummy_mcp_components",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhanced_mcp_server_fixed.py",
      "name": "create_dummy_mcp_components",
      "status": "partial - missing schema"
    },
    "create_enhanced_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tool_coverage.py",
      "has_implementation": true,
      "implementation": "create_enhanced_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tool_coverage.py",
      "name": "create_enhanced_mcp_server",
      "status": "partial - missing schema"
    },
    "create_example_api": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_high_level_api_example.py",
      "has_implementation": true,
      "implementation": "create_example_api",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/wal_high_level_api_example.py",
      "name": "create_example_api",
      "status": "partial - missing schema"
    },
    "create_example_configuration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from rbac_example.py",
      "has_implementation": true,
      "implementation": "create_example_configuration",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/rbac_example.py",
      "name": "create_example_configuration",
      "status": "partial - missing schema"
    },
    "create_example_usage_script": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_integration_patch.py",
      "has_implementation": true,
      "implementation": "create_example_usage_script",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_integration_patch.py",
      "name": "create_example_usage_script",
      "status": "partial - missing schema"
    },
    "create_file_with_type": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "create_file_with_type",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
      "name": "create_file_with_type",
      "status": "partial - missing schema"
    },
    "create_fixed_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_storage_backends.py",
      "has_implementation": true,
      "implementation": "create_fixed_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_storage_backends.py",
      "name": "create_fixed_mcp_server",
      "status": "partial - missing schema"
    },
    "create_fixed_method": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_ipfs_name_resolve_method.py",
      "has_implementation": true,
      "implementation": "create_fixed_method",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/fix_ipfs_name_resolve_method.py",
      "name": "create_fixed_method",
      "status": "partial - missing schema"
    },
    "create_fixed_server_script": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_api.py",
      "has_implementation": true,
      "implementation": "create_fixed_server_script",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_api.py",
      "name": "create_fixed_server_script",
      "status": "partial - missing schema"
    },
    "create_fs_ipfs_bridge": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_ipfs_bridge.py",
      "has_implementation": true,
      "implementation": "create_fs_ipfs_bridge",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/fs/fs_ipfs_bridge.py",
      "name": "create_fs_ipfs_bridge",
      "status": "partial - missing schema"
    },
    "create_fs_journal_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_ipfs_integration.py",
      "has_implementation": true,
      "implementation": "create_fs_journal_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_mcp_ipfs_integration.py",
      "name": "create_fs_journal_tools",
      "status": "partial - missing schema"
    },
    "create_index": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "create_index",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "create_index",
      "status": "partial - missing schema"
    },
    "create_init_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from generate_grpc_code.py",
      "has_implementation": true,
      "implementation": "create_init_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/bin/generate_grpc_code.py",
      "name": "create_init_files",
      "status": "partial - missing schema"
    },
    "create_ipfs_basic_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "create_ipfs_basic_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "create_ipfs_basic_tools",
      "status": "partial - missing schema"
    },
    "create_ipfs_extensions": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from implement_mcp_ipfs_tools.py",
      "has_implementation": true,
      "implementation": "create_ipfs_extensions",
      "implementation_file": "/home/barberb/ipfs_kit_py/implement_mcp_ipfs_tools.py",
      "name": "create_ipfs_extensions",
      "status": "partial - missing schema"
    },
    "create_ipfs_fs_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_ipfs_integration.py",
      "has_implementation": true,
      "implementation": "create_ipfs_fs_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_mcp_ipfs_integration.py",
      "name": "create_ipfs_fs_integration",
      "status": "partial - missing schema"
    },
    "create_ipfs_mcp_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from vscode_mcp_extension.py",
      "has_implementation": true,
      "implementation": "create_ipfs_mcp_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/vscode_mcp_extension.py",
      "name": "create_ipfs_mcp_config",
      "status": "partial - missing schema"
    },
    "create_ipfs_router": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from router.py",
      "has_implementation": true,
      "implementation": "create_ipfs_router",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs/router.py",
      "name": "create_ipfs_router",
      "status": "partial - missing schema"
    },
    "create_libp2p_mocks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_all_tests.py",
      "has_implementation": true,
      "implementation": "create_libp2p_mocks",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/fix_all_tests.py",
      "name": "create_libp2p_mocks",
      "status": "partial - missing schema"
    },
    "create_mcp_configuration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from update_cline_mcp_config.py",
      "has_implementation": true,
      "implementation": "create_mcp_configuration",
      "implementation_file": "/home/barberb/ipfs_kit_py/update_cline_mcp_config.py",
      "name": "create_mcp_configuration",
      "status": "partial - missing schema"
    },
    "create_mcp_loader": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from register_enhanced_tools.py",
      "has_implementation": true,
      "implementation": "create_mcp_loader",
      "implementation_file": "/home/barberb/ipfs_kit_py/register_enhanced_tools.py",
      "name": "create_mcp_loader",
      "status": "partial - missing schema"
    },
    "create_metalink": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from aria2_controller.py",
      "has_implementation": true,
      "implementation": "create_metalink",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/aria2_controller.py",
      "name": "create_metalink",
      "status": "partial - missing schema"
    },
    "create_metalink_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from aria2_controller_anyio.py",
      "has_implementation": true,
      "implementation": "create_metalink_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/aria2_controller_anyio.py",
      "name": "create_metalink_async",
      "status": "partial - missing schema"
    },
    "create_minimal_script": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_fix.py",
      "has_implementation": true,
      "implementation": "create_minimal_script",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_mcp_fix.py",
      "name": "create_minimal_script",
      "status": "partial - missing schema"
    },
    "create_missing_modules": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from patch_missing_methods.py",
      "has_implementation": true,
      "implementation": "create_missing_modules",
      "implementation_file": "/home/barberb/ipfs_kit_py/patch_missing_methods.py",
      "name": "create_missing_modules",
      "status": "partial - missing schema"
    },
    "create_mock_module": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_test_imports.py",
      "has_implementation": true,
      "implementation": "create_mock_module",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_test_patch.py",
      "name": "create_mock_module",
      "status": "partial - missing schema"
    },
    "create_mock_router": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_mcp_server.py",
      "has_implementation": true,
      "implementation": "create_mock_router",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fixed_mcp_server.py",
      "name": "create_mock_router",
      "status": "partial - missing schema"
    },
    "create_mock_schema": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from arrow_cluster_test_fixtures.py",
      "has_implementation": true,
      "implementation": "create_mock_schema",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_fixtures/arrow_cluster_test_fixtures.py",
      "name": "create_mock_schema",
      "status": "partial - missing schema"
    },
    "create_offer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_streaming.py",
      "has_implementation": true,
      "implementation": "create_offer",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_streaming.py",
      "name": "create_offer",
      "status": "partial - missing schema"
    },
    "create_patched_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from patch_direct_mcp.py",
      "has_implementation": true,
      "implementation": "create_patched_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/patch_direct_mcp.py",
      "name": "create_patched_mcp_server",
      "status": "partial - missing schema"
    },
    "create_protected_api_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integrate_auth.py",
      "has_implementation": true,
      "implementation": "create_protected_api_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/integrate_auth.py",
      "name": "create_protected_api_endpoint",
      "status": "partial - missing schema"
    },
    "create_repository": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_controller_anyio.py",
      "has_implementation": true,
      "implementation": "create_repository",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_huggingface_controller_anyio.py",
      "name": "create_repository",
      "status": "partial - missing schema"
    },
    "create_restart_script": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integrate_fs_with_tools.py",
      "has_implementation": true,
      "implementation": "create_restart_script",
      "implementation_file": "/home/barberb/ipfs_kit_py/patch_direct_mcp.py",
      "name": "create_restart_script",
      "status": "partial - missing schema"
    },
    "create_result_dict": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from lassie_kit.py",
      "has_implementation": true,
      "implementation": "create_result_dict",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
      "name": "create_result_dict",
      "status": "partial - missing schema"
    },
    "create_router": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_ipfs_bridge.py",
      "has_implementation": true,
      "implementation": "create_router",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/fs/fs_journal.py",
      "name": "create_router",
      "status": "partial - missing schema"
    },
    "create_s3_bucket": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_s3_implementation.py",
      "has_implementation": true,
      "implementation": "create_s3_bucket",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_s3_implementation.py",
      "name": "create_s3_bucket",
      "status": "partial - missing schema"
    },
    "create_sample_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from routing_optimization_demo.py",
      "has_implementation": true,
      "implementation": "create_sample_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/routing_optimization_demo.py",
      "name": "create_sample_content",
      "status": "partial - missing schema"
    },
    "create_simulation_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from check_and_fix_storage_backends.py",
      "has_implementation": true,
      "implementation": "create_simulation_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/utils/check/check_and_fix_storage_backends.py",
      "name": "create_simulation_response",
      "status": "partial - missing schema"
    },
    "create_stale_lock_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_lock_handling.py",
      "has_implementation": true,
      "implementation": "create_stale_lock_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_lock_handling.py",
      "name": "create_stale_lock_file",
      "status": "partial - missing schema"
    },
    "create_start_script": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from final_integration.py",
      "has_implementation": true,
      "implementation": "create_start_script",
      "implementation_file": "/home/barberb/ipfs_kit_py/final_integration.py",
      "name": "create_start_script",
      "status": "partial - missing schema"
    },
    "create_startup_script": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from patch_direct_mcp_server.py",
      "has_implementation": true,
      "implementation": "create_startup_script",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/api/implement_real_apis.py",
      "name": "create_startup_script",
      "status": "partial - missing schema"
    },
    "create_terminal_writer_mock": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_pytest_patch.py",
      "has_implementation": true,
      "implementation": "create_terminal_writer_mock",
      "implementation_file": "/home/barberb/ipfs_kit_py/fixed_pytest_patch.py",
      "name": "create_terminal_writer_mock",
      "status": "partial - missing schema"
    },
    "create_test_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_backends.py",
      "has_implementation": true,
      "implementation": "create_test_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_all_backends.py",
      "name": "create_test_file",
      "status": "partial - missing schema"
    },
    "create_test_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fsspec_benchmark.py",
      "has_implementation": true,
      "implementation": "create_test_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/fsspec_benchmark.py",
      "name": "create_test_files",
      "status": "partial - missing schema"
    },
    "create_test_fix_script": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_storage_backends.py",
      "has_implementation": true,
      "implementation": "create_test_fix_script",
      "implementation_file": "/home/barberb/ipfs_kit_py/backup_patches/fix_storage_backends.py",
      "name": "create_test_fix_script",
      "status": "partial - missing schema"
    },
    "create_test_init_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from migrate_mcp_tests.py",
      "has_implementation": true,
      "implementation": "create_test_init_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/migrate_mcp_tests.py",
      "name": "create_test_init_files",
      "status": "partial - missing schema"
    },
    "create_test_script": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from final_integration.py",
      "has_implementation": true,
      "implementation": "create_test_script",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/api/implement_real_apis.py",
      "name": "create_test_script",
      "status": "partial - missing schema"
    },
    "create_test_task_data": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cluster_state.py",
      "has_implementation": true,
      "implementation": "create_test_task_data",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cluster_state.py",
      "name": "create_test_task_data",
      "status": "partial - missing schema"
    },
    "create_token": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from streaming_security_integration.py",
      "has_implementation": true,
      "implementation": "create_token",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/streaming_security_integration.py",
      "name": "create_token",
      "status": "partial - missing schema"
    },
    "create_tool_implementations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_tool_coverage.py",
      "has_implementation": true,
      "implementation": "create_tool_implementations",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_tool_coverage.py",
      "name": "create_tool_implementations",
      "status": "partial - missing schema"
    },
    "create_tool_registry": {
      "auto_discovered": true,
      "description": "Tool implementation found in direct_tool_registry.py",
      "has_implementation": true,
      "implementation": "create_tool_registry",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_tool_registry.py",
      "name": "create_tool_registry",
      "status": "partial - missing schema"
    },
    "create_updated_startup_script": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_integration_patch.py",
      "has_implementation": true,
      "implementation": "create_updated_startup_script",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_integration_patch.py",
      "name": "create_updated_startup_script",
      "status": "partial - missing schema"
    },
    "create_verification_script": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integrate_fs_with_tools.py",
      "has_implementation": true,
      "implementation": "create_verification_script",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_ipfs_mcp_tools_integration.py",
      "name": "create_verification_script",
      "status": "partial - missing schema"
    },
    "custom_name": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_server.py",
      "has_implementation": true,
      "implementation": "fn",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
      "name": "custom_name",
      "status": "partial - missing schema"
    },
    "custom_parse_args": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_cli_integration_anyio.py",
      "has_implementation": true,
      "implementation": "custom_parse_args",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_cli_integration.py",
      "name": "custom_parse_args",
      "status": "partial - missing schema"
    },
    "daemon_start": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from patch_missing_methods.py",
      "has_implementation": true,
      "implementation": "daemon_start",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/lotus_kit.py",
      "name": "daemon_start",
      "status": "partial - missing schema"
    },
    "daemon_stop": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs.py",
      "has_implementation": true,
      "implementation": "daemon_stop",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "daemon_stop",
      "status": "partial - missing schema"
    },
    "dag_get": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_test_fixtures.py",
      "has_implementation": true,
      "implementation": "dag_get",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
      "name": "dag_get",
      "status": "partial - missing schema"
    },
    "dag_put": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_advanced_router.py",
      "has_implementation": true,
      "implementation": "dag_put",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
      "name": "dag_put",
      "status": "partial - missing schema"
    },
    "dag_resolve": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_controller.py",
      "has_implementation": true,
      "implementation": "dag_resolve",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
      "name": "dag_resolve",
      "status": "partial - missing schema"
    },
    "dashboard_routing": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from routing_dashboard.py",
      "has_implementation": true,
      "implementation": "dashboard_routing",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/routing_dashboard.py",
      "name": "dashboard_routing",
      "status": "partial - missing schema"
    },
    "dask_examples": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from data_science_examples.py",
      "has_implementation": true,
      "implementation": "dask_examples",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/data_science_examples.py",
      "name": "dask_examples",
      "status": "partial - missing schema"
    },
    "dataset_workflow": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from high_level_api_ai_ml_example.py",
      "has_implementation": true,
      "implementation": "dataset_workflow",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/high_level_api_ai_ml_example.py",
      "name": "dataset_workflow",
      "status": "partial - missing schema"
    },
    "deep_merge": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from arc_cache.py",
      "has_implementation": true,
      "implementation": "deep_merge",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/arc_cache.py",
      "name": "deep_merge",
      "status": "partial - missing schema"
    },
    "default": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "default",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "default",
      "status": "partial - missing schema"
    },
    "delayed_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dht_operations_extended.py",
      "has_implementation": true,
      "implementation": "delayed_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_extended.py",
      "name": "delayed_response",
      "status": "partial - missing schema"
    },
    "demo_huggingface_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from framework_integration_example.py",
      "has_implementation": true,
      "implementation": "demo_huggingface_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/framework_integration_example.py",
      "name": "demo_huggingface_integration",
      "status": "partial - missing schema"
    },
    "demo_langchain_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from framework_integration_example.py",
      "has_implementation": true,
      "implementation": "demo_langchain_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/framework_integration_example.py",
      "name": "demo_langchain_integration",
      "status": "partial - missing schema"
    },
    "demo_provide": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_dht_demo.py",
      "has_implementation": true,
      "implementation": "demo_provide",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/ipfs_dht_demo.py",
      "name": "demo_provide",
      "status": "partial - missing schema"
    },
    "demonstrate_basic_job_submission": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from distributed_training_example.py",
      "has_implementation": true,
      "implementation": "demonstrate_basic_job_submission",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/distributed_training_example.py",
      "name": "demonstrate_basic_job_submission",
      "status": "partial - missing schema"
    },
    "demonstrate_basic_queries": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from knowledge_graph_example.py",
      "has_implementation": true,
      "implementation": "demonstrate_basic_queries",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/knowledge_graph_example.py",
      "name": "demonstrate_basic_queries",
      "status": "partial - missing schema"
    },
    "demonstrate_basic_usage": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from model_registry_example.py",
      "has_implementation": true,
      "implementation": "demonstrate_basic_usage",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/model_registry_example.py",
      "name": "demonstrate_basic_usage",
      "status": "partial - missing schema"
    },
    "demonstrate_cost_based_routing": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from basic_routing.py",
      "has_implementation": true,
      "implementation": "demonstrate_cost_based_routing",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/examples/basic_routing.py",
      "name": "demonstrate_cost_based_routing",
      "status": "partial - missing schema"
    },
    "demonstrate_dynamic_management": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from rbac_example.py",
      "has_implementation": true,
      "implementation": "demonstrate_dynamic_management",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/rbac_example.py",
      "name": "demonstrate_dynamic_management",
      "status": "partial - missing schema"
    },
    "demonstrate_key_management": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from encryption_example.py",
      "has_implementation": true,
      "implementation": "demonstrate_key_management",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/encryption_example.py",
      "name": "demonstrate_key_management",
      "status": "partial - missing schema"
    },
    "demonstrate_peer_discovery": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_peer_discovery_anyio_example.py",
      "has_implementation": true,
      "implementation": "demonstrate_peer_discovery",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/libp2p_peer_discovery_anyio_example.py",
      "name": "demonstrate_peer_discovery",
      "status": "partial - missing schema"
    },
    "demonstrate_vector_search": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from knowledge_graph_example.py",
      "has_implementation": true,
      "implementation": "demonstrate_vector_search",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/knowledge_graph_example.py",
      "name": "demonstrate_vector_search",
      "status": "partial - missing schema"
    },
    "demonstrate_visualization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_visualization_example.py",
      "has_implementation": true,
      "implementation": "demonstrate_visualization",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/wal_visualization_example.py",
      "name": "demonstrate_visualization",
      "status": "partial - missing schema"
    },
    "deployment_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server.py",
      "has_implementation": true,
      "implementation": "get_deployment_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/direct_mcp_server.py",
      "name": "deployment_status",
      "status": "partial - missing schema"
    },
    "dht_findpeer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from missing_methods.py",
      "has_implementation": true,
      "implementation": "dht_findpeer",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "dht_findpeer",
      "status": "partial - missing schema"
    },
    "dict_to_struct": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from simple_grpc_client.py",
      "has_implementation": true,
      "implementation": "dict_to_struct",
      "implementation_file": "/home/barberb/ipfs_kit_py/bin/simple_grpc_client.py",
      "name": "dict_to_struct",
      "status": "partial - missing schema"
    },
    "direct_model_example": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_server_anyio_example.py",
      "has_implementation": true,
      "implementation": "direct_model_example",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/mcp_server_example.py",
      "name": "direct_model_example",
      "status": "partial - missing schema"
    },
    "directly_inject_methods": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_model_fix.py",
      "has_implementation": true,
      "implementation": "directly_inject_methods",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_model_fix.py",
      "name": "directly_inject_methods",
      "status": "partial - missing schema"
    },
    "disconnect_from_websocket_peer_discovery": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "disconnect_from_websocket_peer_discovery",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "disconnect_from_websocket_peer_discovery",
      "status": "partial - missing schema"
    },
    "disconnect_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_comprehensive.py",
      "has_implementation": true,
      "implementation": "disconnect_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_mcp_discovery_comprehensive.py",
      "name": "disconnect_server",
      "status": "partial - missing schema"
    },
    "discover": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_scenario.py",
      "has_implementation": true,
      "implementation": "discover",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_mcp_discovery_scenario.py",
      "name": "discover",
      "status": "partial - missing schema"
    },
    "discover_from_peer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_dht_operations.py",
      "has_implementation": true,
      "implementation": "discover_from_peer",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_dht_operations.py",
      "name": "discover_from_peer",
      "status": "partial - missing schema"
    },
    "discover_peers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_integration_anyio.py",
      "has_implementation": true,
      "implementation": "discover_peers",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/high_level_api_integration.py",
      "name": "discover_peers",
      "status": "partial - missing schema"
    },
    "dispatch_task": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "dispatch_task",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "dispatch_task",
      "status": "partial - missing schema"
    },
    "dispatch_task_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "dispatch_task_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "dispatch_task_async",
      "status": "partial - missing schema"
    },
    "distributed_training_workflow": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from high_level_api_ai_ml_example.py",
      "has_implementation": true,
      "implementation": "distributed_training_workflow",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/high_level_api_ai_ml_example.py",
      "name": "distributed_training_workflow",
      "status": "partial - missing schema"
    },
    "do_GET": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_local_filecoin.py",
      "has_implementation": true,
      "implementation": "do_GET",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_local_filecoin.py",
      "name": "do_GET",
      "status": "partial - missing schema"
    },
    "do_OPTIONS": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_jsonrpc_standalone.py",
      "has_implementation": true,
      "implementation": "do_OPTIONS",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_jsonrpc_standalone.py",
      "name": "do_OPTIONS",
      "status": "partial - missing schema"
    },
    "downgrade_to_leecher": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_dynamic_role_switching.py",
      "has_implementation": true,
      "implementation": "downgrade_to_leecher",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_dynamic_role_switching.py",
      "name": "downgrade_to_leecher",
      "status": "partial - missing schema"
    },
    "download_and_verify": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_backends_comprehensive.py",
      "has_implementation": true,
      "implementation": "download_and_verify",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/test_storage_backends_comprehensive.py",
      "name": "download_and_verify",
      "status": "partial - missing schema"
    },
    "download_binaries": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from __init__.py",
      "has_implementation": true,
      "implementation": "download_binaries",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/__init__.py",
      "name": "download_binaries",
      "status": "partial - missing schema"
    },
    "download_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from api.py",
      "has_implementation": true,
      "implementation": "download_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
      "name": "download_file",
      "status": "partial - missing schema"
    },
    "download_from_ipfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_backends_full.py",
      "has_implementation": true,
      "implementation": "download_from_ipfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/storage/test_storage_backends_full.py",
      "name": "download_from_ipfs",
      "status": "partial - missing schema"
    },
    "download_params": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from install_lotus.py",
      "has_implementation": true,
      "implementation": "download_params",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/install/install_lotus.py",
      "name": "download_params",
      "status": "partial - missing schema"
    },
    "echo_protocol_handler": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_protocol_negotiation_example.py",
      "has_implementation": true,
      "implementation": "echo_protocol_handler",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/libp2p_protocol_integration_example.py",
      "name": "echo_protocol_handler",
      "status": "partial - missing schema"
    },
    "edit_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server.py",
      "has_implementation": true,
      "implementation": "edit_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/direct_mcp_server.py",
      "name": "edit_file",
      "status": "partial - missing schema"
    },
    "emit_event": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_streaming_anyio.py",
      "has_implementation": true,
      "implementation": "emit_event",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_streaming.py",
      "name": "emit_event",
      "status": "partial - missing schema"
    },
    "enable_storage_backend": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from storage_backends_api.py",
      "has_implementation": true,
      "implementation": "enable_storage_backend",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/storage_backends_api.py",
      "name": "enable_storage_backend",
      "status": "partial - missing schema"
    },
    "endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from simple_mcp_server.py",
      "has_implementation": true,
      "implementation": "tool_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/simple_mcp_server.py",
      "name": "endpoint",
      "status": "partial - missing schema"
    },
    "enhance_existing_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "enhance_existing_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "enhance_existing_server",
      "status": "partial - missing schema"
    },
    "enhance_libp2p_peer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from gossipsub_protocol.py",
      "has_implementation": true,
      "implementation": "enhance_libp2p_peer",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/gossipsub_protocol.py",
      "name": "enhance_libp2p_peer",
      "status": "partial - missing schema"
    },
    "enhance_mcp_server_initialize": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "enhance_mcp_server_initialize",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "enhance_mcp_server_initialize",
      "status": "partial - missing schema"
    },
    "enhance_with_recursive_routing": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from recursive_routing.py",
      "has_implementation": true,
      "implementation": "enhance_with_recursive_routing",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/recursive_routing.py",
      "name": "enhance_with_recursive_routing",
      "status": "partial - missing schema"
    },
    "enhanced_find_providers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from recursive_routing.py",
      "has_implementation": true,
      "implementation": "enhanced_find_providers",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/recursive_routing.py",
      "name": "enhanced_find_providers",
      "status": "partial - missing schema"
    },
    "enhanced_initialize": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "enhanced_initialize",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "enhanced_initialize",
      "status": "partial - missing schema"
    },
    "ensure_binaries": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_binary_functionality.py",
      "has_implementation": true,
      "implementation": "ensure_binaries",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_binary_functionality.py",
      "name": "ensure_binaries",
      "status": "partial - missing schema"
    },
    "ensure_directory": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from migrate_mcp_tests.py",
      "has_implementation": true,
      "implementation": "ensure_directory",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_storage_backends.py",
      "name": "ensure_directory",
      "status": "partial - missing schema"
    },
    "ensure_directory_exists": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from organize_remaining_files.py",
      "has_implementation": true,
      "implementation": "ensure_directory_exists",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/migrate_mcp_tests.py",
      "name": "ensure_directory_exists",
      "status": "partial - missing schema"
    },
    "ensure_enhanced_implementation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_storacha_integration.py",
      "has_implementation": true,
      "implementation": "ensure_enhanced_implementation",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_storacha_integration.py",
      "name": "ensure_enhanced_implementation",
      "status": "partial - missing schema"
    },
    "ensure_ipfs_cluster_initialized": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_simple.py",
      "has_implementation": true,
      "implementation": "ensure_ipfs_cluster_initialized",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_simple.py",
      "name": "ensure_ipfs_cluster_initialized",
      "status": "partial - missing schema"
    },
    "ensure_ipfs_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_extensions.py",
      "has_implementation": true,
      "implementation": "ensure_ipfs_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/ipfs_extensions.py",
      "name": "ensure_ipfs_model",
      "status": "partial - missing schema"
    },
    "ensure_logger": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_fix_resource_handlers.py",
      "has_implementation": true,
      "implementation": "ensure_logger",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_fix_resource_handlers.py",
      "name": "ensure_logger",
      "status": "partial - missing schema"
    },
    "ensure_lotus_initialized": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_daemons.py",
      "has_implementation": true,
      "implementation": "ensure_lotus_initialized",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_daemons.py",
      "name": "ensure_lotus_initialized",
      "status": "partial - missing schema"
    },
    "ensure_module_available": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_ipfs_fs_integration.py",
      "has_implementation": true,
      "implementation": "ensure_module_available",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_ipfs_fs_integration.py",
      "name": "ensure_module_available",
      "status": "partial - missing schema"
    },
    "ensure_webrtc_in_module": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_wrapper.py",
      "has_implementation": true,
      "implementation": "ensure_webrtc_in_module",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/wrappers/mcp_wrapper.py",
      "name": "ensure_webrtc_in_module",
      "status": "partial - missing schema"
    },
    "enterprise_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integration.py",
      "has_implementation": true,
      "implementation": "enterprise_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/enterprise/integration.py",
      "name": "enterprise_status",
      "status": "partial - missing schema"
    },
    "escape_html": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from html.py",
      "has_implementation": true,
      "implementation": "escape_html",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pygments/formatters/html.py",
      "name": "escape_html",
      "status": "partial - missing schema"
    },
    "event_generator": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from unified_mcp_server.py",
      "has_implementation": true,
      "implementation": "event_generator",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/sse_cors_fix.py",
      "name": "event_generator",
      "status": "partial - missing schema"
    },
    "event_stream": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from complete_mcp_server.py",
      "has_implementation": true,
      "implementation": "event_stream",
      "implementation_file": "/home/barberb/ipfs_kit_py/complete_mcp_server.py",
      "name": "event_stream",
      "status": "partial - missing schema"
    },
    "example_ai_ml_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from graphql_example.py",
      "has_implementation": true,
      "implementation": "example_ai_ml_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/graphql_example.py",
      "name": "example_ai_ml_integration",
      "status": "partial - missing schema"
    },
    "example_content_type_detector": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_enhanced_examples.py",
      "has_implementation": true,
      "implementation": "example_content_type_detector",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/mfs_enhanced_examples.py",
      "name": "example_content_type_detector",
      "status": "partial - missing schema"
    },
    "example_context_manager": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from profile_example.py",
      "has_implementation": true,
      "implementation": "example_context_manager",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/profile_example.py",
      "name": "example_context_manager",
      "status": "partial - missing schema"
    },
    "example_correlation_tracking": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from profile_example.py",
      "has_implementation": true,
      "implementation": "example_correlation_tracking",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/profile_example.py",
      "name": "example_correlation_tracking",
      "status": "partial - missing schema"
    },
    "example_distributed_training": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration_example.py",
      "has_implementation": true,
      "implementation": "example_distributed_training",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/ai_ml_integration_example.py",
      "name": "example_distributed_training",
      "status": "partial - missing schema"
    },
    "example_file_like_interface": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_resumable_examples.py",
      "has_implementation": true,
      "implementation": "example_file_like_interface",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/mfs_resumable_examples.py",
      "name": "example_file_like_interface",
      "status": "partial - missing schema"
    },
    "example_ipfs_dataloader": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration_example.py",
      "has_implementation": true,
      "implementation": "example_ipfs_dataloader",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/ai_ml_integration_example.py",
      "name": "example_ipfs_dataloader",
      "status": "partial - missing schema"
    },
    "example_ipns_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from graphql_example.py",
      "has_implementation": true,
      "implementation": "example_ipns_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/graphql_example.py",
      "name": "example_ipns_operations",
      "status": "partial - missing schema"
    },
    "example_list_pinned_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from graphql_example.py",
      "has_implementation": true,
      "implementation": "example_list_pinned_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/graphql_example.py",
      "name": "example_list_pinned_content",
      "status": "partial - missing schema"
    },
    "example_manage_resumable_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_resumable_examples.py",
      "has_implementation": true,
      "implementation": "example_manage_resumable_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/mfs_resumable_examples.py",
      "name": "example_manage_resumable_operations",
      "status": "partial - missing schema"
    },
    "example_metrics_analysis": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from profile_example.py",
      "has_implementation": true,
      "implementation": "example_metrics_analysis",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/profile_example.py",
      "name": "example_metrics_analysis",
      "status": "partial - missing schema"
    },
    "example_mfs_change_watcher": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_enhanced_examples.py",
      "has_implementation": true,
      "implementation": "example_mfs_change_watcher",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/mfs_enhanced_examples.py",
      "name": "example_mfs_change_watcher",
      "status": "partial - missing schema"
    },
    "example_mfs_transaction": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_enhanced_examples.py",
      "has_implementation": true,
      "implementation": "example_mfs_transaction",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/mfs_enhanced_examples.py",
      "name": "example_mfs_transaction",
      "status": "partial - missing schema"
    },
    "example_model_registry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration_example.py",
      "has_implementation": true,
      "implementation": "example_model_registry",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/ai_ml_integration_example.py",
      "name": "example_model_registry",
      "status": "partial - missing schema"
    },
    "example_parallel_transfers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_resumable_examples.py",
      "has_implementation": true,
      "implementation": "example_parallel_transfers",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/mfs_resumable_examples.py",
      "name": "example_parallel_transfers",
      "status": "partial - missing schema"
    },
    "example_pin_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from graphql_example.py",
      "has_implementation": true,
      "implementation": "example_pin_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/graphql_example.py",
      "name": "example_pin_content",
      "status": "partial - missing schema"
    },
    "example_pytorch_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration_example.py",
      "has_implementation": true,
      "implementation": "example_pytorch_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/ai_ml_integration_example.py",
      "name": "example_pytorch_integration",
      "status": "partial - missing schema"
    },
    "example_resumable_write": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_resumable_examples.py",
      "has_implementation": true,
      "implementation": "example_resumable_write",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/mfs_resumable_examples.py",
      "name": "example_resumable_write",
      "status": "partial - missing schema"
    },
    "example_unpin_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from graphql_example.py",
      "has_implementation": true,
      "implementation": "example_unpin_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/graphql_example.py",
      "name": "example_unpin_content",
      "status": "partial - missing schema"
    },
    "example_usage": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integration.py",
      "has_implementation": true,
      "implementation": "example_usage",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/integration.py",
      "name": "example_usage",
      "status": "partial - missing schema"
    },
    "exec_": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from six.py",
      "has_implementation": true,
      "implementation": "exec_",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
      "name": "exec_",
      "status": "partial - missing schema"
    },
    "execute_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cli_controller_anyio.py",
      "has_implementation": true,
      "implementation": "execute_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/cli_controller_anyio.py",
      "name": "execute_command",
      "status": "partial - missing schema"
    },
    "execute_graphql": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from graphql_schema.py",
      "has_implementation": true,
      "implementation": "execute_graphql",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/graphql_schema.py",
      "name": "execute_graphql",
      "status": "partial - missing schema"
    },
    "execute_training_task": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "execute_training_task",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "execute_training_task",
      "status": "partial - missing schema"
    },
    "exists": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_high_level_api.py",
      "has_implementation": true,
      "implementation": "exists",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
      "name": "exists",
      "status": "partial - missing schema"
    },
    "experimental_api": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from api_stability.py",
      "has_implementation": true,
      "implementation": "experimental_api",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api_stability.py",
      "name": "experimental_api",
      "status": "partial - missing schema"
    },
    "export": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_controller.py",
      "has_implementation": true,
      "implementation": "export",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/fs_journal_controller_anyio.py",
      "name": "export",
      "status": "partial - missing schema"
    },
    "export_to_ipfs": {
      "auto_discovered": true,
      "description": "Tool implementation found in enhanced_final_mcp_server.py",
      "has_implementation": true,
      "implementation": "export_to_ipfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhanced_final_mcp_server.py",
      "name": "export_to_ipfs",
      "status": "partial - missing schema"
    },
    "extend_high_level_api": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_telemetry_api.py",
      "has_implementation": true,
      "implementation": "extend_high_level_api",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_telemetry_api_anyio.py",
      "name": "extend_high_level_api",
      "status": "partial - missing schema"
    },
    "extend_high_level_api_class": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from high_level_api_integration.py",
      "has_implementation": true,
      "implementation": "extend_high_level_api_class",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/high_level_api_integration.py",
      "name": "extend_high_level_api_class",
      "status": "partial - missing schema"
    },
    "extend_ipfs_kit_class": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit_integration.py",
      "has_implementation": true,
      "implementation": "extend_ipfs_kit_class",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/ipfs_kit_integration.py",
      "name": "extend_ipfs_kit_class",
      "status": "partial - missing schema"
    },
    "extract_car": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "extract_car",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "extract_car",
      "status": "partial - missing schema"
    },
    "fetch_cid_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_lassie_controller_anyio.py",
      "has_implementation": true,
      "implementation": "fetch_cid_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
      "name": "fetch_cid_async",
      "status": "partial - missing schema"
    },
    "file_exists": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server_with_tools.py",
      "has_implementation": true,
      "implementation": "file_exists",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_mcp_server.py",
      "name": "file_exists",
      "status": "partial - missing schema"
    },
    "file_ns_handler": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from __init__.py",
      "has_implementation": true,
      "implementation": "file_ns_handler",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "name": "file_ns_handler",
      "status": "partial - missing schema"
    },
    "file_upload_test": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fixes.py",
      "has_implementation": true,
      "implementation": "file_upload_test",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_fixes.py",
      "name": "file_upload_test",
      "status": "partial - missing schema"
    },
    "filecoin_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_extensions.py",
      "has_implementation": true,
      "implementation": "filecoin_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/enhanced_filecoin.py",
      "name": "filecoin_status",
      "status": "partial - missing schema"
    },
    "filecoin_to_ipfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_filecoin_integration.py",
      "has_implementation": true,
      "implementation": "filecoin_to_ipfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_filecoin_integration.py",
      "name": "filecoin_to_ipfs",
      "status": "partial - missing schema"
    },
    "files_ls_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_high_level_api.py",
      "has_implementation": true,
      "implementation": "files_ls_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
      "name": "files_ls_async",
      "status": "partial - missing schema"
    },
    "files_mkdir": {
      "auto_discovered": true,
      "description": "Tool implementation found in enhanced_final_mcp_server.py",
      "has_implementation": true,
      "implementation": "files_mkdir",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "files_mkdir",
      "status": "partial - missing schema"
    },
    "files_read_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_high_level_api.py",
      "has_implementation": true,
      "implementation": "files_read_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
      "name": "files_read_async",
      "status": "partial - missing schema"
    },
    "files_rm_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_high_level_api.py",
      "has_implementation": true,
      "implementation": "files_rm_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
      "name": "files_rm_async",
      "status": "partial - missing schema"
    },
    "files_stat": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "files_stat",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "files_stat",
      "status": "partial - missing schema"
    },
    "files_write_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_high_level_api.py",
      "has_implementation": true,
      "implementation": "files_write_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
      "name": "files_write_async",
      "status": "partial - missing schema"
    },
    "filter_notification_types_by_role": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from streaming_security_integration.py",
      "has_implementation": true,
      "implementation": "filter_notification_types_by_role",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/streaming_security_integration.py",
      "name": "filter_notification_types_by_role",
      "status": "partial - missing schema"
    },
    "final": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from typing_extensions.py",
      "has_implementation": true,
      "implementation": "final",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/typing_extensions.py",
      "name": "final",
      "status": "partial - missing schema"
    },
    "find_ai_ml_resources": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_metadata_example.py",
      "has_implementation": true,
      "implementation": "find_ai_ml_resources",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/arrow_metadata_index.py",
      "name": "find_ai_ml_resources",
      "status": "partial - missing schema"
    },
    "find_ai_ml_resources_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from arrow_metadata_index_anyio.py",
      "has_implementation": true,
      "implementation": "find_ai_ml_resources_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/arrow_metadata_index_anyio.py",
      "name": "find_ai_ml_resources_async",
      "status": "partial - missing schema"
    },
    "find_all_storacha_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_all_storacha.py",
      "has_implementation": true,
      "implementation": "find_all_storacha_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_all_storacha.py",
      "name": "find_all_storacha_files",
      "status": "partial - missing schema"
    },
    "find_all_test_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_all_tests.py",
      "has_implementation": true,
      "implementation": "find_all_test_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_all_tests.py",
      "name": "find_all_test_files",
      "status": "partial - missing schema"
    },
    "find_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_dht_discovery.py",
      "has_implementation": true,
      "implementation": "find_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/enhanced_dht_discovery.py",
      "name": "find_content",
      "status": "partial - missing schema"
    },
    "find_direct_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_jsonrpc_dispatcher.py",
      "has_implementation": true,
      "implementation": "find_direct_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_jsonrpc_dispatcher.py",
      "name": "find_direct_mcp_server",
      "status": "partial - missing schema"
    },
    "find_get_tools_function": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_jsonrpc_run_method.py",
      "has_implementation": true,
      "implementation": "find_get_tools_function",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_jsonrpc_run_method.py",
      "name": "find_get_tools_function",
      "status": "partial - missing schema"
    },
    "find_ipfs_model_anyio_module": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_ipfs_model.py",
      "has_implementation": true,
      "implementation": "find_ipfs_model_anyio_module",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_ipfs_model.py",
      "name": "find_ipfs_model_anyio_module",
      "status": "partial - missing schema"
    },
    "find_ipfs_model_class": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_ipfs_model.py",
      "has_implementation": true,
      "implementation": "find_ipfs_model_class",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_ipfs_model.py",
      "name": "find_ipfs_model_class",
      "status": "partial - missing schema"
    },
    "find_lassie_binary": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_lassie.py",
      "has_implementation": true,
      "implementation": "find_lassie_binary",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_lassie.py",
      "name": "find_lassie_binary",
      "status": "partial - missing schema"
    },
    "find_mcp_package_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_resource_handler.py",
      "has_implementation": true,
      "implementation": "find_mcp_package_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_mcp_resource_handler.py",
      "name": "find_mcp_package_files",
      "status": "partial - missing schema"
    },
    "find_mcp_resource_handlers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_fix_resource_handlers.py",
      "has_implementation": true,
      "implementation": "find_mcp_resource_handlers",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_fix_resource_handlers.py",
      "name": "find_mcp_resource_handlers",
      "status": "partial - missing schema"
    },
    "find_mcp_server_processes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from restart_mcp_server.py",
      "has_implementation": true,
      "implementation": "find_mcp_server_processes",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/server/restart_mcp_server.py",
      "name": "find_mcp_server_processes",
      "status": "partial - missing schema"
    },
    "find_mcp_settings": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_vscode_mcp_connection.py",
      "has_implementation": true,
      "implementation": "find_mcp_settings",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_vscode_mcp_connection.py",
      "name": "find_mcp_settings",
      "status": "partial - missing schema"
    },
    "find_method": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_ipfs_name_resolve_method.py",
      "has_implementation": true,
      "implementation": "find_method",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/fix_ipfs_name_resolve_method.py",
      "name": "find_method",
      "status": "partial - missing schema"
    },
    "find_providers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from recursive_routing.py",
      "has_implementation": true,
      "implementation": "find_providers",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/recursive_routing.py",
      "name": "find_providers",
      "status": "partial - missing schema"
    },
    "find_providers_advanced": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from __init__.py",
      "has_implementation": true,
      "implementation": "find_providers_advanced",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/__init__.py",
      "name": "find_providers_advanced",
      "status": "partial - missing schema"
    },
    "find_python_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_issues.py",
      "has_implementation": true,
      "implementation": "find_python_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_code.py",
      "name": "find_python_files",
      "status": "partial - missing schema"
    },
    "find_running_mcp_servers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from improved_mcp_server.py",
      "has_implementation": true,
      "implementation": "find_running_mcp_servers",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/improved_mcp_server.py",
      "name": "find_running_mcp_servers",
      "status": "partial - missing schema"
    },
    "find_similar_models": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from arrow_metadata_index.py",
      "has_implementation": true,
      "implementation": "find_similar_models",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/arrow_metadata_index.py",
      "name": "find_similar_models",
      "status": "partial - missing schema"
    },
    "find_test_modules": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_enhanced_tests.py",
      "has_implementation": true,
      "implementation": "find_test_modules",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
      "name": "find_test_modules",
      "status": "partial - missing schema"
    },
    "fix_all_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_ipfs_integration.py",
      "has_implementation": true,
      "implementation": "fix_all_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_mcp_ipfs_integration.py",
      "name": "fix_all_files",
      "status": "partial - missing schema"
    },
    "fix_all_mcp_api_issues": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_api_simplified.py",
      "has_implementation": true,
      "implementation": "fix_all_mcp_api_issues",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_api_final.py",
      "name": "fix_all_mcp_api_issues",
      "status": "partial - missing schema"
    },
    "fix_api_path_prefix": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_api_path_prefix.py",
      "has_implementation": true,
      "implementation": "fix_api_path_prefix",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_api_path_prefix.py",
      "name": "fix_api_path_prefix",
      "status": "partial - missing schema"
    },
    "fix_assertion_module": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from pytest_patch.py",
      "has_implementation": true,
      "implementation": "fix_assertion_module",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_all_tests.py",
      "name": "fix_assertion_module",
      "status": "partial - missing schema"
    },
    "fix_asyncio_sleep": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_asyncio_sleep.py",
      "has_implementation": true,
      "implementation": "fix_asyncio_sleep",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_asyncio_sleep.py",
      "name": "fix_asyncio_sleep",
      "status": "partial - missing schema"
    },
    "fix_bare_excepts": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_errors.py",
      "has_implementation": true,
      "implementation": "fix_bare_excepts",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_errors.py",
      "name": "fix_bare_excepts",
      "status": "partial - missing schema"
    },
    "fix_blue_green_proxy": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_server_refactoring.py",
      "has_implementation": true,
      "implementation": "fix_blue_green_proxy",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_server_refactoring.py",
      "name": "fix_blue_green_proxy",
      "status": "partial - missing schema"
    },
    "fix_cline_mcp_settings": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_cline_mcp_tools.py",
      "has_implementation": true,
      "implementation": "fix_cline_mcp_settings",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_cline_mcp_tools.py",
      "name": "fix_cline_mcp_settings",
      "status": "partial - missing schema"
    },
    "fix_controller_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_ipfs_controller_comprehensive.py",
      "has_implementation": true,
      "implementation": "fix_controller_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_ipfs_controller_comprehensive.py",
      "name": "fix_controller_file",
      "status": "partial - missing schema"
    },
    "fix_controllers_folder_structure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_controllers.py",
      "has_implementation": true,
      "implementation": "fix_controllers_folder_structure",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_controllers.py",
      "name": "fix_controllers_folder_structure",
      "status": "partial - missing schema"
    },
    "fix_direct_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_ipfs_integration.py",
      "has_implementation": true,
      "implementation": "fix_direct_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_mcp_ipfs_integration.py",
      "name": "fix_direct_mcp_server",
      "status": "partial - missing schema"
    },
    "fix_direct_resource_handlers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_fix_resource_handlers.py",
      "has_implementation": true,
      "implementation": "fix_direct_resource_handlers",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_fix_resource_handlers.py",
      "name": "fix_direct_resource_handlers",
      "status": "partial - missing schema"
    },
    "fix_directly_in_mcp_module": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_fix_resource_handlers.py",
      "has_implementation": true,
      "implementation": "fix_directly_in_mcp_module",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_fix_resource_handlers.py",
      "name": "fix_directly_in_mcp_module",
      "status": "partial - missing schema"
    },
    "fix_fastapi_imports": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from patch_missing_methods.py",
      "has_implementation": true,
      "implementation": "fix_fastapi_imports",
      "implementation_file": "/home/barberb/ipfs_kit_py/patch_missing_methods.py",
      "name": "fix_fastapi_imports",
      "status": "partial - missing schema"
    },
    "fix_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_ipfs_name_resolve_method.py",
      "has_implementation": true,
      "implementation": "fix_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/fix_ipfs_name_resolve_method.py",
      "name": "fix_file",
      "status": "partial - missing schema"
    },
    "fix_get_tools_handler": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_jsonrpc_handler.py",
      "has_implementation": true,
      "implementation": "fix_get_tools_handler",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_jsonrpc_handler.py",
      "name": "fix_get_tools_handler",
      "status": "partial - missing schema"
    },
    "fix_if_block_indentation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_if_block_indentation.py",
      "has_implementation": true,
      "implementation": "fix_if_block_indentation",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_if_block_indentation.py",
      "name": "fix_if_block_indentation",
      "status": "partial - missing schema"
    },
    "fix_import_in_final_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_import.py",
      "has_implementation": true,
      "implementation": "fix_import_in_final_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_mcp_import.py",
      "name": "fix_import_in_final_mcp_server",
      "status": "partial - missing schema"
    },
    "fix_import_issue": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_fix.py",
      "has_implementation": true,
      "implementation": "fix_import_issue",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_mcp_fix.py",
      "name": "fix_import_issue",
      "status": "partial - missing schema"
    },
    "fix_import_paths": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_all_tests.py",
      "has_implementation": true,
      "implementation": "fix_import_paths",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/run_fixed_mcp_server.py",
      "name": "fix_import_paths",
      "status": "partial - missing schema"
    },
    "fix_indentation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_indentation.py",
      "has_implementation": true,
      "implementation": "fix_indentation",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_indentation.py",
      "name": "fix_indentation",
      "status": "partial - missing schema"
    },
    "fix_init_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_init_files.py",
      "has_implementation": true,
      "implementation": "fix_init_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_init_files.py",
      "name": "fix_init_files",
      "status": "partial - missing schema"
    },
    "fix_integration_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_ipfs_tools_integration.py",
      "has_implementation": true,
      "implementation": "fix_integration_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_tools_for_fastmcp.py",
      "name": "fix_integration_file",
      "status": "partial - missing schema"
    },
    "fix_ipfs_cat_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_api_simplified.py",
      "has_implementation": true,
      "implementation": "fix_ipfs_cat_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_api.py",
      "name": "fix_ipfs_cat_endpoint",
      "status": "partial - missing schema"
    },
    "fix_ipfs_controller": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_response_model.py",
      "has_implementation": true,
      "implementation": "fix_ipfs_controller",
      "implementation_file": "/home/barberb/ipfs_kit_py/backup_patches/fix_response_model.py",
      "name": "fix_ipfs_controller",
      "status": "partial - missing schema"
    },
    "fix_ipfs_controller_anyio": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_form_data.py",
      "has_implementation": true,
      "implementation": "fix_ipfs_controller_anyio",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_form_data.py",
      "name": "fix_ipfs_controller_anyio",
      "status": "partial - missing schema"
    },
    "fix_ipfs_daemon_startup": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_ipfs_kit_errors.py",
      "has_implementation": true,
      "implementation": "fix_ipfs_daemon_startup",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_ipfs_kit_errors.py",
      "name": "fix_ipfs_daemon_startup",
      "status": "partial - missing schema"
    },
    "fix_ipfs_kit_constructor": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_all_tests.py",
      "has_implementation": true,
      "implementation": "fix_ipfs_kit_constructor",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/fix_all_tests.py",
      "name": "fix_ipfs_kit_constructor",
      "status": "partial - missing schema"
    },
    "fix_ipfs_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_server_combined.py",
      "has_implementation": true,
      "implementation": "fix_ipfs_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_fix.py",
      "name": "fix_ipfs_model",
      "status": "partial - missing schema"
    },
    "fix_ipfs_model_extensions": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_cline_mcp_tools.py",
      "has_implementation": true,
      "implementation": "fix_ipfs_model_extensions",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_cline_mcp_tools.py",
      "name": "fix_ipfs_model_extensions",
      "status": "partial - missing schema"
    },
    "fix_jsonrpc_url": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_jsonrpc_url.py",
      "has_implementation": true,
      "implementation": "fix_jsonrpc_url",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_jsonrpc_url.py",
      "name": "fix_jsonrpc_url",
      "status": "partial - missing schema"
    },
    "fix_kademlia_extensions": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_kademlia_extensions.py",
      "has_implementation": true,
      "implementation": "fix_kademlia_extensions",
      "implementation_file": "/home/barberb/ipfs_kit_py/backup_patches/fix_kademlia_extensions.py",
      "name": "fix_kademlia_extensions",
      "status": "partial - missing schema"
    },
    "fix_line_881": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_line_881.py",
      "has_implementation": true,
      "implementation": "fix_line_881",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_line_881.py",
      "name": "fix_line_881",
      "status": "partial - missing schema"
    },
    "fix_logger_info": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_logger_info.py",
      "has_implementation": true,
      "implementation": "fix_logger_info",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_logger_info.py",
      "name": "fix_logger_info",
      "status": "partial - missing schema"
    },
    "fix_lotus_client": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_lotus_client.py",
      "has_implementation": true,
      "implementation": "fix_lotus_client",
      "implementation_file": "/home/barberb/ipfs_kit_py/backup_patches/fix_lotus_client.py",
      "name": "fix_lotus_client",
      "status": "partial - missing schema"
    },
    "fix_mcp_schema": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_schema.py",
      "has_implementation": true,
      "implementation": "fix_mcp_schema",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_mcp_schema.py",
      "name": "fix_mcp_schema",
      "status": "partial - missing schema"
    },
    "fix_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_registration_order.py",
      "has_implementation": true,
      "implementation": "fix_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_registration_order.py",
      "name": "fix_mcp_server",
      "status": "partial - missing schema"
    },
    "fix_mcp_settings": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_vscode_mcp_connection.py",
      "has_implementation": true,
      "implementation": "fix_mcp_settings",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_vscode_mcp_connection.py",
      "name": "fix_mcp_settings",
      "status": "partial - missing schema"
    },
    "fix_missing_except": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_missing_except.py",
      "has_implementation": true,
      "implementation": "fix_missing_except",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_missing_except.py",
      "name": "fix_missing_except",
      "status": "partial - missing schema"
    },
    "fix_missing_parentheses": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_missing_parentheses.py",
      "has_implementation": true,
      "implementation": "fix_missing_parentheses",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_missing_parentheses.py",
      "name": "fix_missing_parentheses",
      "status": "partial - missing schema"
    },
    "fix_parentheses": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_list_comprehension.py",
      "has_implementation": true,
      "implementation": "fix_parentheses",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_list_comprehension.py",
      "name": "fix_parentheses",
      "status": "partial - missing schema"
    },
    "fix_pytest_call": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_pytest_call.py",
      "has_implementation": true,
      "implementation": "fix_pytest_call",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_pytest_call.py",
      "name": "fix_pytest_call",
      "status": "partial - missing schema"
    },
    "fix_register_all_controller_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_resource_handler.py",
      "has_implementation": true,
      "implementation": "fix_register_all_controller_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_mcp_resource_handler.py",
      "name": "fix_register_all_controller_tools",
      "status": "partial - missing schema"
    },
    "fix_register_with_app": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_api.py",
      "has_implementation": true,
      "implementation": "fix_register_with_app",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_api.py",
      "name": "fix_register_with_app",
      "status": "partial - missing schema"
    },
    "fix_registry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_ipfs_tools_registry.py",
      "has_implementation": true,
      "implementation": "fix_registry",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_ipfs_registry_complete.py",
      "name": "fix_registry",
      "status": "partial - missing schema"
    },
    "fix_root_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_api_simplified.py",
      "has_implementation": true,
      "implementation": "fix_root_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_api_final.py",
      "name": "fix_root_endpoint",
      "status": "partial - missing schema"
    },
    "fix_run_direct_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_ipfs_integration.py",
      "has_implementation": true,
      "implementation": "fix_run_direct_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_mcp_ipfs_integration.py",
      "name": "fix_run_direct_mcp_server",
      "status": "partial - missing schema"
    },
    "fix_server_bridge": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from implement_mcp_ipfs_tools.py",
      "has_implementation": true,
      "implementation": "fix_server_bridge",
      "implementation_file": "/home/barberb/ipfs_kit_py/implement_mcp_ipfs_tools.py",
      "name": "fix_server_bridge",
      "status": "partial - missing schema"
    },
    "fix_server_constructor": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_server_constructor_final.py",
      "has_implementation": true,
      "implementation": "fix_server_constructor",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_server_constructor.py",
      "name": "fix_server_constructor",
      "status": "partial - missing schema"
    },
    "fix_server_indentation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_server_indentation.py",
      "has_implementation": true,
      "implementation": "fix_server_indentation",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_server_indentation.py",
      "name": "fix_server_indentation",
      "status": "partial - missing schema"
    },
    "fix_server_registration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_server_registration.py",
      "has_implementation": true,
      "implementation": "fix_server_registration",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_server_registration.py",
      "name": "fix_server_registration",
      "status": "partial - missing schema"
    },
    "fix_server_startup": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tool_coverage.py",
      "has_implementation": true,
      "implementation": "fix_server_startup",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tool_coverage.py",
      "name": "fix_server_startup",
      "status": "partial - missing schema"
    },
    "fix_specific_method": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_lotus_function.py",
      "has_implementation": true,
      "implementation": "fix_specific_method",
      "implementation_file": "/home/barberb/ipfs_kit_py/backup_patches/fix_lotus_function.py",
      "name": "fix_specific_method",
      "status": "partial - missing schema"
    },
    "fix_storage_manager_controller": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_controllers.py",
      "has_implementation": true,
      "implementation": "fix_storage_manager_controller",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_controllers.py",
      "name": "fix_storage_manager_controller",
      "status": "partial - missing schema"
    },
    "fix_subprocess_call": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_subprocess_call.py",
      "has_implementation": true,
      "implementation": "fix_subprocess_call",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_subprocess_call.py",
      "name": "fix_subprocess_call",
      "status": "partial - missing schema"
    },
    "fix_subprocess_popen": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_subprocess_popen.py",
      "has_implementation": true,
      "implementation": "fix_subprocess_popen",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_subprocess_popen.py",
      "name": "fix_subprocess_popen",
      "status": "partial - missing schema"
    },
    "fix_syntax_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_direct_mcp_server.py",
      "has_implementation": true,
      "implementation": "fix_syntax_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_controller_syntax.py",
      "name": "fix_syntax_error",
      "status": "partial - missing schema"
    },
    "fix_syntax_errors": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_all_syntax_errors.py",
      "has_implementation": true,
      "implementation": "fix_syntax_errors",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_all_syntax_errors.py",
      "name": "fix_syntax_errors",
      "status": "partial - missing schema"
    },
    "fix_tools_registry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_tools_registry.py",
      "has_implementation": true,
      "implementation": "fix_tools_registry",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_tools_registry.py",
      "name": "fix_tools_registry",
      "status": "partial - missing schema"
    },
    "fix_trailing_commas": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_syntax.py",
      "has_implementation": true,
      "implementation": "fix_trailing_commas",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_syntax.py",
      "name": "fix_trailing_commas",
      "status": "partial - missing schema"
    },
    "fix_undefined_imports": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_errors.py",
      "has_implementation": true,
      "implementation": "fix_undefined_imports",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_errors.py",
      "name": "fix_undefined_imports",
      "status": "partial - missing schema"
    },
    "fix_unmatched_parenthesis": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_unmatched_parenthesis2.py",
      "has_implementation": true,
      "implementation": "fix_unmatched_parenthesis",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_unmatched_parenthesis.py",
      "name": "fix_unmatched_parenthesis",
      "status": "partial - missing schema"
    },
    "fix_unused_imports": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_ruff_issues.py",
      "has_implementation": true,
      "implementation": "fix_unused_imports",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_ruff_issues.py",
      "name": "fix_unused_imports",
      "status": "partial - missing schema"
    },
    "fixture": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_pytest_anyio.py",
      "has_implementation": true,
      "implementation": "fixture",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/fix_libp2p_mocks.py",
      "name": "fixture",
      "status": "partial - missing schema"
    },
    "format_as_index": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from _utils.py",
      "has_implementation": true,
      "implementation": "format_as_index",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/jsonschema/_utils.py",
      "name": "format_as_index",
      "status": "partial - missing schema"
    },
    "format_size": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_benchmark_framework.py",
      "has_implementation": true,
      "implementation": "format_size",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/performance/test_benchmark_framework.py",
      "name": "format_size",
      "status": "partial - missing schema"
    },
    "from_int": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from retry.py",
      "has_implementation": true,
      "implementation": "from_int",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/urllib3/util/retry.py",
      "name": "from_int",
      "status": "partial - missing schema"
    },
    "fs_journal_checkpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from api.py",
      "has_implementation": true,
      "implementation": "fs_journal_checkpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
      "name": "fs_journal_checkpoint",
      "status": "partial - missing schema"
    },
    "fs_journal_get_history": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_ipfs_fs_integration.py",
      "has_implementation": true,
      "implementation": "fs_journal_get_history",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_ipfs_fs_integration.py",
      "name": "fs_journal_get_history",
      "status": "partial - missing schema"
    },
    "fs_journal_list_tracked": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_tools.py",
      "has_implementation": true,
      "implementation": "fs_journal_list_tracked",
      "implementation_file": "/home/barberb/ipfs_kit_py/fs_journal_tools.py",
      "name": "fs_journal_list_tracked",
      "status": "partial - missing schema"
    },
    "fs_journal_revert": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_ipfs_fs_integration.py",
      "has_implementation": true,
      "implementation": "fs_journal_revert",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_ipfs_fs_integration.py",
      "name": "fs_journal_revert",
      "status": "partial - missing schema"
    },
    "fs_journal_track": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_tools.py",
      "has_implementation": true,
      "implementation": "fs_journal_track",
      "implementation_file": "/home/barberb/ipfs_kit_py/fs_journal_tools.py",
      "name": "fs_journal_track",
      "status": "partial - missing schema"
    },
    "fs_list_directory": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "fs_list_directory",
      "implementation_file": "/home/barberb/ipfs_kit_py/minimal_mcp_server.py",
      "name": "fs_list_directory",
      "status": "partial - missing schema"
    },
    "fs_read_file": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "fs_read_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/vscode_compatible_mcp_server.py",
      "name": "fs_read_file",
      "status": "partial - missing schema"
    },
    "fs_write_file": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "fs_write_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/minimal_mcp_server.py",
      "name": "fs_write_file",
      "status": "partial - missing schema"
    },
    "full_workflow_example": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from data_science_examples.py",
      "has_implementation": true,
      "implementation": "full_workflow_example",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/data_science_examples.py",
      "name": "full_workflow_example",
      "status": "partial - missing schema"
    },
    "generate_embedding": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_integrated_search.py",
      "has_implementation": true,
      "implementation": "generate_embedding",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_integrated_search.py",
      "name": "generate_embedding",
      "status": "partial - missing schema"
    },
    "generate_journal_dashboard": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_controller_anyio.py",
      "has_implementation": true,
      "implementation": "generate_journal_dashboard",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/fs_journal_controller_anyio.py",
      "name": "generate_journal_dashboard",
      "status": "partial - missing schema"
    },
    "generate_latest": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from metrics.py",
      "has_implementation": true,
      "implementation": "generate_latest",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/metrics.py",
      "name": "generate_latest",
      "status": "partial - missing schema"
    },
    "generate_random_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_file_add.py",
      "has_implementation": true,
      "implementation": "generate_random_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_file_add.py",
      "name": "generate_random_content",
      "status": "partial - missing schema"
    },
    "generate_sample_data": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_visualization_example.py",
      "has_implementation": true,
      "implementation": "generate_sample_data",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/wal_visualization_example.py",
      "name": "generate_sample_data",
      "status": "partial - missing schema"
    },
    "generate_test_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_telemetry_example.py",
      "has_implementation": true,
      "implementation": "generate_test_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/wal_telemetry_example.py",
      "name": "generate_test_operations",
      "status": "partial - missing schema"
    },
    "generate_visualization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_api_anyio.py",
      "has_implementation": true,
      "implementation": "generate_visualization",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_api_anyio.py",
      "name": "generate_visualization",
      "status": "partial - missing schema"
    },
    "get": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_high_level_api.py",
      "has_implementation": true,
      "implementation": "get",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/mock_ipfs_kit.py",
      "name": "get",
      "status": "partial - missing schema"
    },
    "get_alert_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from observability_api.py",
      "has_implementation": true,
      "implementation": "get_alert_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/observability_api.py",
      "name": "get_alert_config",
      "status": "partial - missing schema"
    },
    "get_all": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_test_runner.py",
      "has_implementation": true,
      "implementation": "get_all",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/daemon/daemon_manager.py",
      "name": "get_all",
      "status": "partial - missing schema"
    },
    "get_all_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_tools.py",
      "has_implementation": true,
      "implementation": "get_all_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/verify_tools.py",
      "name": "get_all_tools",
      "status": "partial - missing schema"
    },
    "get_annotations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from typing_extensions.py",
      "has_implementation": true,
      "implementation": "get_annotations",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/typing_extensions.py",
      "name": "get_annotations",
      "status": "partial - missing schema"
    },
    "get_api_extension": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_telemetry_api_anyio.py",
      "has_implementation": true,
      "implementation": "get_api_extension",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_telemetry_api_anyio.py",
      "name": "get_api_extension",
      "status": "partial - missing schema"
    },
    "get_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_high_level_api.py",
      "has_implementation": true,
      "implementation": "get_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
      "name": "get_async",
      "status": "partial - missing schema"
    },
    "get_available_backends": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_ipfs_model.py",
      "has_implementation": true,
      "implementation": "get_available_backends",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_ipfs_model.py",
      "name": "get_available_backends",
      "status": "partial - missing schema"
    },
    "get_available_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_tools.py",
      "has_implementation": true,
      "implementation": "get_available_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/test_mcp_tools.py",
      "name": "get_available_tools",
      "status": "partial - missing schema"
    },
    "get_available_workers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integrated_search.py",
      "has_implementation": true,
      "implementation": "get_available_workers",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/integrated_search.py",
      "name": "get_available_workers",
      "status": "partial - missing schema"
    },
    "get_backend": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "get_backend",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/storage/storacha_model_anyio.py",
      "name": "get_backend",
      "status": "partial - missing schema"
    },
    "get_backend_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from metrics_router.py",
      "has_implementation": true,
      "implementation": "get_backend_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/metrics_router.py",
      "name": "get_backend_health",
      "status": "partial - missing schema"
    },
    "get_backend_module": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from migration.py",
      "has_implementation": true,
      "implementation": "get_backend_module",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/migration.py",
      "name": "get_backend_module",
      "status": "partial - missing schema"
    },
    "get_benchmark_helper": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from high_level_api.py",
      "has_implementation": true,
      "implementation": "get_benchmark_helper",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api.py",
      "name": "get_benchmark_helper",
      "status": "partial - missing schema"
    },
    "get_block_json": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_controller_mfs_methods.py",
      "has_implementation": true,
      "implementation": "get_block_json",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
      "name": "get_block_json",
      "status": "partial - missing schema"
    },
    "get_cid": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_multiformats.py",
      "has_implementation": true,
      "implementation": "get_cid",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_multiformats.py",
      "name": "get_cid",
      "status": "partial - missing schema"
    },
    "get_cluster_metrics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit_extensions.py",
      "has_implementation": true,
      "implementation": "get_cluster_metrics",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit_extensions.py",
      "name": "get_cluster_metrics",
      "status": "partial - missing schema"
    },
    "get_cluster_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "get_cluster_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "get_cluster_status",
      "status": "partial - missing schema"
    },
    "get_compatible_servers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "get_compatible_servers",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "get_compatible_servers",
      "status": "partial - missing schema"
    },
    "get_compatible_servers_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "get_compatible_servers_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "get_compatible_servers_async",
      "status": "partial - missing schema"
    },
    "get_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from api.py",
      "has_implementation": true,
      "implementation": "get_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
      "name": "get_config",
      "status": "partial - missing schema"
    },
    "get_connections": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_anyio_integration.py",
      "has_implementation": true,
      "implementation": "get_connections",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_anyio_integration.py",
      "name": "get_connections",
      "status": "partial - missing schema"
    },
    "get_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_migration_extension.py",
      "has_implementation": true,
      "implementation": "get_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
      "name": "get_content",
      "status": "partial - missing schema"
    },
    "get_content_as_tar": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_controller.py",
      "has_implementation": true,
      "implementation": "get_content_as_tar",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
      "name": "get_content_as_tar",
      "status": "partial - missing schema"
    },
    "get_content_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_model_anyio.py",
      "has_implementation": true,
      "implementation": "get_content_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_anyio.py",
      "name": "get_content_async",
      "status": "partial - missing schema"
    },
    "get_content_json": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_controller.py",
      "has_implementation": true,
      "implementation": "get_content_json",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
      "name": "get_content_json",
      "status": "partial - missing schema"
    },
    "get_controller": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_controllers.py",
      "has_implementation": true,
      "implementation": "get_controller",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
      "name": "get_controller",
      "status": "partial - missing schema"
    },
    "get_controller_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from register_all_controller_tools.py",
      "has_implementation": true,
      "implementation": "get_controller_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/register_all_controller_tools.py",
      "name": "get_controller_files",
      "status": "partial - missing schema"
    },
    "get_controllers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_backends_api.py",
      "has_implementation": true,
      "implementation": "get_controllers",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_backends_api.py",
      "name": "get_controllers",
      "status": "partial - missing schema"
    },
    "get_credentials_from_env": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from implement_real_apis.py",
      "has_implementation": true,
      "implementation": "get_credentials_from_env",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/api/implement_real_apis.py",
      "name": "get_credentials_from_env",
      "status": "partial - missing schema"
    },
    "get_daemon_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_lock_handling.py",
      "has_implementation": true,
      "implementation": "get_daemon_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/connect_to_mcp.py",
      "name": "get_daemon_status",
      "status": "partial - missing schema"
    },
    "get_dag": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_ipfs_kit.py",
      "has_implementation": true,
      "implementation": "get_dag",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/mock_ipfs_kit.py",
      "name": "get_dag",
      "status": "partial - missing schema"
    },
    "get_dag_node": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_controller_mfs_methods.py",
      "has_implementation": true,
      "implementation": "get_dag_node",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
      "name": "get_dag_node",
      "status": "partial - missing schema"
    },
    "get_distribution": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from __init__.py",
      "has_implementation": true,
      "implementation": "get_distribution",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "name": "get_distribution",
      "status": "partial - missing schema"
    },
    "get_entity": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipld_knowledge_graph.py",
      "has_implementation": true,
      "implementation": "get_entity",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipld_knowledge_graph.py",
      "name": "get_entity",
      "status": "partial - missing schema"
    },
    "get_error_summary": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from file_watcher.py",
      "has_implementation": true,
      "implementation": "get_error_summary",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/utils/file_watcher.py",
      "name": "get_error_summary",
      "status": "partial - missing schema"
    },
    "get_file_stats": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server_with_tools.py",
      "has_implementation": true,
      "implementation": "get_file_stats",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_mcp_server.py",
      "name": "get_file_stats",
      "status": "partial - missing schema"
    },
    "get_filecoin_client": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from advanced_filecoin_mcp.py",
      "has_implementation": true,
      "implementation": "get_filecoin_client",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/advanced_filecoin_mcp.py",
      "name": "get_filecoin_client",
      "status": "partial - missing schema"
    },
    "get_filesystem": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_integrated_get_filesystem.py",
      "has_implementation": true,
      "implementation": "get_filesystem",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "get_filesystem",
      "status": "partial - missing schema"
    },
    "get_free_port": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_direct_fix.py",
      "has_implementation": true,
      "implementation": "get_free_port",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/implementation/mcp_direct_fix.py",
      "name": "get_free_port",
      "status": "partial - missing schema"
    },
    "get_fullname": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from metadata.py",
      "has_implementation": true,
      "implementation": "get_fullname",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/distlib/metadata.py",
      "name": "get_fullname",
      "status": "partial - missing schema"
    },
    "get_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_client.py",
      "has_implementation": true,
      "implementation": "get_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/metrics_router.py",
      "name": "get_health",
      "status": "partial - missing schema"
    },
    "get_huggingface_token": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from huggingface_real_init.py",
      "has_implementation": true,
      "implementation": "get_huggingface_token",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/huggingface_real_init.py",
      "name": "get_huggingface_token",
      "status": "partial - missing schema"
    },
    "get_info": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_anyio_integration.py",
      "has_implementation": true,
      "implementation": "get_info",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
      "name": "get_info",
      "status": "partial - missing schema"
    },
    "get_instance": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from service.py",
      "has_implementation": true,
      "implementation": "get_instance",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/service.py",
      "name": "get_instance",
      "status": "partial - missing schema"
    },
    "get_integrator": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integrator.py",
      "has_implementation": true,
      "implementation": "get_integrator",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/integrator.py",
      "name": "get_integrator",
      "status": "partial - missing schema"
    },
    "get_ipfs_cluster_path": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_simple.py",
      "has_implementation": true,
      "implementation": "get_ipfs_cluster_path",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_simple.py",
      "name": "get_ipfs_cluster_path",
      "status": "partial - missing schema"
    },
    "get_ipfs_controller": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from register_ipfs_tools_with_mcp.py",
      "has_implementation": true,
      "implementation": "get_ipfs_controller",
      "implementation_file": "/home/barberb/ipfs_kit_py/register_ipfs_tools_with_mcp.py",
      "name": "get_ipfs_controller",
      "status": "partial - missing schema"
    },
    "get_ipfs_model_class": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_model_direct.py",
      "has_implementation": true,
      "implementation": "get_ipfs_model_class",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_model_direct.py",
      "name": "get_ipfs_model_class",
      "status": "partial - missing schema"
    },
    "get_ipfs_path": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_simple.py",
      "has_implementation": true,
      "implementation": "get_ipfs_path",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_simple.py",
      "name": "get_ipfs_path",
      "status": "partial - missing schema"
    },
    "get_ipfs_path_from_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_lock_handling.py",
      "has_implementation": true,
      "implementation": "get_ipfs_path_from_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_lock_handling.py",
      "name": "get_ipfs_path_from_server",
      "status": "partial - missing schema"
    },
    "get_ipfs_py_class": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_model_fix.py",
      "has_implementation": true,
      "implementation": "get_ipfs_py_class",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_model_fix.py",
      "name": "get_ipfs_py_class",
      "status": "partial - missing schema"
    },
    "get_ipfs_simple_api_class": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from add_pins_monkey_patch.py",
      "has_implementation": true,
      "implementation": "get_ipfs_simple_api_class",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/add_pins_monkey_patch.py",
      "name": "get_ipfs_simple_api_class",
      "status": "partial - missing schema"
    },
    "get_ipfs_tools": {
      "auto_discovered": true,
      "description": "Tool implementation found in ipfs_tools_registry.py",
      "has_implementation": true,
      "implementation": "get_ipfs_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_ipfs_tools_registry.py",
      "name": "get_ipfs_tools",
      "status": "partial - missing schema"
    },
    "get_ipfs_version": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from connect_to_mcp.py",
      "has_implementation": true,
      "implementation": "get_ipfs_version",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/connect_to_mcp.py",
      "name": "get_ipfs_version",
      "status": "partial - missing schema"
    },
    "get_journal_health_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_controller.py",
      "has_implementation": true,
      "implementation": "get_journal_health_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/fs_journal_controller_anyio.py",
      "name": "get_journal_health_status",
      "status": "partial - missing schema"
    },
    "get_json": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_test_fixtures.py",
      "has_implementation": true,
      "implementation": "get_json",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_fixtures/ai_ml_test_fixtures.py",
      "name": "get_json",
      "status": "partial - missing schema"
    },
    "get_known_servers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "get_known_servers",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "get_known_servers",
      "status": "partial - missing schema"
    },
    "get_known_servers_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "get_known_servers_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "get_known_servers_async",
      "status": "partial - missing schema"
    },
    "get_lexer_by_name": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from __init__.py",
      "has_implementation": true,
      "implementation": "get_lexer_by_name",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pygments/lexers/__init__.py",
      "name": "get_lexer_by_name",
      "status": "partial - missing schema"
    },
    "get_lock": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from asyn.py",
      "has_implementation": true,
      "implementation": "get_lock",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/filesystem_spec/fsspec/asyn.py",
      "name": "get_lock",
      "status": "partial - missing schema"
    },
    "get_lotus_path": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_simple.py",
      "has_implementation": true,
      "implementation": "get_lotus_path",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_simple.py",
      "name": "get_lotus_path",
      "status": "partial - missing schema"
    },
    "get_mappings": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_ipfs_bridge.py",
      "has_implementation": true,
      "implementation": "get_mappings",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/fs/fs_ipfs_bridge.py",
      "name": "get_mappings",
      "status": "partial - missing schema"
    },
    "get_metadata_index": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "get_metadata_index",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "get_metadata_index",
      "status": "partial - missing schema"
    },
    "get_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_controllers.py",
      "has_implementation": true,
      "implementation": "get_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
      "name": "get_model",
      "status": "partial - missing schema"
    },
    "get_model_registry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "get_model_registry",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "get_model_registry",
      "status": "partial - missing schema"
    },
    "get_name": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from high_level_api_fixed.py",
      "has_implementation": true,
      "implementation": "get_name",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api_fixed.py",
      "name": "get_name",
      "status": "partial - missing schema"
    },
    "get_network_stats": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from advanced_filecoin_mcp.py",
      "has_implementation": true,
      "implementation": "get_network_stats",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/advanced_filecoin_mcp.py",
      "name": "get_network_stats",
      "status": "partial - missing schema"
    },
    "get_node_id": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_controller.py",
      "has_implementation": true,
      "implementation": "get_node_id",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
      "name": "get_node_id",
      "status": "partial - missing schema"
    },
    "get_openapi": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from api_anyio.py",
      "has_implementation": true,
      "implementation": "get_openapi",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
      "name": "get_openapi",
      "status": "partial - missing schema"
    },
    "get_openapi_schema": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_api_comparison.py",
      "has_implementation": true,
      "implementation": "get_openapi_schema",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_comparison.py",
      "name": "get_openapi_schema",
      "status": "partial - missing schema"
    },
    "get_operation_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_api.py",
      "has_implementation": true,
      "implementation": "get_operation_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_api_anyio.py",
      "name": "get_operation_status",
      "status": "partial - missing schema"
    },
    "get_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from standalone_ipfs_mcp_fix.py",
      "has_implementation": true,
      "implementation": "get_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_api.py",
      "name": "get_operations",
      "status": "partial - missing schema"
    },
    "get_optimization_stats": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integrated_search.py",
      "has_implementation": true,
      "implementation": "get_optimization_stats",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/integrated_search.py",
      "name": "get_optimization_stats",
      "status": "partial - missing schema"
    },
    "get_origin": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from typing_extensions.py",
      "has_implementation": true,
      "implementation": "get_origin",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/typing_extensions.py",
      "name": "get_origin",
      "status": "partial - missing schema"
    },
    "get_overloads": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from typing_extensions.py",
      "has_implementation": true,
      "implementation": "get_overloads",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/typing_extensions.py",
      "name": "get_overloads",
      "status": "partial - missing schema"
    },
    "get_peer_id": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_integration_anyio.py",
      "has_implementation": true,
      "implementation": "get_peer_id",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
      "name": "get_peer_id",
      "status": "partial - missing schema"
    },
    "get_peers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_high_level_api.py",
      "has_implementation": true,
      "implementation": "get_peers",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
      "name": "get_peers",
      "status": "partial - missing schema"
    },
    "get_protocol_value": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_multiformats.py",
      "has_implementation": true,
      "implementation": "get_protocol_value",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_multiformats.py",
      "name": "get_protocol_value",
      "status": "partial - missing schema"
    },
    "get_prototype": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from __init__.py",
      "has_implementation": true,
      "implementation": "get_prototype",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/__init__.py",
      "name": "get_prototype",
      "status": "partial - missing schema"
    },
    "get_realtime_telemetry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_api.py",
      "has_implementation": true,
      "implementation": "get_realtime_telemetry",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_api_anyio.py",
      "name": "get_realtime_telemetry",
      "status": "partial - missing schema"
    },
    "get_report_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_api_anyio.py",
      "has_implementation": true,
      "implementation": "get_report_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_api_anyio.py",
      "name": "get_report_file",
      "status": "partial - missing schema"
    },
    "get_resource_stats": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_controller.py",
      "has_implementation": true,
      "implementation": "get_resource_stats",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/webrtc_controller.py",
      "name": "get_resource_stats",
      "status": "partial - missing schema"
    },
    "get_routing_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integrator.py",
      "has_implementation": true,
      "implementation": "get_routing_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/integrator.py",
      "name": "get_routing_status",
      "status": "partial - missing schema"
    },
    "get_search_service": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from search.py",
      "has_implementation": true,
      "implementation": "get_search_service",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/search.py",
      "name": "get_search_service",
      "status": "partial - missing schema"
    },
    "get_server_by_id": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "get_server_by_id",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "get_server_by_id",
      "status": "partial - missing schema"
    },
    "get_server_by_id_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "get_server_by_id_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "get_server_by_id_async",
      "status": "partial - missing schema"
    },
    "get_server_class": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server_with_watcher.py",
      "has_implementation": true,
      "implementation": "get_server_class",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/server/server_runner.py",
      "name": "get_server_class",
      "status": "partial - missing schema"
    },
    "get_server_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from connect_to_mcp.py",
      "has_implementation": true,
      "implementation": "get_server_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/connect_to_mcp.py",
      "name": "get_server_health",
      "status": "partial - missing schema"
    },
    "get_server_info": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from update_cline_mcp_config.py",
      "has_implementation": true,
      "implementation": "get_server_info",
      "implementation_file": "/home/barberb/ipfs_kit_py/test_mcp_client.py",
      "name": "get_server_info",
      "status": "partial - missing schema"
    },
    "get_stats": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_controller_anyio.py",
      "has_implementation": true,
      "implementation": "get_stats",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
      "name": "get_stats",
      "status": "partial - missing schema"
    },
    "get_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_controller.py",
      "has_implementation": true,
      "implementation": "get_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/aria2_controller.py",
      "name": "get_status",
      "status": "partial - missing schema"
    },
    "get_status_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from aria2_controller_anyio.py",
      "has_implementation": true,
      "implementation": "get_status_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/aria2_controller_anyio.py",
      "name": "get_status_async",
      "status": "partial - missing schema"
    },
    "get_storage_backends": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from storage_controller_anyio_example.py",
      "has_implementation": true,
      "implementation": "get_storage_backends",
      "implementation_file": "/home/barberb/ipfs_kit_py/backup_patches/fix_storage_backends.py",
      "name": "get_storage_backends",
      "status": "partial - missing schema"
    },
    "get_streaming_ops": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from streaming.py",
      "has_implementation": true,
      "implementation": "get_streaming_ops",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/streaming.py",
      "name": "get_streaming_ops",
      "status": "partial - missing schema"
    },
    "get_supported_platform": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from __init__.py",
      "has_implementation": true,
      "implementation": "get_supported_platform",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "name": "get_supported_platform",
      "status": "partial - missing schema"
    },
    "get_task_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "get_task_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "get_task_status",
      "status": "partial - missing schema"
    },
    "get_telemetry_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_api.py",
      "has_implementation": true,
      "implementation": "get_telemetry_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_api.py",
      "name": "get_telemetry_config",
      "status": "partial - missing schema"
    },
    "get_tools": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "get_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_mcp_fix.py",
      "name": "get_tools",
      "status": "partial - missing schema"
    },
    "get_tracing_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from observability_api.py",
      "has_implementation": true,
      "implementation": "get_tracing_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/observability_api.py",
      "name": "get_tracing_config",
      "status": "partial - missing schema"
    },
    "get_version": {
      "auto_discovered": true,
      "description": "Tool implementation found in enhanced_final_mcp_server.py",
      "has_implementation": true,
      "implementation": "get_version",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhanced_final_mcp_server.py",
      "name": "get_version",
      "status": "partial - missing schema"
    },
    "get_version_v2": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_controller.py",
      "has_implementation": true,
      "implementation": "get_version_v2",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/controllers/ipfs_controller.py",
      "name": "get_version_v2",
      "status": "partial - missing schema"
    },
    "global_exception_handler": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from unified_mcp_server.py",
      "has_implementation": true,
      "implementation": "global_exception_handler",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/server_bridge.py",
      "name": "global_exception_handler",
      "status": "partial - missing schema"
    },
    "graph_vector_search": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipld_knowledge_graph.py",
      "has_implementation": true,
      "implementation": "graph_vector_search",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipld_knowledge_graph.py",
      "name": "graph_vector_search",
      "status": "partial - missing schema"
    },
    "group_tools_by_category": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_tools.py",
      "has_implementation": true,
      "implementation": "group_tools_by_category",
      "implementation_file": "/home/barberb/ipfs_kit_py/verify_tools.py",
      "name": "group_tools_by_category",
      "status": "partial - missing schema"
    },
    "guess_content_type": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fields.py",
      "has_implementation": true,
      "implementation": "guess_content_type",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/urllib3/fields.py",
      "name": "guess_content_type",
      "status": "partial - missing schema"
    },
    "handle_add_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_controller.py",
      "has_implementation": true,
      "implementation": "handle_add_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
      "name": "handle_add_request",
      "status": "partial - missing schema"
    },
    "handle_alert": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_monitor_example.py",
      "has_implementation": true,
      "implementation": "handle_alert",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/fs_journal_monitor_example.py",
      "name": "handle_alert",
      "status": "partial - missing schema"
    },
    "handle_asyncio_cancel": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_controller.py",
      "has_implementation": true,
      "implementation": "handle_asyncio_cancel",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/webrtc_controller.py",
      "name": "handle_asyncio_cancel",
      "status": "partial - missing schema"
    },
    "handle_benchmark_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_cli.py",
      "has_implementation": true,
      "implementation": "handle_benchmark_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_cli.py",
      "name": "handle_benchmark_command",
      "status": "partial - missing schema"
    },
    "handle_cache_miss": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from p2p_integration.py",
      "has_implementation": true,
      "implementation": "handle_cache_miss",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/p2p_integration.py",
      "name": "handle_cache_miss",
      "status": "partial - missing schema"
    },
    "handle_check_dependencies_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_cli.py",
      "has_implementation": true,
      "implementation": "handle_check_dependencies_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_cli.py",
      "name": "handle_check_dependencies_command",
      "status": "partial - missing schema"
    },
    "handle_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from routing_cli.py",
      "has_implementation": true,
      "implementation": "handle_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/bin/routing_cli.py",
      "name": "handle_config",
      "status": "partial - missing schema"
    },
    "handle_create_wallet_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_controller_mock.py",
      "has_implementation": true,
      "implementation": "handle_create_wallet_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_controller_mock.py",
      "name": "handle_create_wallet_request",
      "status": "partial - missing schema"
    },
    "handle_create_wallet_request_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from filecoin_controller_anyio.py",
      "has_implementation": true,
      "implementation": "handle_create_wallet_request_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/filecoin_controller_anyio.py",
      "name": "handle_create_wallet_request_async",
      "status": "partial - missing schema"
    },
    "handle_dashboard": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from routing_cli.py",
      "has_implementation": true,
      "implementation": "handle_dashboard",
      "implementation_file": "/home/barberb/ipfs_kit_py/bin/routing_cli.py",
      "name": "handle_dashboard",
      "status": "partial - missing schema"
    },
    "handle_deal_info_request_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from filecoin_controller_anyio.py",
      "has_implementation": true,
      "implementation": "handle_deal_info_request_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/filecoin_controller_anyio.py",
      "name": "handle_deal_info_request_async",
      "status": "partial - missing schema"
    },
    "handle_delete_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from s3_controller.py",
      "has_implementation": true,
      "implementation": "handle_delete_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/s3_controller.py",
      "name": "handle_delete_request",
      "status": "partial - missing schema"
    },
    "handle_download_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from s3_controller.py",
      "has_implementation": true,
      "implementation": "handle_download_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/s3_controller.py",
      "name": "handle_download_request",
      "status": "partial - missing schema"
    },
    "handle_filecoin_to_ipfs_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_controller_mock.py",
      "has_implementation": true,
      "implementation": "handle_filecoin_to_ipfs_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/filecoin_controller_anyio.py",
      "name": "handle_filecoin_to_ipfs_request",
      "status": "partial - missing schema"
    },
    "handle_filecoin_to_ipfs_request_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from filecoin_controller_anyio.py",
      "has_implementation": true,
      "implementation": "handle_filecoin_to_ipfs_request_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/filecoin_controller_anyio.py",
      "name": "handle_filecoin_to_ipfs_request_async",
      "status": "partial - missing schema"
    },
    "handle_fs_journal_checkpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_cli.py",
      "has_implementation": true,
      "implementation": "handle_fs_journal_checkpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
      "name": "handle_fs_journal_checkpoint",
      "status": "partial - missing schema"
    },
    "handle_fs_journal_export": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_cli.py",
      "has_implementation": true,
      "implementation": "handle_fs_journal_export",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
      "name": "handle_fs_journal_export",
      "status": "partial - missing schema"
    },
    "handle_fs_journal_list": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_cli.py",
      "has_implementation": true,
      "implementation": "handle_fs_journal_list",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
      "name": "handle_fs_journal_list",
      "status": "partial - missing schema"
    },
    "handle_fs_journal_ls": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_cli.py",
      "has_implementation": true,
      "implementation": "handle_fs_journal_ls",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
      "name": "handle_fs_journal_ls",
      "status": "partial - missing schema"
    },
    "handle_fs_journal_mkdir": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_cli.py",
      "has_implementation": true,
      "implementation": "handle_fs_journal_mkdir",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
      "name": "handle_fs_journal_mkdir",
      "status": "partial - missing schema"
    },
    "handle_fs_journal_mount": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_cli.py",
      "has_implementation": true,
      "implementation": "handle_fs_journal_mount",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
      "name": "handle_fs_journal_mount",
      "status": "partial - missing schema"
    },
    "handle_fs_journal_mv": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_cli.py",
      "has_implementation": true,
      "implementation": "handle_fs_journal_mv",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
      "name": "handle_fs_journal_mv",
      "status": "partial - missing schema"
    },
    "handle_fs_journal_read": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_cli.py",
      "has_implementation": true,
      "implementation": "handle_fs_journal_read",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
      "name": "handle_fs_journal_read",
      "status": "partial - missing schema"
    },
    "handle_fs_journal_recover": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_cli.py",
      "has_implementation": true,
      "implementation": "handle_fs_journal_recover",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
      "name": "handle_fs_journal_recover",
      "status": "partial - missing schema"
    },
    "handle_fs_journal_rm": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_cli.py",
      "has_implementation": true,
      "implementation": "handle_fs_journal_rm",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
      "name": "handle_fs_journal_rm",
      "status": "partial - missing schema"
    },
    "handle_fs_journal_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_cli.py",
      "has_implementation": true,
      "implementation": "handle_fs_journal_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
      "name": "handle_fs_journal_status",
      "status": "partial - missing schema"
    },
    "handle_fs_journal_write": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_cli.py",
      "has_implementation": true,
      "implementation": "handle_fs_journal_write",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
      "name": "handle_fs_journal_write",
      "status": "partial - missing schema"
    },
    "handle_get_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cli.py",
      "has_implementation": true,
      "implementation": "handle_get_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cli.py",
      "name": "handle_get_command",
      "status": "partial - missing schema"
    },
    "handle_huggingface_to_ipfs_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from huggingface_controller_anyio.py",
      "has_implementation": true,
      "implementation": "handle_huggingface_to_ipfs_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/controllers/storage/huggingface_controller.py",
      "name": "handle_huggingface_to_ipfs_request",
      "status": "partial - missing schema"
    },
    "handle_huggingface_to_ipfs_request_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from huggingface_controller_anyio.py",
      "has_implementation": true,
      "implementation": "handle_huggingface_to_ipfs_request_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/controllers/storage/huggingface_controller_anyio.py",
      "name": "handle_huggingface_to_ipfs_request_async",
      "status": "partial - missing schema"
    },
    "handle_insights": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from routing_grpc.py",
      "has_implementation": true,
      "implementation": "handle_insights",
      "implementation_file": "/home/barberb/ipfs_kit_py/bin/routing_grpc.py",
      "name": "handle_insights",
      "status": "partial - missing schema"
    },
    "handle_ipfs_to_lassie_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from lassie_controller_anyio.py",
      "has_implementation": true,
      "implementation": "handle_ipfs_to_lassie_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/lassie_controller_anyio.py",
      "name": "handle_ipfs_to_lassie_request",
      "status": "partial - missing schema"
    },
    "handle_ipfs_to_s3_request_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from s3_controller_anyio.py",
      "has_implementation": true,
      "implementation": "handle_ipfs_to_s3_request_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/s3_controller_anyio.py",
      "name": "handle_ipfs_to_s3_request_async",
      "status": "partial - missing schema"
    },
    "handle_jsonrpc": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server.py",
      "has_implementation": true,
      "implementation": "handle_jsonrpc",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_mcp_server.py",
      "name": "handle_jsonrpc",
      "status": "partial - missing schema"
    },
    "handle_lassie_to_ipfs_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from lassie_controller_anyio.py",
      "has_implementation": true,
      "implementation": "handle_lassie_to_ipfs_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/lassie_controller_anyio.py",
      "name": "handle_lassie_to_ipfs_request",
      "status": "partial - missing schema"
    },
    "handle_list_imports_request_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from filecoin_controller_anyio.py",
      "has_implementation": true,
      "implementation": "handle_list_imports_request_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/filecoin_controller_anyio.py",
      "name": "handle_list_imports_request_async",
      "status": "partial - missing schema"
    },
    "handle_list_known_peers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_command_handlers.py",
      "has_implementation": true,
      "implementation": "handle_list_known_peers",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_command_handlers.py",
      "name": "handle_list_known_peers",
      "status": "partial - missing schema"
    },
    "handle_list_request_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from s3_controller_anyio.py",
      "has_implementation": true,
      "implementation": "handle_list_request_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/s3_controller_anyio.py",
      "name": "handle_list_request_async",
      "status": "partial - missing schema"
    },
    "handle_list_spaces_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from storacha_controller.py",
      "has_implementation": true,
      "implementation": "handle_list_spaces_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/storacha_controller.py",
      "name": "handle_list_spaces_request",
      "status": "partial - missing schema"
    },
    "handle_list_wallets_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_controller_mock.py",
      "has_implementation": true,
      "implementation": "handle_list_wallets_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/controllers/storage/filecoin_controller.py",
      "name": "handle_list_wallets_request",
      "status": "partial - missing schema"
    },
    "handle_miner_info_request_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from filecoin_controller_anyio.py",
      "has_implementation": true,
      "implementation": "handle_miner_info_request_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/filecoin_controller_anyio.py",
      "name": "handle_miner_info_request_async",
      "status": "partial - missing schema"
    },
    "handle_multi_peer_signaling": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_multi_peer.py",
      "has_implementation": true,
      "implementation": "handle_multi_peer_signaling",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_multi_peer.py",
      "name": "handle_multi_peer_signaling",
      "status": "partial - missing schema"
    },
    "handle_partition_data_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from arrow_metadata_index.py",
      "has_implementation": true,
      "implementation": "handle_partition_data_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/arrow_metadata_index.py",
      "name": "handle_partition_data_request",
      "status": "partial - missing schema"
    },
    "handle_partition_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from arrow_metadata_index.py",
      "has_implementation": true,
      "implementation": "handle_partition_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/arrow_metadata_index.py",
      "name": "handle_partition_request",
      "status": "partial - missing schema"
    },
    "handle_repo_creation_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from huggingface_controller.py",
      "has_implementation": true,
      "implementation": "handle_repo_creation_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/controllers/storage/huggingface_controller.py",
      "name": "handle_repo_creation_request",
      "status": "partial - missing schema"
    },
    "handle_retrieve_content_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from lassie_controller_anyio.py",
      "has_implementation": true,
      "implementation": "handle_retrieve_content_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/lassie_controller_anyio.py",
      "name": "handle_retrieve_content_request",
      "status": "partial - missing schema"
    },
    "handle_retrieve_data_request_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from filecoin_controller_anyio.py",
      "has_implementation": true,
      "implementation": "handle_retrieve_data_request_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/filecoin_controller_anyio.py",
      "name": "handle_retrieve_data_request_async",
      "status": "partial - missing schema"
    },
    "handle_s3_to_ipfs_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from s3_controller.py",
      "has_implementation": true,
      "implementation": "handle_s3_to_ipfs_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/s3_controller.py",
      "name": "handle_s3_to_ipfs_request",
      "status": "partial - missing schema"
    },
    "handle_s3_to_ipfs_request_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from s3_controller_anyio.py",
      "has_implementation": true,
      "implementation": "handle_s3_to_ipfs_request_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/s3_controller_anyio.py",
      "name": "handle_s3_to_ipfs_request_async",
      "status": "partial - missing schema"
    },
    "handle_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from routing_grpc.py",
      "has_implementation": true,
      "implementation": "handle_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/bin/routing_grpc.py",
      "name": "handle_server",
      "status": "partial - missing schema"
    },
    "handle_signaling": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_streaming_example.py",
      "has_implementation": true,
      "implementation": "handle_signaling",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/webrtc_streaming_example.py",
      "name": "handle_signaling",
      "status": "partial - missing schema"
    },
    "handle_space_creation_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from storacha_controller_anyio.py",
      "has_implementation": true,
      "implementation": "handle_space_creation_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/storacha_controller_anyio.py",
      "name": "handle_space_creation_request",
      "status": "partial - missing schema"
    },
    "handle_status_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from huggingface_controller_anyio.py",
      "has_implementation": true,
      "implementation": "handle_status_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/s3_controller_anyio.py",
      "name": "handle_status_request",
      "status": "partial - missing schema"
    },
    "handle_status_request_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from filecoin_controller_anyio.py",
      "has_implementation": true,
      "implementation": "handle_status_request_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/filecoin_controller_anyio.py",
      "name": "handle_status_request_async",
      "status": "partial - missing schema"
    },
    "handle_storacha_to_ipfs_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from storacha_controller.py",
      "has_implementation": true,
      "implementation": "handle_storacha_to_ipfs_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/storage/storacha_controller_anyio.py",
      "name": "handle_storacha_to_ipfs_request",
      "status": "partial - missing schema"
    },
    "handle_storacha_to_ipfs_request_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from storacha_controller_anyio.py",
      "has_implementation": true,
      "implementation": "handle_storacha_to_ipfs_request_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/controllers/storage/storacha_controller_anyio.py",
      "name": "handle_storacha_to_ipfs_request_async",
      "status": "partial - missing schema"
    },
    "handle_tool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_proxy_server.py",
      "has_implementation": true,
      "implementation": "handle_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/add_comprehensive_ipfs_tools.py",
      "name": "handle_tool",
      "status": "partial - missing schema"
    },
    "handle_validation_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_error_handling.py",
      "has_implementation": true,
      "implementation": "handle_validation_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/mcp_error_handling.py",
      "name": "handle_validation_error",
      "status": "partial - missing schema"
    },
    "handle_version_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cli.py",
      "has_implementation": true,
      "implementation": "handle_version_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/cli.py",
      "name": "handle_version_command",
      "status": "partial - missing schema"
    },
    "handler": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from implement_mcp_ipfs_tools.py",
      "has_implementation": true,
      "implementation": "tool_handler",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/server_bridge.py",
      "name": "handler",
      "status": "partial - missing schema"
    },
    "hardware_detect": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from install_lassie.py",
      "has_implementation": true,
      "implementation": "hardware_detect",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/install/install_lassie.py",
      "name": "hardware_detect",
      "status": "partial - missing schema"
    },
    "has_direct_binary_access": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_cluster_daemons_comprehensive.py",
      "has_implementation": true,
      "implementation": "has_direct_binary_access",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_cluster_daemons_comprehensive.py",
      "name": "has_direct_binary_access",
      "status": "partial - missing schema"
    },
    "hash_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from high_level_api_example.py",
      "has_implementation": true,
      "implementation": "hash_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/high_level_api_example.py",
      "name": "hash_file",
      "status": "partial - missing schema"
    },
    "health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_proxy_server.py",
      "has_implementation": true,
      "implementation": "health",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_mcp_server_real.py",
      "name": "health",
      "status": "partial - missing schema"
    },
    "health_check": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "health_check",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/examples/mcp_server_auth_example.py",
      "name": "health_check",
      "status": "partial - missing schema"
    },
    "health_endpoint": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "health_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_mcp_fix.py",
      "name": "health_endpoint",
      "status": "partial - missing schema"
    },
    "homepage": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server_with_tools.py",
      "has_implementation": true,
      "implementation": "homepage",
      "implementation_file": "/home/barberb/ipfs_kit_py/simple_mcp_server.py",
      "name": "homepage",
      "status": "partial - missing schema"
    },
    "hostname": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from url.py",
      "has_implementation": true,
      "implementation": "hostname",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/urllib3/util/url.py",
      "name": "hostname",
      "status": "partial - missing schema"
    },
    "huggingface_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_extensions.py",
      "has_implementation": true,
      "implementation": "huggingface_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/huggingface.py",
      "name": "huggingface_status",
      "status": "partial - missing schema"
    },
    "huggingface_to_ipfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_controller_anyio.py",
      "has_implementation": true,
      "implementation": "huggingface_to_ipfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/api/implement_real_apis.py",
      "name": "huggingface_to_ipfs",
      "status": "partial - missing schema"
    },
    "hybrid_search": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integrated_search.py",
      "has_implementation": true,
      "implementation": "hybrid_search",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/integrated_search.py",
      "name": "hybrid_search",
      "status": "partial - missing schema"
    },
    "image_processing_task_handler": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cluster_advanced_example.py",
      "has_implementation": true,
      "implementation": "image_processing_task_handler",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/cluster_advanced_example.py",
      "name": "image_processing_task_handler",
      "status": "partial - missing schema"
    },
    "implement_chunked_upload": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from performance_optimizations.py",
      "has_implementation": true,
      "implementation": "implement_chunked_upload",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/performance_optimizations.py",
      "name": "implement_chunked_upload",
      "status": "partial - missing schema"
    },
    "import_module_from_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integrate_fs_with_tools.py",
      "has_implementation": true,
      "implementation": "import_module_from_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/register_enhanced_tools.py",
      "name": "import_module_from_file",
      "status": "partial - missing schema"
    },
    "import_module_from_path": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_daemon_lock_handling.py",
      "has_implementation": true,
      "implementation": "import_module_from_path",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/enhanced_mcp_server_with_ai_ml.py",
      "name": "import_module_from_path",
      "status": "partial - missing schema"
    },
    "import_time_module": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_discovery_mock.py",
      "has_implementation": true,
      "implementation": "import_time_module",
      "implementation_file": "/home/barberb/ipfs_kit_py/test_discovery/mcp_discovery_mock.py",
      "name": "import_time_module",
      "status": "partial - missing schema"
    },
    "include_router": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_all_tests.py",
      "has_implementation": true,
      "implementation": "include_router",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/fix_all_tests.py",
      "name": "include_router",
      "status": "partial - missing schema"
    },
    "info": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "info",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_mcp_fix.py",
      "name": "info",
      "status": "partial - missing schema"
    },
    "init_services": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_proxy_server.py",
      "has_implementation": true,
      "implementation": "init_services",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_server_with_sse.py",
      "name": "init_services",
      "status": "partial - missing schema"
    },
    "initialize": {
      "auto_discovered": true,
      "description": "Tool implementation found in enhanced_final_mcp_server.py",
      "has_implementation": true,
      "implementation": "initialize",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/search/search.py",
      "name": "initialize",
      "status": "partial - missing schema"
    },
    "initialize_api": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_peer_discovery_anyio_example.py",
      "has_implementation": true,
      "implementation": "initialize_api",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/libp2p_peer_discovery_example.py",
      "name": "initialize_api",
      "status": "partial - missing schema"
    },
    "initialize_auth_system": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integration_advanced.py",
      "has_implementation": true,
      "implementation": "initialize_auth_system",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/integration_advanced.py",
      "name": "initialize_auth_system",
      "status": "partial - missing schema"
    },
    "initialize_components": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from unified_ipfs_tools.py",
      "has_implementation": true,
      "implementation": "initialize_components",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/examples/mcp_server_auth_example.py",
      "name": "initialize_components",
      "status": "partial - missing schema"
    },
    "initialize_content_registry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from udm.py",
      "has_implementation": true,
      "implementation": "initialize_content_registry",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/udm.py",
      "name": "initialize_content_registry",
      "status": "partial - missing schema"
    },
    "initialize_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server.py",
      "has_implementation": true,
      "implementation": "initialize_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/simple_mcp_server.py",
      "name": "initialize_endpoint",
      "status": "partial - missing schema"
    },
    "initialize_ipfs_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_extensions.py",
      "has_implementation": true,
      "implementation": "initialize_ipfs_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_initializer.py",
      "name": "initialize_ipfs_model",
      "status": "partial - missing schema"
    },
    "initialize_kademlia": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from protocol_integration.py",
      "has_implementation": true,
      "implementation": "initialize_kademlia",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/protocol_integration.py",
      "name": "initialize_kademlia",
      "status": "partial - missing schema"
    },
    "initialize_kademlia_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_kademlia_extensions.py",
      "has_implementation": true,
      "implementation": "initialize_kademlia_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/backup_patches/fix_kademlia_extensions.py",
      "name": "initialize_kademlia_config",
      "status": "partial - missing schema"
    },
    "initialize_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_mcp_server_initializer.py",
      "has_implementation": true,
      "implementation": "initialize_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/run_mcp_server_initializer.py",
      "name": "initialize_mcp_server",
      "status": "partial - missing schema"
    },
    "initialize_routing_system": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from basic_routing.py",
      "has_implementation": true,
      "implementation": "initialize_routing_system",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/examples/basic_routing.py",
      "name": "initialize_routing_system",
      "status": "partial - missing schema"
    },
    "inject_libp2p_into_high_level_api": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_integration.py",
      "has_implementation": true,
      "implementation": "inject_libp2p_into_high_level_api",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api/libp2p_integration_anyio.py",
      "name": "inject_libp2p_into_high_level_api",
      "status": "partial - missing schema"
    },
    "inspect_mcp": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from inspect_running_mcp.py",
      "has_implementation": true,
      "implementation": "inspect_mcp",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/inspect_running_mcp.py",
      "name": "inspect_mcp",
      "status": "partial - missing schema"
    },
    "install_dependencies": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_storage_backends.py",
      "has_implementation": true,
      "implementation": "install_dependencies",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_storacha.py",
      "name": "install_dependencies",
      "status": "partial - missing schema"
    },
    "install_dependencies_auto": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from install_libp2p.py",
      "has_implementation": true,
      "implementation": "install_dependencies_auto",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/install/install_libp2p.py",
      "name": "install_dependencies_auto",
      "status": "partial - missing schema"
    },
    "install_lassie_daemon": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from install_lassie.py",
      "has_implementation": true,
      "implementation": "install_lassie_daemon",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/install/install_lassie.py",
      "name": "install_lassie_daemon",
      "status": "partial - missing schema"
    },
    "install_libp2p_dependencies": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from force_libp2p_installation.py",
      "has_implementation": true,
      "implementation": "install_libp2p_dependencies",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/install/force_libp2p_installation.py",
      "name": "install_libp2p_dependencies",
      "status": "partial - missing schema"
    },
    "install_lotus_binary": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_filecoin_controller_direct_enhanced.py",
      "has_implementation": true,
      "implementation": "install_lotus_binary",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_filecoin_controller_direct_enhanced.py",
      "name": "install_lotus_binary",
      "status": "partial - missing schema"
    },
    "install_lotus_daemon": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from install_lotus.py",
      "has_implementation": true,
      "implementation": "install_lotus_daemon",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/install/install_lotus.py",
      "name": "install_lotus_daemon",
      "status": "partial - missing schema"
    },
    "install_lotus_worker": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from install_lotus.py",
      "has_implementation": true,
      "implementation": "install_lotus_worker",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/install/install_lotus.py",
      "name": "install_lotus_worker",
      "status": "partial - missing schema"
    },
    "install_w3_cli": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from install_storacha.py",
      "has_implementation": true,
      "implementation": "install_w3_cli",
      "implementation_file": "/home/barberb/ipfs_kit_py/install_storacha.py",
      "name": "install_w3_cli",
      "status": "partial - missing schema"
    },
    "integrate_enhanced_dht_discovery": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_peer.py",
      "has_implementation": true,
      "implementation": "integrate_enhanced_dht_discovery",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/gossipsub_protocol.py",
      "name": "integrate_enhanced_dht_discovery",
      "status": "partial - missing schema"
    },
    "integrity_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integrity.py",
      "has_implementation": true,
      "implementation": "integrity_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/integrity.py",
      "name": "integrity_status",
      "status": "partial - missing schema"
    },
    "ipfs_add": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "ipfs_add",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "ipfs_add",
      "status": "partial - missing schema"
    },
    "ipfs_add_bytes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_backend_implementation.py",
      "has_implementation": true,
      "implementation": "ipfs_add_bytes",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
      "name": "ipfs_add_bytes",
      "status": "partial - missing schema"
    },
    "ipfs_add_chunked": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from performance_optimizations.py",
      "has_implementation": true,
      "implementation": "ipfs_add_chunked",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/performance_optimizations.py",
      "name": "ipfs_add_chunked",
      "status": "partial - missing schema"
    },
    "ipfs_add_directory": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from extended_features.py",
      "has_implementation": true,
      "implementation": "ipfs_add_directory",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
      "name": "ipfs_add_directory",
      "status": "partial - missing schema"
    },
    "ipfs_add_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_add_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
      "name": "ipfs_add_file",
      "status": "partial - missing schema"
    },
    "ipfs_add_metadata": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_backend_implementation.py",
      "has_implementation": true,
      "implementation": "ipfs_add_metadata",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
      "name": "ipfs_add_metadata",
      "status": "partial - missing schema"
    },
    "ipfs_add_path": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_test_fixtures.py",
      "has_implementation": true,
      "implementation": "ipfs_add_path",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "ipfs_add_path",
      "status": "partial - missing schema"
    },
    "ipfs_add_path2": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs.py",
      "has_implementation": true,
      "implementation": "ipfs_add_path2",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "ipfs_add_path2",
      "status": "partial - missing schema"
    },
    "ipfs_add_pin": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_add_pin",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "ipfs_add_pin",
      "status": "partial - missing schema"
    },
    "ipfs_add_tool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_add_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "ipfs_add_tool",
      "status": "partial - missing schema"
    },
    "ipfs_advanced": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_advanced.py",
      "has_implementation": true,
      "implementation": "ipfs_advanced",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_ipfs_advanced.py",
      "name": "ipfs_advanced",
      "status": "partial - missing schema"
    },
    "ipfs_api": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server.py",
      "has_implementation": true,
      "implementation": "ipfs_api",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_mcp_server.py",
      "name": "ipfs_api",
      "status": "partial - missing schema"
    },
    "ipfs_basic_info": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "ipfs_basic_info",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_mcp_fix.py",
      "name": "ipfs_basic_info",
      "status": "partial - missing schema"
    },
    "ipfs_block_get": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_test_mcp_server.py",
      "has_implementation": true,
      "implementation": "ipfs_block_get",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/utils/mcp/simple_test_mcp_server.py",
      "name": "ipfs_block_get",
      "status": "partial - missing schema"
    },
    "ipfs_block_stat": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_test_mcp_server.py",
      "has_implementation": true,
      "implementation": "ipfs_block_stat",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/utils/mcp/simple_test_mcp_server.py",
      "name": "ipfs_block_stat",
      "status": "partial - missing schema"
    },
    "ipfs_cat": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "ipfs_cat",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
      "name": "ipfs_cat",
      "status": "partial - missing schema"
    },
    "ipfs_cat_chunked": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from performance_optimizations.py",
      "has_implementation": true,
      "implementation": "ipfs_cat_chunked",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/performance_optimizations.py",
      "name": "ipfs_cat_chunked",
      "status": "partial - missing schema"
    },
    "ipfs_cat_tool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_cat_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "ipfs_cat_tool",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_ctl_add_pin": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_ctl.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_ctl_add_pin",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
      "name": "ipfs_cluster_ctl_add_pin",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_ctl_add_pin_recursive": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_ctl.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_ctl_add_pin_recursive",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
      "name": "ipfs_cluster_ctl_add_pin_recursive",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_ctl_execute": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_ctl.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_ctl_execute",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
      "name": "ipfs_cluster_ctl_execute",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_ctl_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_ctl.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_ctl_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
      "name": "ipfs_cluster_ctl_health",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_ctl_peers_ls": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_ctl.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_ctl_peers_ls",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
      "name": "ipfs_cluster_ctl_peers_ls",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_ctl_remove_pin": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_ctl.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_ctl_remove_pin",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
      "name": "ipfs_cluster_ctl_remove_pin",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_ctl_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_ctl.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_ctl_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
      "name": "ipfs_cluster_ctl_status",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_ctl_test_install": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from install_ipfs.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_ctl_test_install",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/install_ipfs.py",
      "name": "ipfs_cluster_ctl_test_install",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_follow_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_follow.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_follow_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_follow.py",
      "name": "ipfs_cluster_follow_status",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_follow_test_install": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from install_ipfs.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_follow_test_install",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/install_ipfs.py",
      "name": "ipfs_cluster_follow_test_install",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_get_pinset": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_ctl.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_get_pinset",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
      "name": "ipfs_cluster_get_pinset",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "ipfs_cluster_health",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_peers_ls": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_peers_ls",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "ipfs_cluster_peers_ls",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_recover": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_recover",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "ipfs_cluster_recover",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_service_start": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_service.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_service_start",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_service.py",
      "name": "ipfs_cluster_service_start",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_service_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_service.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_service_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_service.py",
      "name": "ipfs_cluster_service_status",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_service_stop": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_service.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_service_stop",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_service.py",
      "name": "ipfs_cluster_service_stop",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_service_test_install": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from install_ipfs.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_service_test_install",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/install_ipfs.py",
      "name": "ipfs_cluster_service_test_install",
      "status": "partial - missing schema"
    },
    "ipfs_cluster_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_cluster_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "ipfs_cluster_status",
      "status": "partial - missing schema"
    },
    "ipfs_dag_get": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_test_mcp_server.py",
      "has_implementation": true,
      "implementation": "ipfs_dag_get",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/enhanced_ipfs.py",
      "name": "ipfs_dag_get",
      "status": "partial - missing schema"
    },
    "ipfs_dht_find_peer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_backend.py",
      "has_implementation": true,
      "implementation": "ipfs_dht_find_peer",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_backend.py",
      "name": "ipfs_dht_find_peer",
      "status": "partial - missing schema"
    },
    "ipfs_dht_find_providers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_backend.py",
      "has_implementation": true,
      "implementation": "ipfs_dht_find_providers",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_backend.py",
      "name": "ipfs_dht_find_providers",
      "status": "partial - missing schema"
    },
    "ipfs_dht_findpeer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_test_mcp_server.py",
      "has_implementation": true,
      "implementation": "ipfs_dht_findpeer",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/enhanced_ipfs.py",
      "name": "ipfs_dht_findpeer",
      "status": "partial - missing schema"
    },
    "ipfs_dht_findprovs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_test_mcp_server.py",
      "has_implementation": true,
      "implementation": "ipfs_dht_findprovs",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/utils/mcp/simple_test_mcp_server.py",
      "name": "ipfs_dht_findprovs",
      "status": "partial - missing schema"
    },
    "ipfs_dht_get": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_ipfs.py",
      "has_implementation": true,
      "implementation": "ipfs_dht_get",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/enhanced_ipfs.py",
      "name": "ipfs_dht_get",
      "status": "partial - missing schema"
    },
    "ipfs_dht_provide": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_backend.py",
      "has_implementation": true,
      "implementation": "ipfs_dht_provide",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_backend.py",
      "name": "ipfs_dht_provide",
      "status": "partial - missing schema"
    },
    "ipfs_dht_query": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_backend.py",
      "has_implementation": true,
      "implementation": "ipfs_dht_query",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/ipfs_backend.py",
      "name": "ipfs_dht_query",
      "status": "partial - missing schema"
    },
    "ipfs_execute": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs.py",
      "has_implementation": true,
      "implementation": "ipfs_execute",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "ipfs_execute",
      "status": "partial - missing schema"
    },
    "ipfs_files_cp": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_files_cp",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_mcp_tools.py",
      "name": "ipfs_files_cp",
      "status": "partial - missing schema"
    },
    "ipfs_files_ls": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "ipfs_files_ls",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/utils/mcp/simple_test_mcp_server.py",
      "name": "ipfs_files_ls",
      "status": "partial - missing schema"
    },
    "ipfs_files_mkdir": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "ipfs_files_mkdir",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_mcp_tools.py",
      "name": "ipfs_files_mkdir",
      "status": "partial - missing schema"
    },
    "ipfs_files_mv": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_files_mv",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_mcp_tools.py",
      "name": "ipfs_files_mv",
      "status": "partial - missing schema"
    },
    "ipfs_files_read": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "ipfs_files_read",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_mcp_tools.py",
      "name": "ipfs_files_read",
      "status": "partial - missing schema"
    },
    "ipfs_files_rm": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "ipfs_files_rm",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_mcp_tools.py",
      "name": "ipfs_files_rm",
      "status": "partial - missing schema"
    },
    "ipfs_files_stat": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_files_stat",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/utils/mcp/simple_test_mcp_server.py",
      "name": "ipfs_files_stat",
      "status": "partial - missing schema"
    },
    "ipfs_files_write": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "ipfs_files_write",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_mcp_tools.py",
      "name": "ipfs_files_write",
      "status": "partial - missing schema"
    },
    "ipfs_follow_info": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_follow_info",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "ipfs_follow_info",
      "status": "partial - missing schema"
    },
    "ipfs_follow_init": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_follow.py",
      "has_implementation": true,
      "implementation": "ipfs_follow_init",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_follow.py",
      "name": "ipfs_follow_init",
      "status": "partial - missing schema"
    },
    "ipfs_follow_start": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_follow.py",
      "has_implementation": true,
      "implementation": "ipfs_follow_start",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_follow.py",
      "name": "ipfs_follow_start",
      "status": "partial - missing schema"
    },
    "ipfs_follow_sync": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_follow_sync",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "ipfs_follow_sync",
      "status": "partial - missing schema"
    },
    "ipfs_fs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_fsspec_mocked.py",
      "has_implementation": true,
      "implementation": "ipfs_fs",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_fsspec_mocked.py",
      "name": "ipfs_fs",
      "status": "partial - missing schema"
    },
    "ipfs_fs_bridge_mount": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_ipfs_fs_integration.py",
      "has_implementation": true,
      "implementation": "ipfs_fs_bridge_mount",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_ipfs_fs_integration.py",
      "name": "ipfs_fs_bridge_mount",
      "status": "partial - missing schema"
    },
    "ipfs_fs_bridge_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_ipfs_fs_integration.py",
      "has_implementation": true,
      "implementation": "ipfs_fs_bridge_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_mcp_ipfs_integration.py",
      "name": "ipfs_fs_bridge_status",
      "status": "partial - missing schema"
    },
    "ipfs_fs_bridge_sync": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_ipfs_fs_integration.py",
      "has_implementation": true,
      "implementation": "ipfs_fs_bridge_sync",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_mcp_ipfs_integration.py",
      "name": "ipfs_fs_bridge_sync",
      "status": "partial - missing schema"
    },
    "ipfs_fs_bridge_unmount": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_ipfs_fs_integration.py",
      "has_implementation": true,
      "implementation": "ipfs_fs_bridge_unmount",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_ipfs_fs_integration.py",
      "name": "ipfs_fs_bridge_unmount",
      "status": "partial - missing schema"
    },
    "ipfs_get": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_get",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "ipfs_get",
      "status": "partial - missing schema"
    },
    "ipfs_get_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_get_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "ipfs_get_config",
      "status": "partial - missing schema"
    },
    "ipfs_get_config_value": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_get_config_value",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "ipfs_get_config_value",
      "status": "partial - missing schema"
    },
    "ipfs_get_json": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from extended_features.py",
      "has_implementation": true,
      "implementation": "ipfs_get_json",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
      "name": "ipfs_get_json",
      "status": "partial - missing schema"
    },
    "ipfs_get_pinset": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_get_pinset",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "ipfs_get_pinset",
      "status": "partial - missing schema"
    },
    "ipfs_id": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_tools_integration.py",
      "has_implementation": true,
      "implementation": "ipfs_id",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "ipfs_id",
      "status": "partial - missing schema"
    },
    "ipfs_id_tool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_id_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "ipfs_id_tool",
      "status": "partial - missing schema"
    },
    "ipfs_key_gen": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from extended_features.py",
      "has_implementation": true,
      "implementation": "ipfs_key_gen",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
      "name": "ipfs_key_gen",
      "status": "partial - missing schema"
    },
    "ipfs_key_list": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from extended_features.py",
      "has_implementation": true,
      "implementation": "ipfs_key_list",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
      "name": "ipfs_key_list",
      "status": "partial - missing schema"
    },
    "ipfs_kit_instance": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_kit_mocked.py",
      "has_implementation": true,
      "implementation": "ipfs_kit_instance",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_kit_mocked.py",
      "name": "ipfs_kit_instance",
      "status": "partial - missing schema"
    },
    "ipfs_kit_mocks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_kit_mocked.py",
      "has_implementation": true,
      "implementation": "ipfs_kit_mocks",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_kit_mocked.py",
      "name": "ipfs_kit_mocks",
      "status": "partial - missing schema"
    },
    "ipfs_kit_ready": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_kit_ready",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "ipfs_kit_ready",
      "status": "partial - missing schema"
    },
    "ipfs_kit_start": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_kit_start",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "ipfs_kit_start",
      "status": "partial - missing schema"
    },
    "ipfs_kit_stop": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_kit_stop",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "ipfs_kit_stop",
      "status": "partial - missing schema"
    },
    "ipfs_list_pins_tool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_list_pins_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "ipfs_list_pins_tool",
      "status": "partial - missing schema"
    },
    "ipfs_ls": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_ls",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_mcp_tools_integration.py",
      "name": "ipfs_ls",
      "status": "partial - missing schema"
    },
    "ipfs_ls_path": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_ls_path",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "ipfs_ls_path",
      "status": "partial - missing schema"
    },
    "ipfs_ls_pin": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs.py",
      "has_implementation": true,
      "implementation": "ipfs_ls_pin",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "ipfs_ls_pin",
      "status": "partial - missing schema"
    },
    "ipfs_metrics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from metrics.py",
      "has_implementation": true,
      "implementation": "ipfs_metrics",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/metrics.py",
      "name": "ipfs_metrics",
      "status": "partial - missing schema"
    },
    "ipfs_mkdir": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs.py",
      "has_implementation": true,
      "implementation": "ipfs_mkdir",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "ipfs_mkdir",
      "status": "partial - missing schema"
    },
    "ipfs_monitoring_middleware": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_monitoring.py",
      "has_implementation": true,
      "implementation": "ipfs_monitoring_middleware",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
      "name": "ipfs_monitoring_middleware",
      "status": "partial - missing schema"
    },
    "ipfs_name_publish": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_name_publish",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
      "name": "ipfs_name_publish",
      "status": "partial - missing schema"
    },
    "ipfs_name_resolve": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_name_resolve",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
      "name": "ipfs_name_resolve",
      "status": "partial - missing schema"
    },
    "ipfs_object_get": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_ipfs.py",
      "has_implementation": true,
      "implementation": "ipfs_object_get",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/enhanced_ipfs.py",
      "name": "ipfs_object_get",
      "status": "partial - missing schema"
    },
    "ipfs_object_links": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_ipfs.py",
      "has_implementation": true,
      "implementation": "ipfs_object_links",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/enhanced_ipfs.py",
      "name": "ipfs_object_links",
      "status": "partial - missing schema"
    },
    "ipfs_object_stat": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_object_stat",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
      "name": "ipfs_object_stat",
      "status": "partial - missing schema"
    },
    "ipfs_pin_add": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server.py",
      "has_implementation": true,
      "implementation": "ipfs_pin_add",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
      "name": "ipfs_pin_add",
      "status": "partial - missing schema"
    },
    "ipfs_pin_list": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from robust_mcp_server.py",
      "has_implementation": true,
      "implementation": "ipfs_pin_list",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_mcp_server_real.py",
      "name": "ipfs_pin_list",
      "status": "partial - missing schema"
    },
    "ipfs_pin_ls": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_pin_ls",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
      "name": "ipfs_pin_ls",
      "status": "partial - missing schema"
    },
    "ipfs_pin_rm": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_pin_rm",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
      "name": "ipfs_pin_rm",
      "status": "partial - missing schema"
    },
    "ipfs_pin_tool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_pin_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "ipfs_pin_tool",
      "status": "partial - missing schema"
    },
    "ipfs_pins": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_test_mcp_server.py",
      "has_implementation": true,
      "implementation": "ipfs_pins",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/utils/mcp/simple_test_mcp_server.py",
      "name": "ipfs_pins",
      "status": "partial - missing schema"
    },
    "ipfs_py_instance": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_py_mocked.py",
      "has_implementation": true,
      "implementation": "ipfs_py_instance",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
      "name": "ipfs_py_instance",
      "status": "partial - missing schema"
    },
    "ipfs_remove_path": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_remove_path",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "ipfs_remove_path",
      "status": "partial - missing schema"
    },
    "ipfs_remove_pin": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_remove_pin",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "ipfs_remove_pin",
      "status": "partial - missing schema"
    },
    "ipfs_repo_gc": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cluster_monitoring_example.py",
      "has_implementation": true,
      "implementation": "ipfs_repo_gc",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/cluster_monitoring_example.py",
      "name": "ipfs_repo_gc",
      "status": "partial - missing schema"
    },
    "ipfs_resize": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs.py",
      "has_implementation": true,
      "implementation": "ipfs_resize",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "ipfs_resize",
      "status": "partial - missing schema"
    },
    "ipfs_set_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_set_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "ipfs_set_config",
      "status": "partial - missing schema"
    },
    "ipfs_set_config_value": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_set_config_value",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "ipfs_set_config_value",
      "status": "partial - missing schema"
    },
    "ipfs_set_listen_addrs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs.py",
      "has_implementation": true,
      "implementation": "ipfs_set_listen_addrs",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "ipfs_set_listen_addrs",
      "status": "partial - missing schema"
    },
    "ipfs_stat_path": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs.py",
      "has_implementation": true,
      "implementation": "ipfs_stat_path",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "ipfs_stat_path",
      "status": "partial - missing schema"
    },
    "ipfs_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_mcp_tools.py",
      "name": "ipfs_status",
      "status": "partial - missing schema"
    },
    "ipfs_stream_generator": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "ipfs_stream_generator",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller_anyio.py",
      "name": "ipfs_stream_generator",
      "status": "partial - missing schema"
    },
    "ipfs_swarm_connect": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_swarm_connect",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "ipfs_swarm_connect",
      "status": "partial - missing schema"
    },
    "ipfs_swarm_disconnect": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_swarm_disconnect",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "ipfs_swarm_disconnect",
      "status": "partial - missing schema"
    },
    "ipfs_swarm_peers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "ipfs_swarm_peers",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "ipfs_swarm_peers",
      "status": "partial - missing schema"
    },
    "ipfs_test_install": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from install_ipfs.py",
      "has_implementation": true,
      "implementation": "ipfs_test_install",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/install_ipfs.py",
      "name": "ipfs_test_install",
      "status": "partial - missing schema"
    },
    "ipfs_to_filecoin": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_filecoin_integration.py",
      "has_implementation": true,
      "implementation": "ipfs_to_filecoin",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_filecoin_integration.py",
      "name": "ipfs_to_filecoin",
      "status": "partial - missing schema"
    },
    "ipfs_to_huggingface": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_controller_anyio.py",
      "has_implementation": true,
      "implementation": "ipfs_to_huggingface",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_huggingface_controller_anyio.py",
      "name": "ipfs_to_huggingface",
      "status": "partial - missing schema"
    },
    "ipfs_to_lassie": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_lassie_controller_anyio.py",
      "has_implementation": true,
      "implementation": "ipfs_to_lassie",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
      "name": "ipfs_to_lassie",
      "status": "partial - missing schema"
    },
    "ipfs_to_lassie_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_lassie_controller_anyio.py",
      "has_implementation": true,
      "implementation": "ipfs_to_lassie_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
      "name": "ipfs_to_lassie_async",
      "status": "partial - missing schema"
    },
    "ipfs_unpin_tool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_unpin_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "ipfs_unpin_tool",
      "status": "partial - missing schema"
    },
    "ipfs_use_case": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from probabilistic_data_structures_example.py",
      "has_implementation": true,
      "implementation": "ipfs_use_case",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/probabilistic_data_structures_example.py",
      "name": "ipfs_use_case",
      "status": "partial - missing schema"
    },
    "ipfs_version": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "ipfs_version",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_mcp_server_real.py",
      "name": "ipfs_version",
      "status": "partial - missing schema"
    },
    "ipfs_version_tool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipfs_version_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "ipfs_version_tool",
      "status": "partial - missing schema"
    },
    "ipget_download_object": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipget.py",
      "has_implementation": true,
      "implementation": "ipget_download_object",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipget.py",
      "name": "ipget_download_object",
      "status": "partial - missing schema"
    },
    "ipns_key_list_tool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipns_key_list_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "ipns_key_list_tool",
      "status": "partial - missing schema"
    },
    "ipns_publish_tool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipns_publish_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "ipns_publish_tool",
      "status": "partial - missing schema"
    },
    "ipns_resolve_tool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "ipns_resolve_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "ipns_resolve_tool",
      "status": "partial - missing schema"
    },
    "is_available": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from __init__.py",
      "has_implementation": true,
      "implementation": "is_available",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/__init__.py",
      "name": "is_available",
      "status": "partial - missing schema"
    },
    "is_controller_test": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from migrate_tests.py",
      "has_implementation": true,
      "implementation": "is_controller_test",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/migrate_tests.py",
      "name": "is_controller_test",
      "status": "partial - missing schema"
    },
    "is_daemon_health_monitor_running": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "is_daemon_health_monitor_running",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "is_daemon_health_monitor_running",
      "status": "partial - missing schema"
    },
    "is_initialized": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "is_initialized",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "is_initialized",
      "status": "partial - missing schema"
    },
    "is_mcp_patch": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from organize_patches.py",
      "has_implementation": true,
      "implementation": "is_mcp_patch",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/organize_patches.py",
      "name": "is_mcp_patch",
      "status": "partial - missing schema"
    },
    "is_minio_installed": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_local_s3.py",
      "has_implementation": true,
      "implementation": "is_minio_installed",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_local_s3.py",
      "name": "is_minio_installed",
      "status": "partial - missing schema"
    },
    "is_server_test": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from migrate_tests.py",
      "has_implementation": true,
      "implementation": "is_server_test",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/migrate_tests.py",
      "name": "is_server_test",
      "status": "partial - missing schema"
    },
    "is_valid_cid": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs.py",
      "has_implementation": true,
      "implementation": "is_valid_cid",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "is_valid_cid",
      "status": "partial - missing schema"
    },
    "is_valid_python": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_code.py",
      "has_implementation": true,
      "implementation": "is_valid_python",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_code.py",
      "name": "is_valid_python",
      "status": "partial - missing schema"
    },
    "join_paths": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "join_paths",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
      "name": "join_paths",
      "status": "partial - missing schema"
    },
    "jsonrpc": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from add_mcp_tools.py",
      "has_implementation": true,
      "implementation": "jsonrpc",
      "implementation_file": "/home/barberb/ipfs_kit_py/add_mcp_tools.py",
      "name": "jsonrpc",
      "status": "partial - missing schema"
    },
    "jsonrpc_endpoint": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "jsonrpc_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/vscode_compatible_mcp_server.py",
      "name": "jsonrpc_endpoint",
      "status": "partial - missing schema"
    },
    "key_gen": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_advanced_router.py",
      "has_implementation": true,
      "implementation": "key_gen",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
      "name": "key_gen",
      "status": "partial - missing schema"
    },
    "key_import": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_advanced_router.py",
      "has_implementation": true,
      "implementation": "key_import",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
      "name": "key_import",
      "status": "partial - missing schema"
    },
    "key_rename": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_advanced_router.py",
      "has_implementation": true,
      "implementation": "key_rename",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
      "name": "key_rename",
      "status": "partial - missing schema"
    },
    "kill_mcp_server_processes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from restart_mcp_server.py",
      "has_implementation": true,
      "implementation": "kill_mcp_server_processes",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/server/restart_mcp_server.py",
      "name": "kill_mcp_server_processes",
      "status": "partial - missing schema"
    },
    "langchain_workflow": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from high_level_api_ai_ml_example.py",
      "has_implementation": true,
      "implementation": "langchain_workflow",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/high_level_api_ai_ml_example.py",
      "name": "langchain_workflow",
      "status": "partial - missing schema"
    },
    "lassie_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_lassie.py",
      "has_implementation": true,
      "implementation": "lassie_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/lassie.py",
      "name": "lassie_status",
      "status": "partial - missing schema"
    },
    "lassie_to_ipfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_lassie_controller_anyio.py",
      "has_implementation": true,
      "implementation": "lassie_to_ipfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
      "name": "lassie_to_ipfs",
      "status": "partial - missing schema"
    },
    "lassie_to_ipfs_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_lassie_controller_anyio.py",
      "has_implementation": true,
      "implementation": "lassie_to_ipfs_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
      "name": "lassie_to_ipfs_async",
      "status": "partial - missing schema"
    },
    "leecher_node": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_role_based_architecture.py",
      "has_implementation": true,
      "implementation": "leecher_node",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
      "name": "leecher_node",
      "status": "partial - missing schema"
    },
    "libp2p_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "libp2p_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "libp2p_model",
      "status": "partial - missing schema"
    },
    "libp2p_model_no_deps": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_model.py",
      "has_implementation": true,
      "implementation": "libp2p_model_no_deps",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/tests/test_mcp_libp2p_model.py",
      "name": "libp2p_model_no_deps",
      "status": "partial - missing schema"
    },
    "lifespan": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server.py",
      "has_implementation": true,
      "implementation": "lifespan",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/direct_mcp_server.py",
      "name": "lifespan",
      "status": "partial - missing schema"
    },
    "list_benchmarks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_benchmark_helpers.py",
      "has_implementation": true,
      "implementation": "list_benchmarks",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api/webrtc_benchmark_helpers_anyio.py",
      "name": "list_benchmarks",
      "status": "partial - missing schema"
    },
    "list_buckets": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from s3_real_api.py",
      "has_implementation": true,
      "implementation": "list_buckets",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/api/s3_real_api.py",
      "name": "list_buckets",
      "status": "partial - missing schema"
    },
    "list_credentials": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from credential_controller.py",
      "has_implementation": true,
      "implementation": "list_credentials",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/credential_controller.py",
      "name": "list_credentials",
      "status": "partial - missing schema"
    },
    "list_directory": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_high_level_api.py",
      "has_implementation": true,
      "implementation": "list_directory",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
      "name": "list_directory",
      "status": "partial - missing schema"
    },
    "list_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server_with_tools.py",
      "has_implementation": true,
      "implementation": "list_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
      "name": "list_files",
      "status": "partial - missing schema"
    },
    "list_fs_ipfs_mappings": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from add_comprehensive_ipfs_tools.py",
      "has_implementation": true,
      "implementation": "list_fs_ipfs_mappings",
      "implementation_file": "/home/barberb/ipfs_kit_py/add_comprehensive_ipfs_tools.py",
      "name": "list_fs_ipfs_mappings",
      "status": "partial - missing schema"
    },
    "list_models": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_test_fixtures.py",
      "has_implementation": true,
      "implementation": "list_models",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_fixtures/ai_ml_test_fixtures.py",
      "name": "list_models",
      "status": "partial - missing schema"
    },
    "list_objects_v2": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from s3_storage.py",
      "has_implementation": true,
      "implementation": "list_objects_v2",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/storage/s3_storage.py",
      "name": "list_objects_v2",
      "status": "partial - missing schema"
    },
    "list_pins": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server_anyio.py",
      "has_implementation": true,
      "implementation": "list_pins",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
      "name": "list_pins",
      "status": "partial - missing schema"
    },
    "list_storage_backends": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from storage_backends_api.py",
      "has_implementation": true,
      "implementation": "list_storage_backends",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/storage_backends_api.py",
      "name": "list_storage_backends",
      "status": "partial - missing schema"
    },
    "list_streams": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_api.py",
      "has_implementation": true,
      "implementation": "list_streams",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/webrtc_api.py",
      "name": "list_streams",
      "status": "partial - missing schema"
    },
    "list_versions": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_ipfs_fs_integration.py",
      "has_implementation": true,
      "implementation": "list_versions",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_ipfs_fs_integration.py",
      "name": "list_versions",
      "status": "partial - missing schema"
    },
    "load": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "load",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "load",
      "status": "partial - missing schema"
    },
    "load_car": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "load_car",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "load_car",
      "status": "partial - missing schema"
    },
    "load_collection": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "load_collection",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "load_collection",
      "status": "partial - missing schema"
    },
    "load_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from update_mcp_server.py",
      "has_implementation": true,
      "implementation": "load_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/server/update_mcp_server.py",
      "name": "load_config",
      "status": "partial - missing schema"
    },
    "load_credentials": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server_real_apis.py",
      "has_implementation": true,
      "implementation": "load_credentials",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/api/implement_real_apis.py",
      "name": "load_credentials",
      "status": "partial - missing schema"
    },
    "load_data": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "load_data",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "load_data",
      "status": "partial - missing schema"
    },
    "load_enhanced_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integrate_fs_with_tools.py",
      "has_implementation": true,
      "implementation": "load_enhanced_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/integrate_fs_with_tools.py",
      "name": "load_enhanced_tools",
      "status": "partial - missing schema"
    },
    "load_ipfs_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from load_ipfs_mcp_tools.py",
      "has_implementation": true,
      "implementation": "load_ipfs_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/load_ipfs_mcp_tools.py",
      "name": "load_ipfs_tools",
      "status": "partial - missing schema"
    },
    "load_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "load_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "load_model",
      "status": "partial - missing schema"
    },
    "load_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from patch_direct_mcp.py",
      "has_implementation": true,
      "implementation": "load_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/patch_direct_mcp.py",
      "name": "load_tools",
      "status": "partial - missing schema"
    },
    "load_tools_into_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from load_mcp_tools.py",
      "has_implementation": true,
      "implementation": "load_tools_into_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/load_mcp_tools.py",
      "name": "load_tools_into_server",
      "status": "partial - missing schema"
    },
    "log": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server_fix.py",
      "has_implementation": true,
      "implementation": "log",
      "implementation_file": "/home/barberb/ipfs_kit_py/debug_health_endpoint.py",
      "name": "log",
      "status": "partial - missing schema"
    },
    "log_message": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_vscode_proxy.py",
      "has_implementation": true,
      "implementation": "log_message",
      "implementation_file": "/home/barberb/ipfs_kit_py/vscode_enhanced_jsonrpc_server.py",
      "name": "log_message",
      "status": "partial - missing schema"
    },
    "login": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from router.py",
      "has_implementation": true,
      "implementation": "login",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/router.py",
      "name": "login",
      "status": "partial - missing schema"
    },
    "ls": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from patch_missing_methods.py",
      "has_implementation": true,
      "implementation": "ls",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/filesystem_spec/fsspec/implementations/dbfs.py",
      "name": "ls",
      "status": "partial - missing schema"
    },
    "ls_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_high_level_api.py",
      "has_implementation": true,
      "implementation": "ls_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
      "name": "ls_async",
      "status": "partial - missing schema"
    },
    "machine_learning_examples": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from data_science_examples.py",
      "has_implementation": true,
      "implementation": "machine_learning_examples",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/data_science_examples.py",
      "name": "machine_learning_examples",
      "status": "partial - missing schema"
    },
    "main": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integrate_fs_with_tools.py",
      "has_implementation": true,
      "implementation": "main",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/ipfs_extensions.py",
      "name": "main",
      "status": "partial - missing schema"
    },
    "main_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_visualization_anyio.py",
      "has_implementation": true,
      "implementation": "main_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_visualization_anyio.py",
      "name": "main_async",
      "status": "partial - missing schema"
    },
    "make_directory": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_mocks.py",
      "has_implementation": true,
      "implementation": "make_directory",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
      "name": "make_directory",
      "status": "partial - missing schema"
    },
    "make_mock_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_mcp_server_tests.py",
      "has_implementation": true,
      "implementation": "make_mock_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_mcp_server_tests.py",
      "name": "make_mock_request",
      "status": "partial - missing schema"
    },
    "make_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fixes.py",
      "has_implementation": true,
      "implementation": "make_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_direct_endpoints.py",
      "name": "make_request",
      "status": "partial - missing schema"
    },
    "map_backend_cid": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from udm.py",
      "has_implementation": true,
      "implementation": "map_backend_cid",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/udm.py",
      "name": "map_backend_cid",
      "status": "partial - missing schema"
    },
    "map_ipfs_to_fs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from add_comprehensive_ipfs_tools.py",
      "has_implementation": true,
      "implementation": "map_ipfs_to_fs",
      "implementation_file": "/home/barberb/ipfs_kit_py/add_comprehensive_ipfs_tools.py",
      "name": "map_ipfs_to_fs",
      "status": "partial - missing schema"
    },
    "master_node": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_role_based_architecture.py",
      "has_implementation": true,
      "implementation": "master_node",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
      "name": "master_node",
      "status": "partial - missing schema"
    },
    "match": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from version.py",
      "has_implementation": true,
      "implementation": "match",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/distlib/version.py",
      "name": "match",
      "status": "partial - missing schema"
    },
    "match_hostname": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from compat.py",
      "has_implementation": true,
      "implementation": "match_hostname",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/distlib/compat.py",
      "name": "match_hostname",
      "status": "partial - missing schema"
    },
    "mbfs_list_backends": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from multi_backend_fs_integration.py",
      "has_implementation": true,
      "implementation": "mbfs_list_backends",
      "implementation_file": "/home/barberb/ipfs_kit_py/multi_backend_fs_integration.py",
      "name": "mbfs_list_backends",
      "status": "partial - missing schema"
    },
    "mbfs_register_backend": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from multi_backend_fs_integration.py",
      "has_implementation": true,
      "implementation": "mbfs_register_backend",
      "implementation_file": "/home/barberb/ipfs_kit_py/multi_backend_fs_integration.py",
      "name": "mbfs_register_backend",
      "status": "partial - missing schema"
    },
    "mbfs_retrieve": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from multi_backend_fs_integration.py",
      "has_implementation": true,
      "implementation": "mbfs_retrieve",
      "implementation_file": "/home/barberb/ipfs_kit_py/multi_backend_fs_integration.py",
      "name": "mbfs_retrieve",
      "status": "partial - missing schema"
    },
    "mcp_anyio_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "mcp_anyio_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "mcp_anyio_server",
      "status": "partial - missing schema"
    },
    "mcp_endpoint": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "mcp_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_mcp_fix.py",
      "name": "mcp_endpoint",
      "status": "partial - missing schema"
    },
    "mcp_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from working_example.py",
      "has_implementation": true,
      "implementation": "mcp_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/example_ipfs_fs_usage.py",
      "name": "mcp_request",
      "status": "partial - missing schema"
    },
    "merge_setting": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from sessions.py",
      "has_implementation": true,
      "implementation": "merge_setting",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/requests/sessions.py",
      "name": "merge_setting",
      "status": "partial - missing schema"
    },
    "metadata_index_aggregate": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from api.py",
      "has_implementation": true,
      "implementation": "metadata_index_aggregate",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
      "name": "metadata_index_aggregate",
      "status": "partial - missing schema"
    },
    "metadata_index_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from api.py",
      "has_implementation": true,
      "implementation": "metadata_index_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
      "name": "metadata_index_status",
      "status": "partial - missing schema"
    },
    "method_with_doc": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_api.py",
      "has_implementation": true,
      "implementation": "method_with_doc",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_api.py",
      "name": "method_with_doc",
      "status": "partial - missing schema"
    },
    "metrics_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from metrics.py",
      "has_implementation": true,
      "implementation": "metrics_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/metrics.py",
      "name": "metrics_status",
      "status": "partial - missing schema"
    },
    "mfs_list_tool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "mfs_list_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "mfs_list_tool",
      "status": "partial - missing schema"
    },
    "mfs_mv_tool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "mfs_mv_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "mfs_mv_tool",
      "status": "partial - missing schema"
    },
    "mfs_read_tool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "mfs_read_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "mfs_read_tool",
      "status": "partial - missing schema"
    },
    "mfs_rm_tool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "mfs_rm_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "mfs_rm_tool",
      "status": "partial - missing schema"
    },
    "mfs_stat_tool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tools.py",
      "has_implementation": true,
      "implementation": "mfs_stat_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_mcp_tools.py",
      "name": "mfs_stat_tool",
      "status": "partial - missing schema"
    },
    "migrate_by_list": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from s3_to_ipfs.py",
      "has_implementation": true,
      "implementation": "migrate_by_list",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/migration_tools/s3_to_ipfs.py",
      "name": "migrate_by_list",
      "status": "partial - missing schema"
    },
    "migrate_directory": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from s3_to_ipfs.py",
      "has_implementation": true,
      "implementation": "migrate_directory",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/migration_tools/s3_to_ipfs.py",
      "name": "migrate_directory",
      "status": "partial - missing schema"
    },
    "migrate_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from s3_to_ipfs.py",
      "has_implementation": true,
      "implementation": "migrate_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/migration_tools/s3_to_ipfs.py",
      "name": "migrate_file",
      "status": "partial - missing schema"
    },
    "migrate_ipfs_to_s3": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from extended_features.py",
      "has_implementation": true,
      "implementation": "migrate_ipfs_to_s3",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
      "name": "migrate_ipfs_to_s3",
      "status": "partial - missing schema"
    },
    "migrate_ipfs_to_storacha": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from extended_features.py",
      "has_implementation": true,
      "implementation": "migrate_ipfs_to_storacha",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
      "name": "migrate_ipfs_to_storacha",
      "status": "partial - missing schema"
    },
    "migrate_s3_to_ipfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from extended_features.py",
      "has_implementation": true,
      "implementation": "migrate_s3_to_ipfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
      "name": "migrate_s3_to_ipfs",
      "status": "partial - missing schema"
    },
    "migrate_storacha_to_ipfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from extended_features.py",
      "has_implementation": true,
      "implementation": "migrate_storacha_to_ipfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/extended_features.py",
      "name": "migrate_storacha_to_ipfs",
      "status": "partial - missing schema"
    },
    "migration_setup": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storacha_to_s3.py",
      "has_implementation": true,
      "implementation": "migration_setup",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_s3_to_ipfs.py",
      "name": "migration_setup",
      "status": "partial - missing schema"
    },
    "minimal_add_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_ipfs_model.py",
      "has_implementation": true,
      "implementation": "minimal_add_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_ipfs_model.py",
      "name": "minimal_add_content",
      "status": "partial - missing schema"
    },
    "mkdir": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_controller.py",
      "has_implementation": true,
      "implementation": "mkdir",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/fs_journal_controller_anyio.py",
      "name": "mkdir",
      "status": "partial - missing schema"
    },
    "mock_add_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from unified_ipfs_tools.py",
      "has_implementation": true,
      "implementation": "mock_add_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/unified_ipfs_tools.py",
      "name": "mock_add_content",
      "status": "partial - missing schema"
    },
    "mock_api_key_store": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_api_key_management.py",
      "has_implementation": true,
      "implementation": "mock_api_key_store",
      "implementation_file": "/home/barberb/ipfs_kit_py/tests/test_api_key_management.py",
      "name": "mock_api_key_store",
      "status": "partial - missing schema"
    },
    "mock_audit_logger": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_api_key_management.py",
      "has_implementation": true,
      "implementation": "mock_audit_logger",
      "implementation_file": "/home/barberb/ipfs_kit_py/tests/test_api_key_management.py",
      "name": "mock_audit_logger",
      "status": "partial - missing schema"
    },
    "mock_backend_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_visualization_example.py",
      "has_implementation": true,
      "implementation": "mock_backend_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/wal_visualization_example.py",
      "name": "mock_backend_health",
      "status": "partial - missing schema"
    },
    "mock_cache_manager": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_model.py",
      "has_implementation": true,
      "implementation": "mock_cache_manager",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_mcp_integration.py",
      "name": "mock_cache_manager",
      "status": "partial - missing schema"
    },
    "mock_dependencies": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_model.py",
      "has_implementation": true,
      "implementation": "mock_dependencies",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/tests/test_mcp_libp2p_model.py",
      "name": "mock_dependencies",
      "status": "partial - missing schema"
    },
    "mock_discovery_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "mock_discovery_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "mock_discovery_model",
      "status": "partial - missing schema"
    },
    "mock_download": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_first_run_initialization.py",
      "has_implementation": true,
      "implementation": "mock_download",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_first_run_initialization.py",
      "name": "mock_download",
      "status": "partial - missing schema"
    },
    "mock_filecoin_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_controller_anyio.py",
      "has_implementation": true,
      "implementation": "mock_filecoin_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_controller_anyio.py",
      "name": "mock_filecoin_model",
      "status": "partial - missing schema"
    },
    "mock_files_mkdir": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from unified_ipfs_tools.py",
      "has_implementation": true,
      "implementation": "mock_files_mkdir",
      "implementation_file": "/home/barberb/ipfs_kit_py/unified_ipfs_tools.py",
      "name": "mock_files_mkdir",
      "status": "partial - missing schema"
    },
    "mock_get_all_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_wal.py",
      "has_implementation": true,
      "implementation": "mock_get_all_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_wal.py",
      "name": "mock_get_all_operations",
      "status": "partial - missing schema"
    },
    "mock_http_client": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_oauth_integration.py",
      "has_implementation": true,
      "implementation": "mock_http_client",
      "implementation_file": "/home/barberb/ipfs_kit_py/tests/test_oauth_integration.py",
      "name": "mock_http_client",
      "status": "partial - missing schema"
    },
    "mock_ipfs_add_directory": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "mock_ipfs_add_directory",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "mock_ipfs_add_directory",
      "status": "partial - missing schema"
    },
    "mock_ipfs_api": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface.py",
      "has_implementation": true,
      "implementation": "mock_ipfs_api",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface_additional.py",
      "name": "mock_ipfs_api",
      "status": "partial - missing schema"
    },
    "mock_ipfs_daemon_start": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "mock_ipfs_daemon_start",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "mock_ipfs_daemon_start",
      "status": "partial - missing schema"
    },
    "mock_ipfs_dht_findprovs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "mock_ipfs_dht_findprovs",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "mock_ipfs_dht_findprovs",
      "status": "partial - missing schema"
    },
    "mock_ipfs_get": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "mock_ipfs_get",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "mock_ipfs_get",
      "status": "partial - missing schema"
    },
    "mock_ipfs_id": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "mock_ipfs_id",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "mock_ipfs_id",
      "status": "partial - missing schema"
    },
    "mock_ipfs_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "mock_ipfs_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
      "name": "mock_ipfs_model",
      "status": "partial - missing schema"
    },
    "mock_ipfs_name_resolve": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "mock_ipfs_name_resolve",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "mock_ipfs_name_resolve",
      "status": "partial - missing schema"
    },
    "mock_ipfs_remove_pin": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "mock_ipfs_remove_pin",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "mock_ipfs_remove_pin",
      "status": "partial - missing schema"
    },
    "mock_ipfs_set_config_value": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "mock_ipfs_set_config_value",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "mock_ipfs_set_config_value",
      "status": "partial - missing schema"
    },
    "mock_ipfs_swarm_connect": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "mock_ipfs_swarm_connect",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "mock_ipfs_swarm_connect",
      "status": "partial - missing schema"
    },
    "mock_is_connected": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_error_scenarios.py",
      "has_implementation": true,
      "implementation": "mock_is_connected",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_error_scenarios.py",
      "name": "mock_is_connected",
      "status": "partial - missing schema"
    },
    "mock_lotus_kit": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_model.py",
      "has_implementation": true,
      "implementation": "mock_lotus_kit",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_filecoin_model.py",
      "name": "mock_lotus_kit",
      "status": "partial - missing schema"
    },
    "mock_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_controller.py",
      "has_implementation": true,
      "implementation": "mock_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_controller.py",
      "name": "mock_model",
      "status": "partial - missing schema"
    },
    "mock_module": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_all_tests.py",
      "has_implementation": true,
      "implementation": "mock_module",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/fix_all_tests.py",
      "name": "mock_module",
      "status": "partial - missing schema"
    },
    "mock_oauth_persistence": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_oauth_integration.py",
      "has_implementation": true,
      "implementation": "mock_oauth_persistence",
      "implementation_file": "/home/barberb/ipfs_kit_py/tests/test_oauth_integration.py",
      "name": "mock_oauth_persistence",
      "status": "partial - missing schema"
    },
    "mock_pin_add": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from unified_ipfs_tools.py",
      "has_implementation": true,
      "implementation": "mock_pin_add",
      "implementation_file": "/home/barberb/ipfs_kit_py/unified_ipfs_tools.py",
      "name": "mock_pin_add",
      "status": "partial - missing schema"
    },
    "mock_replicate_to_cluster": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_replication_integration_anyio.py",
      "has_implementation": true,
      "implementation": "mock_replicate_to_cluster",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_replication_integration.py",
      "name": "mock_replicate_to_cluster",
      "status": "partial - missing schema"
    },
    "mock_replicate_to_cluster_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_replication_integration_anyio.py",
      "has_implementation": true,
      "implementation": "mock_replicate_to_cluster_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_replication_integration_anyio.py",
      "name": "mock_replicate_to_cluster_async",
      "status": "partial - missing schema"
    },
    "mock_replicate_to_ipfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_replication_integration_anyio.py",
      "has_implementation": true,
      "implementation": "mock_replicate_to_ipfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_replication_integration.py",
      "name": "mock_replicate_to_ipfs",
      "status": "partial - missing schema"
    },
    "mock_replicate_to_ipfs_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_replication_integration_anyio.py",
      "has_implementation": true,
      "implementation": "mock_replicate_to_ipfs_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_replication_integration_anyio.py",
      "name": "mock_replicate_to_ipfs_async",
      "status": "partial - missing schema"
    },
    "mock_responses": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server.py",
      "has_implementation": true,
      "implementation": "mock_responses",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_mcp_server.py",
      "name": "mock_responses",
      "status": "partial - missing schema"
    },
    "mock_s3_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_s3_controller_anyio.py",
      "has_implementation": true,
      "implementation": "mock_s3_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_s3_controller_anyio.py",
      "name": "mock_s3_model",
      "status": "partial - missing schema"
    },
    "mock_storacha_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storacha_controller_anyio.py",
      "has_implementation": true,
      "implementation": "mock_storacha_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storacha_controller_anyio.py",
      "name": "mock_storacha_model",
      "status": "partial - missing schema"
    },
    "mock_version": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface.py",
      "has_implementation": true,
      "implementation": "mock_version",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface_additional.py",
      "name": "mock_version",
      "status": "partial - missing schema"
    },
    "mock_webrtc_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_controller_anyio.py",
      "has_implementation": true,
      "implementation": "mock_webrtc_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_controller_anyio.py",
      "name": "mock_webrtc_model",
      "status": "partial - missing schema"
    },
    "monitor_report": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from lotus_kit.py",
      "has_implementation": true,
      "implementation": "monitor_report",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/lotus_kit.py",
      "name": "monitor_report",
      "status": "partial - missing schema"
    },
    "monitoring_cluster": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_monitoring_and_management.py",
      "has_implementation": true,
      "implementation": "monitoring_cluster",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_monitoring_and_management.py",
      "name": "monitoring_cluster",
      "status": "partial - missing schema"
    },
    "mount_ipfs_to_fs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from add_comprehensive_ipfs_tools.py",
      "has_implementation": true,
      "implementation": "mount_ipfs_to_fs",
      "implementation_file": "/home/barberb/ipfs_kit_py/add_comprehensive_ipfs_tools.py",
      "name": "mount_ipfs_to_fs",
      "status": "partial - missing schema"
    },
    "move_content_batch": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "move_content_batch",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
      "name": "move_content_batch",
      "status": "partial - missing schema"
    },
    "move_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server_with_tools.py",
      "has_implementation": true,
      "implementation": "move_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_mcp_server.py",
      "name": "move_file",
      "status": "partial - missing schema"
    },
    "mutate": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from graphql_schema.py",
      "has_implementation": true,
      "implementation": "mutate",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/graphql_schema.py",
      "name": "mutate",
      "status": "partial - missing schema"
    },
    "name_publish": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_advanced_router.py",
      "has_implementation": true,
      "implementation": "name_publish",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
      "name": "name_publish",
      "status": "partial - missing schema"
    },
    "name_resolve": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "name_resolve",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
      "name": "name_resolve",
      "status": "partial - missing schema"
    },
    "name_resolve_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_high_level_api.py",
      "has_implementation": true,
      "implementation": "name_resolve_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
      "name": "name_resolve_async",
      "status": "partial - missing schema"
    },
    "normalize_instance": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from patch_missing_methods.py",
      "has_implementation": true,
      "implementation": "normalize_instance",
      "implementation_file": "/home/barberb/ipfs_kit_py/patch_missing_methods.py",
      "name": "normalize_instance",
      "status": "partial - missing schema"
    },
    "notifications_websocket": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from api_anyio.py",
      "has_implementation": true,
      "implementation": "notifications_websocket",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api_anyio.py",
      "name": "notifications_websocket",
      "status": "partial - missing schema"
    },
    "object_new": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_advanced_router.py",
      "has_implementation": true,
      "implementation": "object_new",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
      "name": "object_new",
      "status": "partial - missing schema"
    },
    "object_patch_add_link": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_advanced_router.py",
      "has_implementation": true,
      "implementation": "object_patch_add_link",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
      "name": "object_patch_add_link",
      "status": "partial - missing schema"
    },
    "object_patch_rm_link": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_advanced_router.py",
      "has_implementation": true,
      "implementation": "object_patch_rm_link",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
      "name": "object_patch_rm_link",
      "status": "partial - missing schema"
    },
    "object_patch_set_data": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_advanced_router.py",
      "has_implementation": true,
      "implementation": "object_patch_set_data",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
      "name": "object_patch_set_data",
      "status": "partial - missing schema"
    },
    "object_put": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_advanced_router.py",
      "has_implementation": true,
      "implementation": "object_put",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
      "name": "object_put",
      "status": "partial - missing schema"
    },
    "on_peer_discovered": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from high_level_api.py",
      "has_implementation": true,
      "implementation": "on_peer_discovered",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api.py",
      "name": "on_peer_discovered",
      "status": "partial - missing schema"
    },
    "on_shutdown": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_advanced_integration.py",
      "has_implementation": true,
      "implementation": "on_shutdown",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/ipfs_advanced_integration.py",
      "name": "on_shutdown",
      "status": "partial - missing schema"
    },
    "open_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_high_level_api.py",
      "has_implementation": true,
      "implementation": "open_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
      "name": "open_file",
      "status": "partial - missing schema"
    },
    "optimize_cache_configuration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from performance_optimizations.py",
      "has_implementation": true,
      "implementation": "optimize_cache_configuration",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/performance_optimizations.py",
      "name": "optimize_cache_configuration",
      "status": "partial - missing schema"
    },
    "optimize_high_level_api": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from performance_optimizations.py",
      "has_implementation": true,
      "implementation": "optimize_high_level_api",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/performance_optimizations.py",
      "name": "optimize_high_level_api",
      "status": "partial - missing schema"
    },
    "optimizer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_routing_system_integration.py",
      "has_implementation": true,
      "implementation": "optimizer",
      "implementation_file": "/home/barberb/ipfs_kit_py/tests/test_adaptive_optimizer.py",
      "name": "optimizer",
      "status": "partial - missing schema"
    },
    "organize_mcp_patches": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from organize_mcp_patches.py",
      "has_implementation": true,
      "implementation": "organize_mcp_patches",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/organize_mcp_patches.py",
      "name": "organize_mcp_patches",
      "status": "partial - missing schema"
    },
    "organize_patches": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from organize_patches.py",
      "has_implementation": true,
      "implementation": "organize_patches",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/organize_patches.py",
      "name": "organize_patches",
      "status": "partial - missing schema"
    },
    "original_get_filesystem": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit_integration.py",
      "has_implementation": true,
      "implementation": "original_get_filesystem",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/ipfs_kit_integration.py",
      "name": "original_get_filesystem",
      "status": "partial - missing schema"
    },
    "original_stop_webrtc_streaming": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_anyio_integration.py",
      "has_implementation": true,
      "implementation": "original_stop_webrtc_streaming",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_anyio_integration.py",
      "name": "original_stop_webrtc_streaming",
      "status": "partial - missing schema"
    },
    "param": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fastmcp.py",
      "has_implementation": true,
      "implementation": "param",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/src/mcp/server/fastmcp.py",
      "name": "param",
      "status": "partial - missing schema"
    },
    "parse_args": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from vscode_mcp_extension.py",
      "has_implementation": true,
      "implementation": "parse_args",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/direct_mcp_server.py",
      "name": "parse_args",
      "status": "partial - missing schema"
    },
    "parse_arguments": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_vscode_mcp_integration.py",
      "has_implementation": true,
      "implementation": "parse_arguments",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/server/manage_mcp_server.py",
      "name": "parse_arguments",
      "status": "partial - missing schema"
    },
    "parse_group": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from __init__.py",
      "has_implementation": true,
      "implementation": "parse_group",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "name": "parse_group",
      "status": "partial - missing schema"
    },
    "parse_requires_path": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from database.py",
      "has_implementation": true,
      "implementation": "parse_requires_path",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/distlib/database.py",
      "name": "parse_requires_path",
      "status": "partial - missing schema"
    },
    "patch_api_for_visualization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_visualization_example.py",
      "has_implementation": true,
      "implementation": "patch_api_for_visualization",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/wal_visualization_example.py",
      "name": "patch_api_for_visualization",
      "status": "partial - missing schema"
    },
    "patch_api_imports": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_import_paths.py",
      "has_implementation": true,
      "implementation": "patch_api_imports",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/fix_import_paths.py",
      "name": "patch_api_imports",
      "status": "partial - missing schema"
    },
    "patch_command_dispatcher": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_command_handlers.py",
      "has_implementation": true,
      "implementation": "patch_command_dispatcher",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_command_handlers.py",
      "name": "patch_command_dispatcher",
      "status": "partial - missing schema"
    },
    "patch_direct_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from register_all_controller_tools.py",
      "has_implementation": true,
      "implementation": "patch_direct_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/register_all_controller_tools.py",
      "name": "patch_direct_mcp_server",
      "status": "partial - missing schema"
    },
    "patch_fastapi_app": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from sse_cors_fix.py",
      "has_implementation": true,
      "implementation": "patch_fastapi_app",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/sse_cors_fix.py",
      "name": "patch_fastapi_app",
      "status": "partial - missing schema"
    },
    "patch_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server.py",
      "has_implementation": true,
      "implementation": "patch_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/direct_mcp_server.py",
      "name": "patch_file",
      "status": "partial - missing schema"
    },
    "patch_filecoin_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from patch_missing_methods.py",
      "has_implementation": true,
      "implementation": "patch_filecoin_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/patch_missing_methods.py",
      "name": "patch_filecoin_model",
      "status": "partial - missing schema"
    },
    "patch_init_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_import_paths.py",
      "has_implementation": true,
      "implementation": "patch_init_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/fix_import_paths.py",
      "name": "patch_init_file",
      "status": "partial - missing schema"
    },
    "patch_initialization_tests": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from pyarrow_test_utils.py",
      "has_implementation": true,
      "implementation": "patch_initialization_tests",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/helpers/pyarrow_test_utils.py",
      "name": "patch_initialization_tests",
      "status": "partial - missing schema"
    },
    "patch_ipfs_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_direct_fix.py",
      "has_implementation": true,
      "implementation": "patch_ipfs_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/implementation/mcp_direct_fix.py",
      "name": "patch_ipfs_model",
      "status": "partial - missing schema"
    },
    "patch_ipfs_py": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from patch_missing_methods.py",
      "has_implementation": true,
      "implementation": "patch_ipfs_py",
      "implementation_file": "/home/barberb/ipfs_kit_py/patch_missing_methods.py",
      "name": "patch_ipfs_py",
      "status": "partial - missing schema"
    },
    "patch_mcp_command_handlers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_mocks.py",
      "has_implementation": true,
      "implementation": "patch_mcp_command_handlers",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
      "name": "patch_mcp_command_handlers",
      "status": "partial - missing schema"
    },
    "patch_mcp_discovery_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_libp2p_async_is_available.py",
      "has_implementation": true,
      "implementation": "patch_mcp_discovery_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_libp2p_async_is_available.py",
      "name": "patch_mcp_discovery_model",
      "status": "partial - missing schema"
    },
    "patch_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_integration_patch.py",
      "has_implementation": true,
      "implementation": "patch_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/patch_mcp_server.py",
      "name": "patch_mcp_server",
      "status": "partial - missing schema"
    },
    "patch_mcp_server_runtime": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_tool_registration.py",
      "has_implementation": true,
      "implementation": "patch_mcp_server_runtime",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_mcp_tool_registration.py",
      "name": "patch_mcp_server_runtime",
      "status": "partial - missing schema"
    },
    "patch_missing_controller_classes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_all_tests.py",
      "has_implementation": true,
      "implementation": "patch_missing_controller_classes",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/fix_all_tests.py",
      "name": "patch_missing_controller_classes",
      "status": "partial - missing schema"
    },
    "patch_module": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ensure_mcp_loggers.py",
      "has_implementation": true,
      "implementation": "patch_module",
      "implementation_file": "/home/barberb/ipfs_kit_py/ensure_mcp_loggers.py",
      "name": "patch_module",
      "status": "partial - missing schema"
    },
    "patch_register_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from patch_direct_mcp_server.py",
      "has_implementation": true,
      "implementation": "patch_register_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/patch_direct_mcp_server.py",
      "name": "patch_register_tools",
      "status": "partial - missing schema"
    },
    "patch_run_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_mcp_server_initializer.py",
      "has_implementation": true,
      "implementation": "patch_run_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/run_mcp_server_initializer.py",
      "name": "patch_run_mcp_server",
      "status": "partial - missing schema"
    },
    "patch_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from patch_direct_mcp_server.py",
      "has_implementation": true,
      "implementation": "patch_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/patch_direct_mcp_server.py",
      "name": "patch_server",
      "status": "partial - missing schema"
    },
    "patch_shutdown": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from patch_direct_mcp_server.py",
      "has_implementation": true,
      "implementation": "patch_shutdown",
      "implementation_file": "/home/barberb/ipfs_kit_py/patch_direct_mcp_server.py",
      "name": "patch_shutdown",
      "status": "partial - missing schema"
    },
    "patch_stream_read_until": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from __init__.py",
      "has_implementation": true,
      "implementation": "patch_stream_read_until",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/__init__.py",
      "name": "patch_stream_read_until",
      "status": "partial - missing schema"
    },
    "patch_webrtc_controller_methods": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_anyio_fix.py",
      "has_implementation": true,
      "implementation": "patch_webrtc_controller_methods",
      "implementation_file": "/home/barberb/ipfs_kit_py/fixes/webrtc_event_loop_fix.py",
      "name": "patch_webrtc_controller_methods",
      "status": "partial - missing schema"
    },
    "patched_init": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from patch_missing_methods.py",
      "has_implementation": true,
      "implementation": "patched_init",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/mcp_compatibility.py",
      "name": "patched_init",
      "status": "partial - missing schema"
    },
    "patched_start_daemon": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_compatibility.py",
      "has_implementation": true,
      "implementation": "patched_start_daemon",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/mcp_compatibility.py",
      "name": "patched_start_daemon",
      "status": "partial - missing schema"
    },
    "pause_daemon_after_test": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_daemons.py",
      "has_implementation": true,
      "implementation": "pause_daemon_after_test",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_daemons.py",
      "name": "pause_daemon_after_test",
      "status": "partial - missing schema"
    },
    "pause_download": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from aria2_controller.py",
      "has_implementation": true,
      "implementation": "pause_download",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/aria2_controller.py",
      "name": "pause_download",
      "status": "partial - missing schema"
    },
    "pause_download_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from aria2_controller_anyio.py",
      "has_implementation": true,
      "implementation": "pause_download_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/aria2_controller_anyio.py",
      "name": "pause_download_async",
      "status": "partial - missing schema"
    },
    "perform_migration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from migration.py",
      "has_implementation": true,
      "implementation": "perform_migration",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/migration.py",
      "name": "perform_migration",
      "status": "partial - missing schema"
    },
    "perform_operation_with_retry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "perform_operation_with_retry",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "perform_operation_with_retry",
      "status": "partial - missing schema"
    },
    "perform_wal_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_cli_integration_example.py",
      "has_implementation": true,
      "implementation": "perform_wal_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/wal_cli_integration_example.py",
      "name": "perform_wal_operations",
      "status": "partial - missing schema"
    },
    "perform_with_retry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs.py",
      "has_implementation": true,
      "implementation": "perform_with_retry",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "perform_with_retry",
      "status": "partial - missing schema"
    },
    "periodic_metrics_update": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from routing.py",
      "has_implementation": true,
      "implementation": "periodic_metrics_update",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/extensions/routing.py",
      "name": "periodic_metrics_update",
      "status": "partial - missing schema"
    },
    "permission_manager": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_permissions_integration.py",
      "has_implementation": true,
      "implementation": "permission_manager",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_permissions_integration.py",
      "name": "permission_manager",
      "status": "partial - missing schema"
    },
    "pin_add": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_model_fix.py",
      "has_implementation": true,
      "implementation": "pin_add",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_register.py",
      "name": "pin_add",
      "status": "partial - missing schema"
    },
    "pin_add_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_high_level_api.py",
      "has_implementation": true,
      "implementation": "pin_add_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
      "name": "pin_add_async",
      "status": "partial - missing schema"
    },
    "pin_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server_anyio.py",
      "has_implementation": true,
      "implementation": "pin_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
      "name": "pin_content",
      "status": "partial - missing schema"
    },
    "pin_content_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_model_anyio.py",
      "has_implementation": true,
      "implementation": "pin_content_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_anyio.py",
      "name": "pin_content_async",
      "status": "partial - missing schema"
    },
    "pin_ls": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_server_fixed_all.py",
      "has_implementation": true,
      "implementation": "pin_ls",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "pin_ls",
      "status": "partial - missing schema"
    },
    "pin_ls_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_high_level_api.py",
      "has_implementation": true,
      "implementation": "pin_ls_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
      "name": "pin_ls_async",
      "status": "partial - missing schema"
    },
    "pin_mock_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_mcp_proxy_server.py",
      "has_implementation": true,
      "implementation": "pin_mock_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_server_with_sse.py",
      "name": "pin_mock_content",
      "status": "partial - missing schema"
    },
    "pin_multiple": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs.py",
      "has_implementation": true,
      "implementation": "pin_multiple",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "pin_multiple",
      "status": "partial - missing schema"
    },
    "pin_operations_test": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fixes.py",
      "has_implementation": true,
      "implementation": "pin_operations_test",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_fixes.py",
      "name": "pin_operations_test",
      "status": "partial - missing schema"
    },
    "pin_rm": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_model_fix.py",
      "has_implementation": true,
      "implementation": "pin_rm",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/models/ipfs_model_register.py",
      "name": "pin_rm",
      "status": "partial - missing schema"
    },
    "pin_rm_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_high_level_api.py",
      "has_implementation": true,
      "implementation": "pin_rm_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/mock_high_level_api.py",
      "name": "pin_rm_async",
      "status": "partial - missing schema"
    },
    "ping": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "ping",
      "implementation_file": "/home/barberb/ipfs_kit_py/final_mcp_server.py",
      "name": "ping",
      "status": "partial - missing schema"
    },
    "pins": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from high_level_api.py",
      "has_implementation": true,
      "implementation": "pins",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api.py",
      "name": "pins",
      "status": "partial - missing schema"
    },
    "plot_entry_types": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_monitor.py",
      "has_implementation": true,
      "implementation": "plot_entry_types",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_monitor.py",
      "name": "plot_entry_types",
      "status": "partial - missing schema"
    },
    "plot_metrics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fsspec_benchmark.py",
      "has_implementation": true,
      "implementation": "plot_metrics",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/fsspec_benchmark.py",
      "name": "plot_metrics",
      "status": "partial - missing schema"
    },
    "plot_operation_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_visualization_anyio.py",
      "has_implementation": true,
      "implementation": "plot_operation_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_visualization.py",
      "name": "plot_operation_status",
      "status": "partial - missing schema"
    },
    "poll_connection_stats": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_monitor_integration.py",
      "has_implementation": true,
      "implementation": "poll_connection_stats",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/test/webrtc_monitor_integration.py",
      "name": "poll_connection_stats",
      "status": "partial - missing schema"
    },
    "prepare_distributed_task": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "prepare_distributed_task",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "prepare_distributed_task",
      "status": "partial - missing schema"
    },
    "print_api_stability_report": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from api_stability.py",
      "has_implementation": true,
      "implementation": "print_api_stability_report",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api_stability.py",
      "name": "print_api_stability_report",
      "status": "partial - missing schema"
    },
    "print_header": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from data_science_examples.py",
      "has_implementation": true,
      "implementation": "print_header",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/data_science_examples.py",
      "name": "print_header",
      "status": "partial - missing schema"
    },
    "print_json": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storacha_backend.py",
      "has_implementation": true,
      "implementation": "print_json",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/connect_to_mcp.py",
      "name": "print_json",
      "status": "partial - missing schema"
    },
    "print_section": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cluster_state_example.py",
      "has_implementation": true,
      "implementation": "print_section",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/cluster_state_example.py",
      "name": "print_section",
      "status": "partial - missing schema"
    },
    "print_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_vscode_mcp_integration.py",
      "has_implementation": true,
      "implementation": "print_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test_vscode_mcp_integration.py",
      "name": "print_success",
      "status": "partial - missing schema"
    },
    "print_task_details": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from migration_cli.py",
      "has_implementation": true,
      "implementation": "print_task_details",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/migration_tools/migration_cli.py",
      "name": "print_task_details",
      "status": "partial - missing schema"
    },
    "print_tools_by_category": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_tools.py",
      "has_implementation": true,
      "implementation": "print_tools_by_category",
      "implementation_file": "/home/barberb/ipfs_kit_py/verify_tools.py",
      "name": "print_tools_by_category",
      "status": "partial - missing schema"
    },
    "process_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from process_files_individually.py",
      "has_implementation": true,
      "implementation": "process_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/process_files_individually.py",
      "name": "process_file",
      "status": "partial - missing schema"
    },
    "process_message": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_server_with_sse.py",
      "has_implementation": true,
      "implementation": "process_message",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_server_with_sse.py",
      "name": "process_message",
      "status": "partial - missing schema"
    },
    "profile_tiered_cache": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from performance_profiling.py",
      "has_implementation": true,
      "implementation": "profile_tiered_cache",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/performance_profiling.py",
      "name": "profile_tiered_cache",
      "status": "partial - missing schema"
    },
    "progress_callback": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_resumable_examples.py",
      "has_implementation": true,
      "implementation": "progress_callback",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/mfs_resumable_examples.py",
      "name": "progress_callback",
      "status": "partial - missing schema"
    },
    "publish_metadata_index": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "publish_metadata_index",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "publish_metadata_index",
      "status": "partial - missing schema"
    },
    "publish_name": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_mocks.py",
      "has_implementation": true,
      "implementation": "publish_name",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
      "name": "publish_name",
      "status": "partial - missing schema"
    },
    "publish_to_ipns": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_high_level_api.py",
      "has_implementation": true,
      "implementation": "publish_to_ipns",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
      "name": "publish_to_ipns",
      "status": "partial - missing schema"
    },
    "purge_downloads": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from aria2_controller.py",
      "has_implementation": true,
      "implementation": "purge_downloads",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/aria2_controller.py",
      "name": "purge_downloads",
      "status": "partial - missing schema"
    },
    "purge_downloads_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from aria2_controller_anyio.py",
      "has_implementation": true,
      "implementation": "purge_downloads_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/aria2_controller_anyio.py",
      "name": "purge_downloads_async",
      "status": "partial - missing schema"
    },
    "put_dag_node": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_controller_mfs_methods.py",
      "has_implementation": true,
      "implementation": "put_dag_node",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
      "name": "put_dag_node",
      "status": "partial - missing schema"
    },
    "pyarrow_examples": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from data_science_examples.py",
      "has_implementation": true,
      "implementation": "pyarrow_examples",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/data_science_examples.py",
      "name": "pyarrow_examples",
      "status": "partial - missing schema"
    },
    "pyarrow_mock_context": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from pyarrow_test_utils.py",
      "has_implementation": true,
      "implementation": "pyarrow_mock_context",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/pyarrow_test_utils.py",
      "name": "pyarrow_mock_context",
      "status": "partial - missing schema"
    },
    "query": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "query",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "query",
      "status": "partial - missing schema"
    },
    "query_entities": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipld_knowledge_graph.py",
      "has_implementation": true,
      "implementation": "query_entities",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipld_knowledge_graph.py",
      "name": "query_entities",
      "status": "partial - missing schema"
    },
    "query_metadata_index": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_metadata_example.py",
      "has_implementation": true,
      "implementation": "query_metadata_index",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/ai_ml_metadata_example.py",
      "name": "query_metadata_index",
      "status": "partial - missing schema"
    },
    "raise_if_fsspec": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_integrated_get_filesystem.py",
      "has_implementation": true,
      "implementation": "raise_if_fsspec",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_integrated_get_filesystem.py",
      "name": "raise_if_fsspec",
      "status": "partial - missing schema"
    },
    "random_string": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs.py",
      "has_implementation": true,
      "implementation": "random_string",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_all_controllers.py",
      "name": "random_string",
      "status": "partial - missing schema"
    },
    "rbac_manager": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_auth.py",
      "has_implementation": true,
      "implementation": "rbac_manager",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/tests/test_auth.py",
      "name": "rbac_manager",
      "status": "partial - missing schema"
    },
    "read_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_ipfs_extensions.py",
      "has_implementation": true,
      "implementation": "read_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller_mfs_methods.py",
      "name": "read_file",
      "status": "partial - missing schema"
    },
    "read_file_slice": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server.py",
      "has_implementation": true,
      "implementation": "read_file_slice",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/direct_mcp_server.py",
      "name": "read_file_slice",
      "status": "partial - missing schema"
    },
    "read_file_slice_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from unified_mcp_server.py",
      "has_implementation": true,
      "implementation": "read_file_slice_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/unified_mcp_server.py",
      "name": "read_file_slice_endpoint",
      "status": "partial - missing schema"
    },
    "read_root": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_api.py",
      "has_implementation": true,
      "implementation": "read_root",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/server/run_fixed_mcp_server.py",
      "name": "read_root",
      "status": "partial - missing schema"
    },
    "read_text": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_high_level_api.py",
      "has_implementation": true,
      "implementation": "read_text",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
      "name": "read_text",
      "status": "partial - missing schema"
    },
    "record_routing_outcome": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from routing_integration.py",
      "has_implementation": true,
      "implementation": "record_routing_outcome",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing_integration.py",
      "name": "record_routing_outcome",
      "status": "partial - missing schema"
    },
    "record_test_result": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_final_mcp_server.py",
      "has_implementation": true,
      "implementation": "record_test_result",
      "implementation_file": "/home/barberb/ipfs_kit_py/test_final_mcp_server.py",
      "name": "record_test_result",
      "status": "partial - missing schema"
    },
    "recover": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_controller.py",
      "has_implementation": true,
      "implementation": "recover",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/fs_journal_controller_anyio.py",
      "name": "recover",
      "status": "partial - missing schema"
    },
    "recv": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from streaming_security_integration.py",
      "has_implementation": true,
      "implementation": "recv",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/streaming_security_integration.py",
      "name": "recv",
      "status": "partial - missing schema"
    },
    "refresh_data": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from bg_dashboard.py",
      "has_implementation": true,
      "implementation": "refresh_data",
      "implementation_file": "/home/barberb/ipfs_kit_py/bin/bg_dashboard.py",
      "name": "refresh_data",
      "status": "partial - missing schema"
    },
    "register_additional_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from final_mcp_server.py",
      "has_implementation": true,
      "implementation": "register_additional_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/final_mcp_server.py",
      "name": "register_additional_tools",
      "status": "partial - missing schema"
    },
    "register_advanced_ipfs_routes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_advanced_integration.py",
      "has_implementation": true,
      "implementation": "register_advanced_ipfs_routes",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_integration.py",
      "name": "register_advanced_ipfs_routes",
      "status": "partial - missing schema"
    },
    "register_all_ipfs_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from unified_ipfs_tools.py",
      "has_implementation": true,
      "implementation": "register_all_ipfs_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/unified_ipfs_tools.py",
      "name": "register_all_ipfs_tools",
      "status": "partial - missing schema"
    },
    "register_all_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from final_mcp_server.py",
      "has_implementation": true,
      "implementation": "register_all_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/final_mcp_server.py",
      "name": "register_all_tools",
      "status": "partial - missing schema"
    },
    "register_controller": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_server_fixed_all.py",
      "has_implementation": true,
      "implementation": "register_controller",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_server_fixed_all.py",
      "name": "register_controller",
      "status": "partial - missing schema"
    },
    "register_default_tools": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "register_default_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/simple_mcp_server.py",
      "name": "register_default_tools",
      "status": "partial - missing schema"
    },
    "register_fs_handlers_with_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integrate_fs_with_tools.py",
      "has_implementation": true,
      "implementation": "register_fs_handlers_with_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/integrate_fs_with_tools.py",
      "name": "register_fs_handlers_with_tools",
      "status": "partial - missing schema"
    },
    "register_fs_journal_commands": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_cli.py",
      "has_implementation": true,
      "implementation": "register_fs_journal_commands",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fs_journal_cli.py",
      "name": "register_fs_journal_commands",
      "status": "partial - missing schema"
    },
    "register_integration_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_ipfs_fs_integration.py",
      "has_implementation": true,
      "implementation": "register_integration_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhance_ipfs_fs_integration.py",
      "name": "register_integration_tools",
      "status": "partial - missing schema"
    },
    "register_ipfs_fs_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from final_mcp_server.py",
      "has_implementation": true,
      "implementation": "register_ipfs_fs_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/final_mcp_server.py",
      "name": "register_ipfs_fs_tools",
      "status": "partial - missing schema"
    },
    "register_ipfs_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from final_mcp_server.py",
      "has_implementation": true,
      "implementation": "register_ipfs_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/final_mcp_server.py",
      "name": "register_ipfs_tools",
      "status": "partial - missing schema"
    },
    "register_mcp_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from load_mcp_tools.py",
      "has_implementation": true,
      "implementation": "register_mcp_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/load_mcp_tools.py",
      "name": "register_mcp_tools",
      "status": "partial - missing schema"
    },
    "register_multi_backend_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from register_multi_backend_tools.py",
      "has_implementation": true,
      "implementation": "register_multi_backend_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/register_multi_backend_tools.py",
      "name": "register_multi_backend_tools",
      "status": "partial - missing schema"
    },
    "register_peer_websocket": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from peer_websocket_anyio.py",
      "has_implementation": true,
      "implementation": "register_peer_websocket",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/peer_websocket.py",
      "name": "register_peer_websocket",
      "status": "partial - missing schema"
    },
    "register_resource": {
      "auto_discovered": true,
      "description": "Tool implementation found in enhanced_final_mcp_server.py",
      "has_implementation": true,
      "implementation": "register_resource",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhanced_final_mcp_server.py",
      "name": "register_resource",
      "status": "partial - missing schema"
    },
    "register_routes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server_anyio.py",
      "has_implementation": true,
      "implementation": "register_routes",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
      "name": "register_routes",
      "status": "partial - missing schema"
    },
    "register_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "register_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "register_server",
      "status": "partial - missing schema"
    },
    "register_server_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "register_server_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "register_server_async",
      "status": "partial - missing schema"
    },
    "register_task_handler": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit_extensions.py",
      "has_implementation": true,
      "implementation": "register_task_handler",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit_extensions.py",
      "name": "register_task_handler",
      "status": "partial - missing schema"
    },
    "register_tool": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "register_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/simple_mcp_server.py",
      "name": "register_tool",
      "status": "partial - missing schema"
    },
    "register_tools": {
      "auto_discovered": true,
      "description": "Tool implementation found in direct_tool_registry.py",
      "has_implementation": true,
      "implementation": "register_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_direct_mcp_server.py",
      "name": "register_tools",
      "status": "partial - missing schema"
    },
    "register_tools_with_direct_mcp": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from register_multi_backend_tools.py",
      "has_implementation": true,
      "implementation": "register_tools_with_direct_mcp",
      "implementation_file": "/home/barberb/ipfs_kit_py/register_multi_backend_tools.py",
      "name": "register_tools_with_direct_mcp",
      "status": "partial - missing schema"
    },
    "register_tools_with_mcp": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from register_ipfs_tools_with_mcp.py",
      "has_implementation": true,
      "implementation": "register_tools_with_mcp",
      "implementation_file": "/home/barberb/ipfs_kit_py/register_enhanced_tools.py",
      "name": "register_tools_with_mcp",
      "status": "partial - missing schema"
    },
    "register_wal_commands": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_cli_integration_anyio.py",
      "has_implementation": true,
      "implementation": "register_wal_commands",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_cli_integration.py",
      "name": "register_wal_commands",
      "status": "partial - missing schema"
    },
    "register_with_app": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controller_mocked_integration.py",
      "has_implementation": true,
      "implementation": "register_with_app",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs/router.py",
      "name": "register_with_app",
      "status": "partial - missing schema"
    },
    "register_with_mcp": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from router.py",
      "has_implementation": true,
      "implementation": "register_with_mcp",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs/router.py",
      "name": "register_with_mcp",
      "status": "partial - missing schema"
    },
    "remove": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fs_journal_controller.py",
      "has_implementation": true,
      "implementation": "remove",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/fs_journal_controller_anyio.py",
      "name": "remove",
      "status": "partial - missing schema"
    },
    "remove_credential": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_credential_controller_anyio.py",
      "has_implementation": true,
      "implementation": "remove_credential",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_credential_controller_anyio.py",
      "name": "remove_credential",
      "status": "partial - missing schema"
    },
    "remove_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_controller_mfs_methods.py",
      "has_implementation": true,
      "implementation": "remove_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller_mfs_methods.py",
      "name": "remove_file",
      "status": "partial - missing schema"
    },
    "remove_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "remove_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "remove_server",
      "status": "partial - missing schema"
    },
    "remove_server_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "remove_server_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "remove_server_async",
      "status": "partial - missing schema"
    },
    "remove_symlinks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_imports.py",
      "has_implementation": true,
      "implementation": "remove_symlinks",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_imports.py",
      "name": "remove_symlinks",
      "status": "partial - missing schema"
    },
    "replicate_webrtc_metadata": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_metadata_replication_anyio.py",
      "has_implementation": true,
      "implementation": "replicate_webrtc_metadata",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication_anyio.py",
      "name": "replicate_webrtc_metadata",
      "status": "partial - missing schema"
    },
    "report_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from file_watcher.py",
      "has_implementation": true,
      "implementation": "report_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/utils/file_watcher.py",
      "name": "report_error",
      "status": "partial - missing schema"
    },
    "request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc.py",
      "has_implementation": true,
      "implementation": "request",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive.py",
      "name": "request",
      "status": "partial - missing schema"
    },
    "requires_permission": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from server_integration.py",
      "has_implementation": true,
      "implementation": "requires_permission",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/server_integration.py",
      "name": "requires_permission",
      "status": "partial - missing schema"
    },
    "reset": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_controller.py",
      "has_implementation": true,
      "implementation": "reset",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/controllers/ipfs_controller.py",
      "name": "reset",
      "status": "partial - missing schema"
    },
    "reset_metrics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from performance_monitor.py",
      "has_implementation": true,
      "implementation": "reset_metrics",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/monitoring/performance_monitor.py",
      "name": "reset_metrics",
      "status": "partial - missing schema"
    },
    "reset_stats": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server_anyio.py",
      "has_implementation": true,
      "implementation": "reset_stats",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server_anyio.py",
      "name": "reset_stats",
      "status": "partial - missing schema"
    },
    "resolve_ai_datasets": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from graphql_schema.py",
      "has_implementation": true,
      "implementation": "resolve_ai_datasets",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/graphql_schema.py",
      "name": "resolve_ai_datasets",
      "status": "partial - missing schema"
    },
    "resolve_cluster_peers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from graphql_schema.py",
      "has_implementation": true,
      "implementation": "resolve_cluster_peers",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/graphql_schema.py",
      "name": "resolve_cluster_peers",
      "status": "partial - missing schema"
    },
    "resolve_cluster_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from graphql_schema.py",
      "has_implementation": true,
      "implementation": "resolve_cluster_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/graphql_schema.py",
      "name": "resolve_cluster_status",
      "status": "partial - missing schema"
    },
    "resolve_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from graphql_schema.py",
      "has_implementation": true,
      "implementation": "resolve_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/graphql_schema.py",
      "name": "resolve_content",
      "status": "partial - missing schema"
    },
    "resolve_ipns": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_high_level_api.py",
      "has_implementation": true,
      "implementation": "resolve_ipns",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
      "name": "resolve_ipns",
      "status": "partial - missing schema"
    },
    "resolve_keys": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from graphql_schema.py",
      "has_implementation": true,
      "implementation": "resolve_keys",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/graphql_schema.py",
      "name": "resolve_keys",
      "status": "partial - missing schema"
    },
    "resolve_name": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_controller_mfs_methods.py",
      "has_implementation": true,
      "implementation": "resolve_name",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
      "name": "resolve_name",
      "status": "partial - missing schema"
    },
    "resolve_pins": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from graphql_schema.py",
      "has_implementation": true,
      "implementation": "resolve_pins",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/graphql_schema.py",
      "name": "resolve_pins",
      "status": "partial - missing schema"
    },
    "resolve_resolve_ipns": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from graphql_schema.py",
      "has_implementation": true,
      "implementation": "resolve_resolve_ipns",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/graphql_schema.py",
      "name": "resolve_resolve_ipns",
      "status": "partial - missing schema"
    },
    "resource_metrics_provider": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cluster_management_example.py",
      "has_implementation": true,
      "implementation": "resource_metrics_provider",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/cluster_management_example.py",
      "name": "resource_metrics_provider",
      "status": "partial - missing schema"
    },
    "restart_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from add_mcp_initialize.py",
      "has_implementation": true,
      "implementation": "restart_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_filecoin_gateway.py",
      "name": "restart_mcp_server",
      "status": "partial - missing schema"
    },
    "restart_servers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_vscode_mcp_integration.py",
      "has_implementation": true,
      "implementation": "restart_servers",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_vscode_mcp_integration.py",
      "name": "restart_servers",
      "status": "partial - missing schema"
    },
    "restart_vscode": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_vscode_mcp_integration.py",
      "has_implementation": true,
      "implementation": "restart_vscode",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_vscode_mcp_integration.py",
      "name": "restart_vscode",
      "status": "partial - missing schema"
    },
    "resumable_ops": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_enhanced_resumable.py",
      "has_implementation": true,
      "implementation": "resumable_ops",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced_resumable.py",
      "name": "resumable_ops",
      "status": "partial - missing schema"
    },
    "resumable_ops_no_permissions": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_permissions_integration.py",
      "has_implementation": true,
      "implementation": "resumable_ops_no_permissions",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_permissions_integration.py",
      "name": "resumable_ops_no_permissions",
      "status": "partial - missing schema"
    },
    "retrieve_from_backend": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_backends_comprehensive.py",
      "has_implementation": true,
      "implementation": "retrieve_from_backend",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/test_storage_backends_comprehensive.py",
      "name": "retrieve_from_backend",
      "status": "partial - missing schema"
    },
    "rollback": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "rollback",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
      "name": "rollback",
      "status": "partial - missing schema"
    },
    "root": {
      "auto_discovered": true,
      "description": "Tool implementation found in enhanced_final_mcp_server.py",
      "has_implementation": true,
      "implementation": "root",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/direct_mcp_server.py",
      "name": "root",
      "status": "partial - missing schema"
    },
    "router": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_s3_controller_anyio.py",
      "has_implementation": true,
      "implementation": "router",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_s3_controller_anyio.py",
      "name": "router",
      "status": "partial - missing schema"
    },
    "routing_manager": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_routing_system_integration.py",
      "has_implementation": true,
      "implementation": "routing_manager",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_routing_system_integration.py",
      "name": "routing_manager",
      "status": "partial - missing schema"
    },
    "run": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_cli.py",
      "has_implementation": true,
      "implementation": "run",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_cli.py",
      "name": "run",
      "status": "partial - missing schema"
    },
    "run_access_pattern_benchmark": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fsspec_benchmark.py",
      "has_implementation": true,
      "implementation": "run_access_pattern_benchmark",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/fsspec_benchmark.py",
      "name": "run_access_pattern_benchmark",
      "status": "partial - missing schema"
    },
    "run_all_benchmarks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from benchmark.py",
      "has_implementation": true,
      "implementation": "run_all_benchmarks",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark.py",
      "name": "run_all_benchmarks",
      "status": "partial - missing schema"
    },
    "run_all_tests": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_vscode_mcp_integration.py",
      "has_implementation": true,
      "implementation": "run_all_tests",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/performance_profiling.py",
      "name": "run_all_tests",
      "status": "partial - missing schema"
    },
    "run_api_test": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server.py",
      "has_implementation": true,
      "implementation": "run_api_test",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server.py",
      "name": "run_api_test",
      "status": "partial - missing schema"
    },
    "run_backend_diagnostic": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_backends_api.py",
      "has_implementation": true,
      "implementation": "run_backend_diagnostic",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_backends_api.py",
      "name": "run_backend_diagnostic",
      "status": "partial - missing schema"
    },
    "run_basic_benchmark": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from benchmark_example.py",
      "has_implementation": true,
      "implementation": "run_basic_benchmark",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/benchmark_example.py",
      "name": "run_basic_benchmark",
      "status": "partial - missing schema"
    },
    "run_basic_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from persistent_datastore_example.py",
      "has_implementation": true,
      "implementation": "run_basic_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/persistent_datastore_example.py",
      "name": "run_basic_operations",
      "status": "partial - missing schema"
    },
    "run_benchmark": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_benchmark_helpers.py",
      "has_implementation": true,
      "implementation": "run_benchmark",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api/webrtc_benchmark_helpers_anyio.py",
      "name": "run_benchmark",
      "status": "partial - missing schema"
    },
    "run_benchmark_test_version": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from benchmark_framework.py",
      "has_implementation": true,
      "implementation": "run_benchmark_test_version",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/benchmark_framework.py",
      "name": "run_benchmark_test_version",
      "status": "partial - missing schema"
    },
    "run_benchmarks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_performance_benchmark.py",
      "has_implementation": true,
      "implementation": "run_benchmarks",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/wal_performance_benchmark.py",
      "name": "run_benchmarks",
      "status": "partial - missing schema"
    },
    "run_bidirectional_example": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from peer_websocket_anyio_example.py",
      "has_implementation": true,
      "implementation": "run_bidirectional_example",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/peer_websocket_anyio_example.py",
      "name": "run_bidirectional_example",
      "status": "partial - missing schema"
    },
    "run_client": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from notification_client_example.py",
      "has_implementation": true,
      "implementation": "run_client",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/notification_client_example.py",
      "name": "run_client",
      "status": "partial - missing schema"
    },
    "run_cluster_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_ctl.py",
      "has_implementation": true,
      "implementation": "run_cluster_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
      "name": "run_cluster_command",
      "status": "partial - missing schema"
    },
    "run_cluster_follow_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_follow.py",
      "has_implementation": true,
      "implementation": "run_cluster_follow_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_follow.py",
      "name": "run_cluster_follow_command",
      "status": "partial - missing schema"
    },
    "run_cluster_service_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_service.py",
      "has_implementation": true,
      "implementation": "run_cluster_service_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_service.py",
      "name": "run_cluster_service_command",
      "status": "partial - missing schema"
    },
    "run_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from lotus_daemon.py",
      "has_implementation": true,
      "implementation": "run_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/lotus_daemon.py",
      "name": "run_command",
      "status": "partial - missing schema"
    },
    "run_comprehensive_benchmark": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from benchmark_example.py",
      "has_implementation": true,
      "implementation": "run_comprehensive_benchmark",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/benchmark_framework_example.py",
      "name": "run_comprehensive_benchmark",
      "status": "partial - missing schema"
    },
    "run_coroutine_safely": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_anyio_fix.py",
      "has_implementation": true,
      "implementation": "run_coroutine_safely",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_server_combined.py",
      "name": "run_coroutine_safely",
      "status": "partial - missing schema"
    },
    "run_demo": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_advanced_integration.py",
      "has_implementation": true,
      "implementation": "run_demo",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/ipfs_advanced_integration.py",
      "name": "run_demo",
      "status": "partial - missing schema"
    },
    "run_dht_example": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from advanced_ipfs_operations.py",
      "has_implementation": true,
      "implementation": "run_dht_example",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/advanced_ipfs_operations.py",
      "name": "run_dht_example",
      "status": "partial - missing schema"
    },
    "run_example_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_server_anyio_example.py",
      "has_implementation": true,
      "implementation": "run_example_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/mcp_server_example.py",
      "name": "run_example_server",
      "status": "partial - missing schema"
    },
    "run_implementation_scripts": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_mcp_real_implementations.py",
      "has_implementation": true,
      "implementation": "run_implementation_scripts",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_mcp_real_implementations.py",
      "name": "run_implementation_scripts",
      "status": "partial - missing schema"
    },
    "run_ipc_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from arrow_ipc_routing_example.py",
      "has_implementation": true,
      "implementation": "run_ipc_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/arrow_ipc_routing_example.py",
      "name": "run_ipc_server",
      "status": "partial - missing schema"
    },
    "run_ipfs_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_ipfs.py",
      "has_implementation": true,
      "implementation": "run_ipfs_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/enhanced_ipfs.py",
      "name": "run_ipfs_command",
      "status": "partial - missing schema"
    },
    "run_ipfs_integration_test": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_integration.py",
      "has_implementation": true,
      "implementation": "run_ipfs_integration_test",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_integration.py",
      "name": "run_ipfs_integration_test",
      "status": "partial - missing schema"
    },
    "run_ipget_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipget.py",
      "has_implementation": true,
      "implementation": "run_ipget_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipget.py",
      "name": "run_ipget_command",
      "status": "partial - missing schema"
    },
    "run_ipns_example": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from advanced_ipfs_operations.py",
      "has_implementation": true,
      "implementation": "run_ipns_example",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/advanced_ipfs_operations.py",
      "name": "run_ipns_example",
      "status": "partial - missing schema"
    },
    "run_libp2p_verification": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p.py",
      "has_implementation": true,
      "implementation": "run_libp2p_verification",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p.py",
      "name": "run_libp2p_verification",
      "status": "partial - missing schema"
    },
    "run_lotus_daemon_tests": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from final_lotus_verification.py",
      "has_implementation": true,
      "implementation": "run_lotus_daemon_tests",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/test/final_lotus_verification.py",
      "name": "run_lotus_daemon_tests",
      "status": "partial - missing schema"
    },
    "run_master_node": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cluster_management_example.py",
      "has_implementation": true,
      "implementation": "run_master_node",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/cluster_management_example.py",
      "name": "run_master_node",
      "status": "partial - missing schema"
    },
    "run_mcp_emulator_demo": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_emulator.py",
      "has_implementation": true,
      "implementation": "run_mcp_emulator_demo",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/mcp_emulator.py",
      "name": "run_mcp_emulator_demo",
      "status": "partial - missing schema"
    },
    "run_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server.py",
      "has_implementation": true,
      "implementation": "run_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server.py",
      "name": "run_mcp_server",
      "status": "partial - missing schema"
    },
    "run_migration_test": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_migration_functionality.py",
      "has_implementation": true,
      "implementation": "run_migration_test",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/migration/test_migration_functionality.py",
      "name": "run_migration_test",
      "status": "partial - missing schema"
    },
    "run_mini_test": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server.py",
      "has_implementation": true,
      "implementation": "run_mini_test",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server.py",
      "name": "run_mini_test",
      "status": "partial - missing schema"
    },
    "run_parallel_benchmark": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from benchmark_example.py",
      "has_implementation": true,
      "implementation": "run_parallel_benchmark",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/benchmark_example.py",
      "name": "run_parallel_benchmark",
      "status": "partial - missing schema"
    },
    "run_performance_benchmark": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from persistent_datastore_example.py",
      "has_implementation": true,
      "implementation": "run_performance_benchmark",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/persistent_datastore_example.py",
      "name": "run_performance_benchmark",
      "status": "partial - missing schema"
    },
    "run_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from grpc_routing_example.py",
      "has_implementation": true,
      "implementation": "run_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api.py",
      "name": "run_server",
      "status": "partial - missing schema"
    },
    "run_server_tests": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_all_webrtc_fixes.py",
      "has_implementation": true,
      "implementation": "run_server_tests",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_all_webrtc_fixes.py",
      "name": "run_server_tests",
      "status": "partial - missing schema"
    },
    "run_test": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_fixes_direct.py",
      "has_implementation": true,
      "implementation": "run_test",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/test_storage_backends_comprehensive.py",
      "name": "run_test",
      "status": "partial - missing schema"
    },
    "run_tests": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_tests.py",
      "has_implementation": true,
      "implementation": "run_tests",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/scripts/test_ai_ml_integration.py",
      "name": "run_tests",
      "status": "partial - missing schema"
    },
    "run_tool": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "run_tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/simple_mcp_server.py",
      "name": "run_tool",
      "status": "partial - missing schema"
    },
    "run_verification": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from all_in_one_verify.py",
      "has_implementation": true,
      "implementation": "run_verification",
      "implementation_file": "/home/barberb/ipfs_kit_py/verify_enhanced_mcp.py",
      "name": "run_verification",
      "status": "partial - missing schema"
    },
    "run_websocket_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from websocket_peer_discovery_example.py",
      "has_implementation": true,
      "implementation": "run_websocket_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/websocket_peer_discovery_example.py",
      "name": "run_websocket_server",
      "status": "partial - missing schema"
    },
    "run_worker_node": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cluster_management_example.py",
      "has_implementation": true,
      "implementation": "run_worker_node",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/cluster_management_example.py",
      "name": "run_worker_node",
      "status": "partial - missing schema"
    },
    "runtime_checkable": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from typing_extensions.py",
      "has_implementation": true,
      "implementation": "runtime_checkable",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pip/_vendor/typing_extensions.py",
      "name": "runtime_checkable",
      "status": "partial - missing schema"
    },
    "s3_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_extensions.py",
      "has_implementation": true,
      "implementation": "s3_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/s3.py",
      "name": "s3_status",
      "status": "partial - missing schema"
    },
    "safe_import": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from patch_missing_methods.py",
      "has_implementation": true,
      "implementation": "safe_import",
      "implementation_file": "/home/barberb/ipfs_kit_py/patch_missing_methods.py",
      "name": "safe_import",
      "status": "partial - missing schema"
    },
    "save_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fixed_high_level_api.py",
      "has_implementation": true,
      "implementation": "save_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/fixed_high_level_api.py",
      "name": "save_config",
      "status": "partial - missing schema"
    },
    "save_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "save_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "save_model",
      "status": "partial - missing schema"
    },
    "save_state": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_enhanced_resumable.py",
      "has_implementation": true,
      "implementation": "save_state",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced_resumable.py",
      "name": "save_state",
      "status": "partial - missing schema"
    },
    "save_to_disk": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_backends_to_disk.py",
      "has_implementation": true,
      "implementation": "save_to_disk",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/storage/test_storage_backends_to_disk.py",
      "name": "save_to_disk",
      "status": "partial - missing schema"
    },
    "save_to_ipfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "save_to_ipfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "save_to_ipfs",
      "status": "partial - missing schema"
    },
    "search_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from high_level_api_example.py",
      "has_implementation": true,
      "implementation": "search_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/high_level_api_example.py",
      "name": "search_content",
      "status": "partial - missing schema"
    },
    "search_models": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integrated_search.py",
      "has_implementation": true,
      "implementation": "search_models",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/integrated_search.py",
      "name": "search_models",
      "status": "partial - missing schema"
    },
    "secure_handle_notification_websocket": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from streaming_security_integration.py",
      "has_implementation": true,
      "implementation": "secure_handle_notification_websocket",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/streaming_security_integration.py",
      "name": "secure_handle_notification_websocket",
      "status": "partial - missing schema"
    },
    "secure_handle_webrtc_signaling": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from streaming_security_integration.py",
      "has_implementation": true,
      "implementation": "secure_handle_webrtc_signaling",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/streaming_security_integration.py",
      "name": "secure_handle_webrtc_signaling",
      "status": "partial - missing schema"
    },
    "select_backend": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_router.py",
      "has_implementation": true,
      "implementation": "select_backend",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_router.py",
      "name": "select_backend",
      "status": "partial - missing schema"
    },
    "send_event": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_server_with_sse.py",
      "has_implementation": true,
      "implementation": "send_event",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_server_with_sse.py",
      "name": "send_event",
      "status": "partial - missing schema"
    },
    "sep": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from pytest_direct_fix.py",
      "has_implementation": true,
      "implementation": "sep",
      "implementation_file": "/home/barberb/ipfs_kit_py/pytest_direct_fix.py",
      "name": "sep",
      "status": "partial - missing schema"
    },
    "server_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fixes.py",
      "has_implementation": true,
      "implementation": "server_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_fixes.py",
      "name": "server_config",
      "status": "partial - missing schema"
    },
    "server_info": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_server_auth_example.py",
      "has_implementation": true,
      "implementation": "server_info",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/examples/mcp_server_auth_example.py",
      "name": "server_info",
      "status": "partial - missing schema"
    },
    "setUp": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_simple_tests.py",
      "has_implementation": true,
      "implementation": "setUp",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_algorithms.py",
      "name": "setUp",
      "status": "partial - missing schema"
    },
    "setUpClass": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_mcp_libp2p_integration.py",
      "has_implementation": true,
      "implementation": "setUpClass",
      "implementation_file": "/home/barberb/ipfs_kit_py/tests/integration/backends/test_ipfs_backend.py",
      "name": "setUpClass",
      "status": "partial - missing schema"
    },
    "set_pins_count": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_prometheus.py",
      "has_implementation": true,
      "implementation": "set_pins_count",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_prometheus.py",
      "name": "set_pins_count",
      "status": "partial - missing schema"
    },
    "setup": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_cli_controller_anyio.py",
      "has_implementation": true,
      "implementation": "setup",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_errors.py",
      "name": "setup",
      "status": "partial - missing schema"
    },
    "setup_advanced_routing": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from __init__.py",
      "has_implementation": true,
      "implementation": "setup_advanced_routing",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/__init__.py",
      "name": "setup_advanced_routing",
      "status": "partial - missing schema"
    },
    "setup_and_cleanup": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_streaming.py",
      "has_implementation": true,
      "implementation": "setup_and_cleanup",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/streaming/test_streaming_anyio.py",
      "name": "setup_and_cleanup",
      "status": "partial - missing schema"
    },
    "setup_api": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from optimized_monitoring_example.py",
      "has_implementation": true,
      "implementation": "setup_api",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/advanced_ipfs_operations.py",
      "name": "setup_api",
      "status": "partial - missing schema"
    },
    "setup_api_client": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_monitor_integration.py",
      "has_implementation": true,
      "implementation": "setup_api_client",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/test/webrtc_monitor_integration.py",
      "name": "setup_api_client",
      "status": "partial - missing schema"
    },
    "setup_api_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_api_example.py",
      "has_implementation": true,
      "implementation": "setup_api_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/wal_api_example.py",
      "name": "setup_api_server",
      "status": "partial - missing schema"
    },
    "setup_aws_configuration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_s3_implementation.py",
      "has_implementation": true,
      "implementation": "setup_aws_configuration",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_s3_implementation.py",
      "name": "setup_aws_configuration",
      "status": "partial - missing schema"
    },
    "setup_class": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_monitoring_and_management.py",
      "has_implementation": true,
      "implementation": "setup_class",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_monitoring_and_management.py",
      "name": "setup_class",
      "status": "partial - missing schema"
    },
    "setup_configuration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from implement_real_apis.py",
      "has_implementation": true,
      "implementation": "setup_configuration",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/api/implement_real_apis.py",
      "name": "setup_configuration",
      "status": "partial - missing schema"
    },
    "setup_directories": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from comprehensive_test_with_backup.py",
      "has_implementation": true,
      "implementation": "setup_directories",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/test/comprehensive_test_with_backup.py",
      "name": "setup_directories",
      "status": "partial - missing schema"
    },
    "setup_environment": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from improved_mcp_server.py",
      "has_implementation": true,
      "implementation": "setup_environment",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/improved_mcp_server.py",
      "name": "setup_environment",
      "status": "partial - missing schema"
    },
    "setup_example_data": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integrated_search_example.py",
      "has_implementation": true,
      "implementation": "setup_example_data",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/framework_integration_example.py",
      "name": "setup_example_data",
      "status": "partial - missing schema"
    },
    "setup_extensions": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_mcp_server_real.py",
      "has_implementation": true,
      "implementation": "setup_extensions",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_mcp_server_real.py",
      "name": "setup_extensions",
      "status": "partial - missing schema"
    },
    "setup_gateway": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_filecoin_gateway.py",
      "has_implementation": true,
      "implementation": "setup_gateway",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_filecoin_gateway.py",
      "name": "setup_gateway",
      "status": "partial - missing schema"
    },
    "setup_ipfs_with_libp2p": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_example.py",
      "has_implementation": true,
      "implementation": "setup_ipfs_with_libp2p",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/libp2p_example.py",
      "name": "setup_ipfs_with_libp2p",
      "status": "partial - missing schema"
    },
    "setup_knowledge_graph": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from knowledge_graph_example.py",
      "has_implementation": true,
      "implementation": "setup_knowledge_graph",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/knowledge_graph_example.py",
      "name": "setup_knowledge_graph",
      "status": "partial - missing schema"
    },
    "setup_lassie_mock_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_lassie_implementation.py",
      "has_implementation": true,
      "implementation": "setup_lassie_mock_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_lassie_implementation.py",
      "name": "setup_lassie_mock_server",
      "status": "partial - missing schema"
    },
    "setup_logging": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_network_runner.py",
      "has_implementation": true,
      "implementation": "setup_logging",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/tiered_cache_example.py",
      "name": "setup_logging",
      "status": "partial - missing schema"
    },
    "setup_lotus_gateway": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_integration.py",
      "has_implementation": true,
      "implementation": "setup_lotus_gateway",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_integration.py",
      "name": "setup_lotus_gateway",
      "status": "partial - missing schema"
    },
    "setup_method": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_streaming_performance.py",
      "has_implementation": true,
      "implementation": "setup_method",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/performance/test_streaming_performance_anyio.py",
      "name": "setup_method",
      "status": "partial - missing schema"
    },
    "setup_mock_environment": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_server.py",
      "has_implementation": true,
      "implementation": "setup_mock_environment",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_server.py",
      "name": "setup_mock_environment",
      "status": "partial - missing schema"
    },
    "setup_mock_modules": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_tests.py",
      "has_implementation": true,
      "implementation": "setup_mock_modules",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_simple_tests.py",
      "name": "setup_mock_modules",
      "status": "partial - missing schema"
    },
    "setup_mocks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_controllers.py",
      "has_implementation": true,
      "implementation": "setup_mocks",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
      "name": "setup_mocks",
      "status": "partial - missing schema"
    },
    "setup_multi_backend_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integrate_fs_with_tools.py",
      "has_implementation": true,
      "implementation": "setup_multi_backend_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/integrate_fs_with_tools.py",
      "name": "setup_multi_backend_integration",
      "status": "partial - missing schema"
    },
    "setup_python_paths": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from final_mcp_server.py",
      "has_implementation": true,
      "implementation": "setup_python_paths",
      "implementation_file": "/home/barberb/ipfs_kit_py/final_integration.py",
      "name": "setup_python_paths",
      "status": "partial - missing schema"
    },
    "setup_signal_handlers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_mcp_blue_green_server.py",
      "has_implementation": true,
      "implementation": "setup_signal_handlers",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/run_mcp_blue_green_server.py",
      "name": "setup_signal_handlers",
      "status": "partial - missing schema"
    },
    "setup_storacha_mock_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_storacha_implementation.py",
      "has_implementation": true,
      "implementation": "setup_storacha_mock_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_storacha_implementation.py",
      "name": "setup_storacha_mock_server",
      "status": "partial - missing schema"
    },
    "setup_test_app": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_distributed_controller_fastapi.py",
      "has_implementation": true,
      "implementation": "setup_test_app",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_distributed_controller_fastapi.py",
      "name": "setup_test_app",
      "status": "partial - missing schema"
    },
    "setup_test_environment": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from metadata_replication_example.py",
      "has_implementation": true,
      "implementation": "setup_test_environment",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/metadata_replication_example.py",
      "name": "setup_test_environment",
      "status": "partial - missing schema"
    },
    "setup_webrtc_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_benchmark_example.py",
      "has_implementation": true,
      "implementation": "setup_webrtc_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/webrtc_benchmark_example.py",
      "name": "setup_webrtc_server",
      "status": "partial - missing schema"
    },
    "shutdown": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from final_mcp_server.py",
      "has_implementation": true,
      "implementation": "shutdown",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
      "name": "shutdown",
      "status": "partial - missing schema"
    },
    "shutdown_event": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from server_runner.py",
      "has_implementation": true,
      "implementation": "shutdown_event",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/direct_mcp_server.py",
      "name": "shutdown_event",
      "status": "partial - missing schema"
    },
    "shutdown_sync": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from peer_websocket_controller_anyio.py",
      "has_implementation": true,
      "implementation": "shutdown_sync",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/peer_websocket_controller.py",
      "name": "shutdown_sync",
      "status": "partial - missing schema"
    },
    "signal_handler": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from server_runner.py",
      "has_implementation": true,
      "implementation": "signal_handler",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/server/run_server.py",
      "name": "signal_handler",
      "status": "partial - missing schema"
    },
    "simulate_api_traffic": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_metrics_extension.py",
      "has_implementation": true,
      "implementation": "simulate_api_traffic",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_metrics_extension.py",
      "name": "simulate_api_traffic",
      "status": "partial - missing schema"
    },
    "simulate_backend_outage": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_high_level_api_example.py",
      "has_implementation": true,
      "implementation": "simulate_backend_outage",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/wal_high_level_api_example.py",
      "name": "simulate_backend_outage",
      "status": "partial - missing schema"
    },
    "simulate_cat": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_normalized_ipfs.py",
      "has_implementation": true,
      "implementation": "simulate_cat",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_normalized_ipfs.py",
      "name": "simulate_cat",
      "status": "partial - missing schema"
    },
    "simulate_health_change": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from optimized_monitoring_example.py",
      "has_implementation": true,
      "implementation": "simulate_health_change",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/examples/monitoring_example.py",
      "name": "simulate_health_change",
      "status": "partial - missing schema"
    },
    "simulate_initialize_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from debug_vscode_connection.py",
      "has_implementation": true,
      "implementation": "simulate_initialize_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/debug_vscode_connection.py",
      "name": "simulate_initialize_request",
      "status": "partial - missing schema"
    },
    "source_credentials": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_mcp_server_real.py",
      "has_implementation": true,
      "implementation": "source_credentials",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_mcp_server_real.py",
      "name": "source_credentials",
      "status": "partial - missing schema"
    },
    "sse": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from unified_mcp_server.py",
      "has_implementation": true,
      "implementation": "sse",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/run_mcp_server_real_storage.py",
      "name": "sse",
      "status": "partial - missing schema"
    },
    "sse_app": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "sse_app",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_mcp_fix.py",
      "name": "sse_app",
      "status": "partial - missing schema"
    },
    "sse_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_server_with_sse.py",
      "has_implementation": true,
      "implementation": "sse_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_server_with_sse.py",
      "name": "sse_endpoint",
      "status": "partial - missing schema"
    },
    "sse_handler": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_server_fixed_all.py",
      "has_implementation": true,
      "implementation": "sse_handler",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_server_fixed_all.py",
      "name": "sse_handler",
      "status": "partial - missing schema"
    },
    "sse_test": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_mcp_server_fixed.py",
      "has_implementation": true,
      "implementation": "sse_test",
      "implementation_file": "/home/barberb/ipfs_kit_py/enhanced_mcp_server_fixed.py",
      "name": "sse_test",
      "status": "partial - missing schema"
    },
    "stable_api": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from api_stability.py",
      "has_implementation": true,
      "implementation": "stable_api",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api_stability.py",
      "name": "stable_api",
      "status": "partial - missing schema"
    },
    "stable_method": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from api_stability.py",
      "has_implementation": true,
      "implementation": "stable_method",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/api_stability.py",
      "name": "stable_method",
      "status": "partial - missing schema"
    },
    "standard_client": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "standard_client",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "standard_client",
      "status": "partial - missing schema"
    },
    "start": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_monitor_integration.py",
      "has_implementation": true,
      "implementation": "start",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
      "name": "start",
      "status": "partial - missing schema"
    },
    "start_blue_green_deployment": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server.py",
      "has_implementation": true,
      "implementation": "start_blue_green_deployment",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/direct_mcp_server.py",
      "name": "start_blue_green_deployment",
      "status": "partial - missing schema"
    },
    "start_daemon_health_monitor": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "start_daemon_health_monitor",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "start_daemon_health_monitor",
      "status": "partial - missing schema"
    },
    "start_daemons": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from patch_missing_methods.py",
      "has_implementation": true,
      "implementation": "start_daemons",
      "implementation_file": "/home/barberb/ipfs_kit_py/patch_missing_methods.py",
      "name": "start_daemons",
      "status": "partial - missing schema"
    },
    "start_debug_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_tests_with_debug.py",
      "has_implementation": true,
      "implementation": "start_debug_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/debug/mcp/run_tests_with_debug.py",
      "name": "start_debug_server",
      "status": "partial - missing schema"
    },
    "start_enhanced_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from improved_mcp_server.py",
      "has_implementation": true,
      "implementation": "start_enhanced_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_server.py",
      "name": "start_enhanced_mcp_server",
      "status": "partial - missing schema"
    },
    "start_ipfs_cluster_service": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_simple.py",
      "has_implementation": true,
      "implementation": "start_ipfs_cluster_service",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_simple.py",
      "name": "start_ipfs_cluster_service",
      "status": "partial - missing schema"
    },
    "start_ipfs_daemon": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_simple.py",
      "has_implementation": true,
      "implementation": "start_ipfs_daemon",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_mcp_server_real.py",
      "name": "start_ipfs_daemon",
      "status": "partial - missing schema"
    },
    "start_lotus_daemon": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_daemons.py",
      "has_implementation": true,
      "implementation": "start_lotus_daemon",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_daemons.py",
      "name": "start_lotus_daemon",
      "status": "partial - missing schema"
    },
    "start_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_and_restart_mcp.py",
      "has_implementation": true,
      "implementation": "start_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/server/restart_mcp_server.py",
      "name": "start_mcp_server",
      "status": "partial - missing schema"
    },
    "start_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_mcp_tool_coverage.py",
      "has_implementation": true,
      "implementation": "start_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/server/update_mcp_server.py",
      "name": "start_server",
      "status": "partial - missing schema"
    },
    "start_worker": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "start_worker",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "start_worker",
      "status": "partial - missing schema"
    },
    "startup_event": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from complete_mcp_server.py",
      "has_implementation": true,
      "implementation": "startup_event",
      "implementation_file": "/home/barberb/ipfs_kit_py/complete_mcp_server.py",
      "name": "startup_event",
      "status": "partial - missing schema"
    },
    "stat_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_mocks.py",
      "has_implementation": true,
      "implementation": "stat_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller_mfs_methods.py",
      "name": "stat_file",
      "status": "partial - missing schema"
    },
    "status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhanced_mcp_server_real.py",
      "has_implementation": true,
      "implementation": "status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_mcp_server_real.py",
      "name": "status",
      "status": "partial - missing schema"
    },
    "stdio_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from stdio.py",
      "has_implementation": true,
      "implementation": "stdio_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/src/mcp/server/stdio.py",
      "name": "stdio_server",
      "status": "partial - missing schema"
    },
    "stop": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from service.py",
      "has_implementation": true,
      "implementation": "stop",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/alerting.py",
      "name": "stop",
      "status": "partial - missing schema"
    },
    "stop_collection": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_monitoring.py",
      "has_implementation": true,
      "implementation": "stop_collection",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/mcp_monitoring.py",
      "name": "stop_collection",
      "status": "partial - missing schema"
    },
    "stop_daemon_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from aria2_controller_anyio.py",
      "has_implementation": true,
      "implementation": "stop_daemon_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/aria2_controller_anyio.py",
      "name": "stop_daemon_async",
      "status": "partial - missing schema"
    },
    "stop_daemon_health_monitor": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_compatibility.py",
      "has_implementation": true,
      "implementation": "stop_daemon_health_monitor",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/utils/mcp_compatibility.py",
      "name": "stop_daemon_health_monitor",
      "status": "partial - missing schema"
    },
    "stop_daemons": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_high_level_api.py",
      "has_implementation": true,
      "implementation": "stop_daemons",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "stop_daemons",
      "status": "partial - missing schema"
    },
    "stop_existing_servers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_server.py",
      "has_implementation": true,
      "implementation": "stop_existing_servers",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_server.py",
      "name": "stop_existing_servers",
      "status": "partial - missing schema"
    },
    "stop_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_and_restart_mcp.py",
      "has_implementation": true,
      "implementation": "stop_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/verify_and_restart_mcp.py",
      "name": "stop_mcp_server",
      "status": "partial - missing schema"
    },
    "stop_running_servers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from update_and_restart_mcp_server.py",
      "has_implementation": true,
      "implementation": "stop_running_servers",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/improved_mcp_server.py",
      "name": "stop_running_servers",
      "status": "partial - missing schema"
    },
    "stop_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_mcp_server_simple.py",
      "has_implementation": true,
      "implementation": "stop_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/mcp/wrappers/mcp_server_wrapper.py",
      "name": "stop_server",
      "status": "partial - missing schema"
    },
    "stop_streaming": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_anyio_integration.py",
      "has_implementation": true,
      "implementation": "stop_streaming",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_anyio_integration.py",
      "name": "stop_streaming",
      "status": "partial - missing schema"
    },
    "stop_websocket_peer_discovery_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "stop_websocket_peer_discovery_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "stop_websocket_peer_discovery_server",
      "status": "partial - missing schema"
    },
    "storacha_http_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from storacha_kit.py",
      "has_implementation": true,
      "implementation": "storacha_http_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_storacha_kit.py",
      "name": "storacha_http_request",
      "status": "partial - missing schema"
    },
    "storacha_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_extensions.py",
      "has_implementation": true,
      "implementation": "storacha_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/enhanced_storacha.py",
      "name": "storacha_status",
      "status": "partial - missing schema"
    },
    "storage_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from robust_mcp_server.py",
      "has_implementation": true,
      "implementation": "storage_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fixed_mcp_server.py",
      "name": "storage_health",
      "status": "partial - missing schema"
    },
    "storage_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server.py",
      "has_implementation": true,
      "implementation": "storage_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_mcp_server.py",
      "name": "storage_status",
      "status": "partial - missing schema"
    },
    "storage_transfer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_model_fix.py",
      "has_implementation": true,
      "implementation": "storage_transfer",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_model_fix.py",
      "name": "storage_transfer",
      "status": "partial - missing schema"
    },
    "store": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_simple_tests.py",
      "has_implementation": true,
      "implementation": "store",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/routing_optimization_demo.py",
      "name": "store",
      "status": "partial - missing schema"
    },
    "store_add": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from storacha_kit.py",
      "has_implementation": true,
      "implementation": "store_add",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/enhanced_storacha_kit.py",
      "name": "store_add",
      "status": "partial - missing schema"
    },
    "store_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from udm.py",
      "has_implementation": true,
      "implementation": "store_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/udm.py",
      "name": "store_content",
      "status": "partial - missing schema"
    },
    "store_with_lotus": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_ipfs_kit.py",
      "has_implementation": true,
      "implementation": "store_with_lotus",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/mock_ipfs_kit.py",
      "name": "store_with_lotus",
      "status": "partial - missing schema"
    },
    "stream_cat": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_streaming.py",
      "has_implementation": true,
      "implementation": "stream_cat",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/mcp_streaming.py",
      "name": "stream_cat",
      "status": "partial - missing schema"
    },
    "stream_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_resource_management.py",
      "has_implementation": true,
      "implementation": "stream_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_resource_management.py",
      "name": "stream_content",
      "status": "partial - missing schema"
    },
    "stream_dag_export": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_streaming.py",
      "has_implementation": true,
      "implementation": "stream_dag_export",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/mcp_streaming.py",
      "name": "stream_dag_export",
      "status": "partial - missing schema"
    },
    "stream_media": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from high_level_api_updated.py",
      "has_implementation": true,
      "implementation": "stream_media",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api_updated.py",
      "name": "stream_media",
      "status": "partial - missing schema"
    },
    "stream_to_ipfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from streaming_metrics_patch.py",
      "has_implementation": true,
      "implementation": "stream_to_ipfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/backup_files/streaming_metrics_patch.py",
      "name": "stream_to_ipfs",
      "status": "partial - missing schema"
    },
    "subscribe": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from libp2p_mocks.py",
      "has_implementation": true,
      "implementation": "subscribe",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/libp2p/libp2p_mocks.py",
      "name": "subscribe",
      "status": "partial - missing schema"
    },
    "success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_advanced.py",
      "has_implementation": true,
      "implementation": "success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_ipfs_advanced.py",
      "name": "success",
      "status": "partial - missing schema"
    },
    "supports_color": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_telemetry_cli_anyio.py",
      "has_implementation": true,
      "implementation": "supports_color",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_telemetry_cli.py",
      "name": "supports_color",
      "status": "partial - missing schema"
    },
    "suppress_logging": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from patch_cluster_state.py",
      "has_implementation": true,
      "implementation": "suppress_logging",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/helpers/patch_cluster_state.py",
      "name": "suppress_logging",
      "status": "partial - missing schema"
    },
    "suppress_logs_during_test": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_enhanced_tests.py",
      "has_implementation": true,
      "implementation": "suppress_logs_during_test",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
      "name": "suppress_logs_during_test",
      "status": "partial - missing schema"
    },
    "swarm_connect": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_model_fix.py",
      "has_implementation": true,
      "implementation": "swarm_connect",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
      "name": "swarm_connect",
      "status": "partial - missing schema"
    },
    "swarm_peers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_model_fix.py",
      "has_implementation": true,
      "implementation": "swarm_peers",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/extensions/ipfs_advanced_router.py",
      "name": "swarm_peers",
      "status": "partial - missing schema"
    },
    "sync_fs_to_ipfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from add_comprehensive_ipfs_tools.py",
      "has_implementation": true,
      "implementation": "sync_fs_to_ipfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/add_comprehensive_ipfs_tools.py",
      "name": "sync_fs_to_ipfs",
      "status": "partial - missing schema"
    },
    "sync_ipfs_to_fs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from add_comprehensive_ipfs_tools.py",
      "has_implementation": true,
      "implementation": "sync_ipfs_to_fs",
      "implementation_file": "/home/barberb/ipfs_kit_py/add_comprehensive_ipfs_tools.py",
      "name": "sync_ipfs_to_fs",
      "status": "partial - missing schema"
    },
    "sync_to_mfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "sync_to_mfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mfs_enhanced.py",
      "name": "sync_to_mfs",
      "status": "partial - missing schema"
    },
    "system_info": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "system_info",
      "implementation_file": "/home/barberb/ipfs_kit_py/vscode_compatible_mcp_server.py",
      "name": "system_info",
      "status": "partial - missing schema"
    },
    "tearDown": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_normalized_ipfs.py",
      "has_implementation": true,
      "implementation": "tearDown",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_telemetry_api_integration_anyio.py",
      "name": "tearDown",
      "status": "partial - missing schema"
    },
    "tearDownClass": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_tiered_cache_anyio.py",
      "has_implementation": true,
      "implementation": "tearDownClass",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_tiered_cache.py",
      "name": "tearDownClass",
      "status": "partial - missing schema"
    },
    "temp_config_dir": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_config.py",
      "has_implementation": true,
      "implementation": "temp_config_dir",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/client/test_config.py",
      "name": "temp_config_dir",
      "status": "partial - missing schema"
    },
    "temp_dir": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server.py",
      "has_implementation": true,
      "implementation": "temp_dir",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_mcp_server.py",
      "name": "temp_dir",
      "status": "partial - missing schema"
    },
    "temp_identity_path": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_mcp_integration.py",
      "has_implementation": true,
      "implementation": "temp_identity_path",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/tests/test_libp2p_mcp_integration.py",
      "name": "temp_identity_path",
      "status": "partial - missing schema"
    },
    "temp_test_dir": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface.py",
      "has_implementation": true,
      "implementation": "temp_test_dir",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface_additional.py",
      "name": "temp_test_dir",
      "status": "partial - missing schema"
    },
    "test": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_server.py",
      "has_implementation": true,
      "implementation": "get_binary",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "test",
      "status": "partial - missing schema"
    },
    "test_001_service_wrapper_import": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_cluster_daemons_comprehensive.py",
      "has_implementation": true,
      "implementation": "test_001_service_wrapper_import",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_cluster_daemons_comprehensive.py",
      "name": "test_001_service_wrapper_import",
      "status": "partial - missing schema"
    },
    "test_002_follow_wrapper_import": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_cluster_daemons_comprehensive.py",
      "has_implementation": true,
      "implementation": "test_002_follow_wrapper_import",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_cluster_daemons_comprehensive.py",
      "name": "test_002_follow_wrapper_import",
      "status": "partial - missing schema"
    },
    "test_003_run_service_wrapper_fake_daemon": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_cluster_daemons_comprehensive.py",
      "has_implementation": true,
      "implementation": "test_003_run_service_wrapper_fake_daemon",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_cluster_daemons_comprehensive.py",
      "name": "test_003_run_service_wrapper_fake_daemon",
      "status": "partial - missing schema"
    },
    "test_004_run_follow_wrapper_fake_daemon": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_cluster_daemons_comprehensive.py",
      "has_implementation": true,
      "implementation": "test_004_run_follow_wrapper_fake_daemon",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_cluster_daemons_comprehensive.py",
      "name": "test_004_run_follow_wrapper_fake_daemon",
      "status": "partial - missing schema"
    },
    "test_005_service_module_test_method": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_cluster_daemons_comprehensive.py",
      "has_implementation": true,
      "implementation": "test_005_service_module_test_method",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_cluster_daemons_comprehensive.py",
      "name": "test_005_service_module_test_method",
      "status": "partial - missing schema"
    },
    "test_006_service_basic_init": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_cluster_daemons_comprehensive.py",
      "has_implementation": true,
      "implementation": "test_006_service_basic_init",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_cluster_daemons_comprehensive.py",
      "name": "test_006_service_basic_init",
      "status": "partial - missing schema"
    },
    "test_007_check_daemon_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_cluster_daemons_comprehensive.py",
      "has_implementation": true,
      "implementation": "test_007_check_daemon_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_cluster_daemons_comprehensive.py",
      "name": "test_007_check_daemon_status",
      "status": "partial - missing schema"
    },
    "test_01_credential_management": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_filecoin_api.py",
      "has_implementation": true,
      "implementation": "test_01_credential_management",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_filecoin_api.py",
      "name": "test_01_credential_management",
      "status": "partial - missing schema"
    },
    "test_01_dependencies": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_mcp_libp2p_integration.py",
      "has_implementation": true,
      "implementation": "test_01_dependencies",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/utils/mcp/verify_mcp_libp2p_integration.py",
      "name": "test_01_dependencies",
      "status": "partial - missing schema"
    },
    "test_01_no_lock_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_lock_file_handling_direct.py",
      "has_implementation": true,
      "implementation": "test_01_no_lock_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_lock_file_handling_direct.py",
      "name": "test_01_no_lock_file",
      "status": "partial - missing schema"
    },
    "test_01_server_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_features.py",
      "has_implementation": true,
      "implementation": "test_01_server_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_features.py",
      "name": "test_01_server_health",
      "status": "partial - missing schema"
    },
    "test_01_stale_lock_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_lock_handling.py",
      "has_implementation": true,
      "implementation": "test_01_stale_lock_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_lock_handling.py",
      "name": "test_01_stale_lock_file",
      "status": "partial - missing schema"
    },
    "test_02_health_check": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_unified.py",
      "has_implementation": true,
      "implementation": "test_02_health_check",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_unified.py",
      "name": "test_02_health_check",
      "status": "partial - missing schema"
    },
    "test_03_operations_log": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_features.py",
      "has_implementation": true,
      "implementation": "test_03_operations_log",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_features.py",
      "name": "test_03_operations_log",
      "status": "partial - missing schema"
    },
    "test_03_stale_lock_file_no_removal": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_lock_file_handling_direct.py",
      "has_implementation": true,
      "implementation": "test_03_stale_lock_file_no_removal",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_lock_file_handling_direct.py",
      "name": "test_03_stale_lock_file_no_removal",
      "status": "partial - missing schema"
    },
    "test_04_ipfs_add_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_unified.py",
      "has_implementation": true,
      "implementation": "test_04_ipfs_add_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_unified.py",
      "name": "test_04_ipfs_add_content",
      "status": "partial - missing schema"
    },
    "test_04_mcp_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_mcp_libp2p_integration.py",
      "has_implementation": true,
      "implementation": "test_04_mcp_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/utils/mcp/verify_mcp_libp2p_integration.py",
      "name": "test_04_mcp_model",
      "status": "partial - missing schema"
    },
    "test_05_ipfs_add_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_unified.py",
      "has_implementation": true,
      "implementation": "test_05_ipfs_add_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_unified.py",
      "name": "test_05_ipfs_add_file",
      "status": "partial - missing schema"
    },
    "test_05_mcp_controller": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_mcp_libp2p_integration.py",
      "has_implementation": true,
      "implementation": "test_05_mcp_controller",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/utils/mcp/verify_mcp_libp2p_integration.py",
      "name": "test_05_mcp_controller",
      "status": "partial - missing schema"
    },
    "test_06_ipfs_cat_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_unified.py",
      "has_implementation": true,
      "implementation": "test_06_ipfs_cat_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_unified.py",
      "name": "test_06_ipfs_cat_content",
      "status": "partial - missing schema"
    },
    "test_06_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_mcp_libp2p_integration.py",
      "has_implementation": true,
      "implementation": "test_06_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/utils/mcp/verify_mcp_libp2p_integration.py",
      "name": "test_06_mcp_server",
      "status": "partial - missing schema"
    },
    "test_06_stop_daemon": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_features.py",
      "has_implementation": true,
      "implementation": "test_06_stop_daemon",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_features.py",
      "name": "test_06_stop_daemon",
      "status": "partial - missing schema"
    },
    "test_07_ipfs_pin_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_unified.py",
      "has_implementation": true,
      "implementation": "test_07_ipfs_pin_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_unified.py",
      "name": "test_07_ipfs_pin_operations",
      "status": "partial - missing schema"
    },
    "test_07_mcp_anyio_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_mcp_libp2p_integration.py",
      "has_implementation": true,
      "implementation": "test_07_mcp_anyio_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/utils/mcp/verify_mcp_libp2p_integration.py",
      "name": "test_07_mcp_anyio_integration",
      "status": "partial - missing schema"
    },
    "test_08_ipfs_controller_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_features.py",
      "has_implementation": true,
      "implementation": "test_08_ipfs_controller_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_features.py",
      "name": "test_08_ipfs_controller_endpoints",
      "status": "partial - missing schema"
    },
    "test_09_cli_controller_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_features.py",
      "has_implementation": true,
      "implementation": "test_09_cli_controller_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_features.py",
      "name": "test_09_cli_controller_endpoints",
      "status": "partial - missing schema"
    },
    "test_09_daemon_management": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_unified.py",
      "has_implementation": true,
      "implementation": "test_09_daemon_management",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_unified.py",
      "name": "test_09_daemon_management",
      "status": "partial - missing schema"
    },
    "test_11_daemon_auto_restart": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_features.py",
      "has_implementation": true,
      "implementation": "test_11_daemon_auto_restart",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_features.py",
      "name": "test_11_daemon_auto_restart",
      "status": "partial - missing schema"
    },
    "test_11_operation_logging": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_unified.py",
      "has_implementation": true,
      "implementation": "test_11_operation_logging",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_unified.py",
      "name": "test_11_operation_logging",
      "status": "partial - missing schema"
    },
    "test_13_mock_mode": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_filecoin_api.py",
      "has_implementation": true,
      "implementation": "test_13_mock_mode",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_filecoin_api.py",
      "name": "test_13_mock_mode",
      "status": "partial - missing schema"
    },
    "test_15_filecoin_to_ipfs_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_filecoin_api.py",
      "has_implementation": true,
      "implementation": "test_15_filecoin_to_ipfs_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_filecoin_api.py",
      "name": "test_15_filecoin_to_ipfs_integration",
      "status": "partial - missing schema"
    },
    "test_active_lock_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_daemon_lock_handling.py",
      "has_implementation": true,
      "implementation": "test_active_lock_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_daemon_lock_handling.py",
      "name": "test_active_lock_file",
      "status": "partial - missing schema"
    },
    "test_adapter_with_ipfs_kit": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_method_normalization.py",
      "has_implementation": true,
      "implementation": "test_adapter_with_ipfs_kit",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_method_normalization.py",
      "name": "test_adapter_with_ipfs_kit",
      "status": "partial - missing schema"
    },
    "test_add": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_py_mocked.py",
      "has_implementation": true,
      "implementation": "test_add",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
      "name": "test_add",
      "status": "partial - missing schema"
    },
    "test_add_car_to_ipfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipld_integration_with_kit.py",
      "has_implementation": true,
      "implementation": "test_add_car_to_ipfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_integration_with_kit.py",
      "name": "test_add_car_to_ipfs",
      "status": "partial - missing schema"
    },
    "test_add_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_cli_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_add_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_method_normalization.py",
      "name": "test_add_content",
      "status": "partial - missing schema"
    },
    "test_add_content_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_add_content_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
      "name": "test_add_content_async",
      "status": "partial - missing schema"
    },
    "test_add_content_bytes_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fixes_all.py",
      "has_implementation": true,
      "implementation": "test_add_content_bytes_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_fixes_all.py",
      "name": "test_add_content_bytes_response",
      "status": "partial - missing schema"
    },
    "test_add_content_handles_bytes_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_comprehensive_fixes.py",
      "has_implementation": true,
      "implementation": "test_add_content_handles_bytes_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive_fixes.py",
      "name": "test_add_content_handles_bytes_response",
      "status": "partial - missing schema"
    },
    "test_add_content_simulation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_model_parquet_cache.py",
      "has_implementation": true,
      "implementation": "test_add_content_simulation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_model_parquet_cache.py",
      "name": "test_add_content_simulation",
      "status": "partial - missing schema"
    },
    "test_add_file_path": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api.py",
      "has_implementation": true,
      "implementation": "test_add_file_path",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
      "name": "test_add_file_path",
      "status": "partial - missing schema"
    },
    "test_add_generic_credential_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_credential_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_add_generic_credential_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_credential_controller_anyio.py",
      "name": "test_add_generic_credential_async",
      "status": "partial - missing schema"
    },
    "test_add_ipfs_credentials": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_credential_controller.py",
      "has_implementation": true,
      "implementation": "test_add_ipfs_credentials",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_credential_controller.py",
      "name": "test_add_ipfs_credentials",
      "status": "partial - missing schema"
    },
    "test_add_record_to_index": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_metadata_index_integration.py",
      "has_implementation": true,
      "implementation": "test_add_record_to_index",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_metadata_index_integration.py",
      "name": "test_add_record_to_index",
      "status": "partial - missing schema"
    },
    "test_add_relationship": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipld_knowledge_graph.py",
      "has_implementation": true,
      "implementation": "test_add_relationship",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_knowledge_graph.py",
      "name": "test_add_relationship",
      "status": "partial - missing schema"
    },
    "test_add_remove_strategy": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_router.py",
      "has_implementation": true,
      "implementation": "test_add_remove_strategy",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_router.py",
      "name": "test_add_remove_strategy",
      "status": "partial - missing schema"
    },
    "test_add_s3_credentials": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_credential_management_anyio.py",
      "has_implementation": true,
      "implementation": "test_add_s3_credentials",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_credential_management_anyio.py",
      "name": "test_add_s3_credentials",
      "status": "partial - missing schema"
    },
    "test_add_storacha_credentials": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_credential_controller.py",
      "has_implementation": true,
      "implementation": "test_add_storacha_credentials",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_credential_controller.py",
      "name": "test_add_storacha_credentials",
      "status": "partial - missing schema"
    },
    "test_add_storacha_credentials_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_credential_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_add_storacha_credentials_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_credential_controller_anyio.py",
      "name": "test_add_storacha_credentials_async",
      "status": "partial - missing schema"
    },
    "test_advanced_prefetch_thread_management": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_dataloader.py",
      "has_implementation": true,
      "implementation": "test_advanced_prefetch_thread_management",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
      "name": "test_advanced_prefetch_thread_management",
      "status": "partial - missing schema"
    },
    "test_ai_benchmark_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api_ai_ml.py",
      "has_implementation": true,
      "implementation": "test_ai_benchmark_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
      "name": "test_ai_benchmark_model",
      "status": "partial - missing schema"
    },
    "test_ai_create_knowledge_graph_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api_ai_ml.py",
      "has_implementation": true,
      "implementation": "test_ai_create_knowledge_graph_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
      "name": "test_ai_create_knowledge_graph_failure",
      "status": "partial - missing schema"
    },
    "test_ai_create_vector_index": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api_ai_ml.py",
      "has_implementation": true,
      "implementation": "test_ai_create_vector_index",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
      "name": "test_ai_create_vector_index",
      "status": "partial - missing schema"
    },
    "test_ai_distributed_training_cancel_job": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api_ai_ml.py",
      "has_implementation": true,
      "implementation": "test_ai_distributed_training_cancel_job",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
      "name": "test_ai_distributed_training_cancel_job",
      "status": "partial - missing schema"
    },
    "test_ai_distributed_training_submit_job": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api_ai_ml.py",
      "has_implementation": true,
      "implementation": "test_ai_distributed_training_submit_job",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
      "name": "test_ai_distributed_training_submit_job",
      "status": "partial - missing schema"
    },
    "test_ai_hybrid_search": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api_ai_ml.py",
      "has_implementation": true,
      "implementation": "test_ai_hybrid_search",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
      "name": "test_ai_hybrid_search",
      "status": "partial - missing schema"
    },
    "test_ai_langchain_load_documents": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api_ai_ml.py",
      "has_implementation": true,
      "implementation": "test_ai_langchain_load_documents",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
      "name": "test_ai_langchain_load_documents",
      "status": "partial - missing schema"
    },
    "test_ai_langchain_query": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api_ai_ml.py",
      "has_implementation": true,
      "implementation": "test_ai_langchain_query",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
      "name": "test_ai_langchain_query",
      "status": "partial - missing schema"
    },
    "test_ai_llama_index_create_index": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api_ai_ml.py",
      "has_implementation": true,
      "implementation": "test_ai_llama_index_create_index",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
      "name": "test_ai_llama_index_create_index",
      "status": "partial - missing schema"
    },
    "test_ai_ml_integration_runs_with_pandas_missing": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_optional_dependencies.py",
      "has_implementation": true,
      "implementation": "test_ai_ml_integration_runs_with_pandas_missing",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_optional_dependencies.py",
      "name": "test_ai_ml_integration_runs_with_pandas_missing",
      "status": "partial - missing schema"
    },
    "test_ai_optimize_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api_ai_ml.py",
      "has_implementation": true,
      "implementation": "test_ai_optimize_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
      "name": "test_ai_optimize_model",
      "status": "partial - missing schema"
    },
    "test_ai_register_dataset": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api_ai_ml.py",
      "has_implementation": true,
      "implementation": "test_ai_register_dataset",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
      "name": "test_ai_register_dataset",
      "status": "partial - missing schema"
    },
    "test_ai_register_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api_ai_ml.py",
      "has_implementation": true,
      "implementation": "test_ai_register_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
      "name": "test_ai_register_model",
      "status": "partial - missing schema"
    },
    "test_ai_test_inference": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api_ai_ml.py",
      "has_implementation": true,
      "implementation": "test_ai_test_inference",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_ai_ml.py",
      "name": "test_ai_test_inference",
      "status": "partial - missing schema"
    },
    "test_all_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_api.py",
      "has_implementation": true,
      "implementation": "test_all_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api.py",
      "name": "test_all_endpoints",
      "status": "partial - missing schema"
    },
    "test_announce_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_announce_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_announce_content",
      "status": "partial - missing schema"
    },
    "test_anyio_cli_ipfs_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controller_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_anyio_cli_ipfs_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration_anyio.py",
      "name": "test_anyio_cli_ipfs_integration",
      "status": "partial - missing schema"
    },
    "test_anyio_full_workflow": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controller_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_anyio_full_workflow",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration_anyio.py",
      "name": "test_anyio_full_workflow",
      "status": "partial - missing schema"
    },
    "test_anyio_ipfs_fs_journal_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controller_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_anyio_ipfs_fs_journal_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration_anyio.py",
      "name": "test_anyio_ipfs_fs_journal_integration",
      "status": "partial - missing schema"
    },
    "test_anyio_webrtc_ipfs_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controller_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_anyio_webrtc_ipfs_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration_anyio.py",
      "name": "test_anyio_webrtc_ipfs_integration",
      "status": "partial - missing schema"
    },
    "test_api_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_api.py",
      "has_implementation": true,
      "implementation": "test_api_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test_mcp_api.py",
      "name": "test_api_endpoint",
      "status": "partial - missing schema"
    },
    "test_api_key_backend_access": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_auth.py",
      "has_implementation": true,
      "implementation": "test_api_key_backend_access",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/tests/test_auth.py",
      "name": "test_api_key_backend_access",
      "status": "partial - missing schema"
    },
    "test_api_method_normal": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_api.py",
      "has_implementation": true,
      "implementation": "test_api_method_normal",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_api.py",
      "name": "test_api_method_normal",
      "status": "partial - missing schema"
    },
    "test_api_method_unexpected_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_api.py",
      "has_implementation": true,
      "implementation": "test_api_method_unexpected_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_api.py",
      "name": "test_api_method_unexpected_error",
      "status": "partial - missing schema"
    },
    "test_api_operation_stress": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_performance.py",
      "has_implementation": true,
      "implementation": "test_api_operation_stress",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_performance.py",
      "name": "test_api_operation_stress",
      "status": "partial - missing schema"
    },
    "test_api_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_lotus_api_integration.py",
      "has_implementation": true,
      "implementation": "test_api_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_lotus_api_integration.py",
      "name": "test_api_operations",
      "status": "partial - missing schema"
    },
    "test_app": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_oauth_integration.py",
      "has_implementation": true,
      "implementation": "test_app",
      "implementation_file": "/home/barberb/ipfs_kit_py/tests/test_api_key_management.py",
      "name": "test_app",
      "status": "partial - missing schema"
    },
    "test_apply_policy_without_bridge": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller.py",
      "has_implementation": true,
      "implementation": "test_apply_policy_without_bridge",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
      "name": "test_apply_policy_without_bridge",
      "status": "partial - missing schema"
    },
    "test_apply_replication_policy_without_bridge": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller.py",
      "has_implementation": true,
      "implementation": "test_apply_replication_policy_without_bridge",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
      "name": "test_apply_replication_policy_without_bridge",
      "status": "partial - missing schema"
    },
    "test_ar_cache_basic": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_fsspec_mocked.py",
      "has_implementation": true,
      "implementation": "test_ar_cache_basic",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_fsspec_mocked.py",
      "name": "test_ar_cache_basic",
      "status": "partial - missing schema"
    },
    "test_aria2_global_stats": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_aria2.py",
      "has_implementation": true,
      "implementation": "test_aria2_global_stats",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_aria2.py",
      "name": "test_aria2_global_stats",
      "status": "partial - missing schema"
    },
    "test_aria2_health_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_aria2.py",
      "has_implementation": true,
      "implementation": "test_aria2_health_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_aria2.py",
      "name": "test_aria2_health_endpoint",
      "status": "partial - missing schema"
    },
    "test_aria2_list_downloads": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_aria2.py",
      "has_implementation": true,
      "implementation": "test_aria2_list_downloads",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_aria2.py",
      "name": "test_aria2_list_downloads",
      "status": "partial - missing schema"
    },
    "test_arrow_metadata_index_class": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_dependency_handling.py",
      "has_implementation": true,
      "implementation": "test_arrow_metadata_index_class",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_dependency_handling.py",
      "name": "test_arrow_metadata_index_class",
      "status": "partial - missing schema"
    },
    "test_async_context": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_server.py",
      "has_implementation": true,
      "implementation": "test_async_context",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
      "name": "test_async_context",
      "status": "partial - missing schema"
    },
    "test_async_filecoin_to_ipfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_model_anyio.py",
      "has_implementation": true,
      "implementation": "test_async_filecoin_to_ipfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_model_anyio.py",
      "name": "test_async_filecoin_to_ipfs",
      "status": "partial - missing schema"
    },
    "test_async_handle_backend_status_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller.py",
      "has_implementation": true,
      "implementation": "test_async_handle_backend_status_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
      "name": "test_async_handle_backend_status_request",
      "status": "partial - missing schema"
    },
    "test_async_handle_replication_policy_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller.py",
      "has_implementation": true,
      "implementation": "test_async_handle_replication_policy_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
      "name": "test_async_handle_replication_policy_request",
      "status": "partial - missing schema"
    },
    "test_async_handle_verify_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller.py",
      "has_implementation": true,
      "implementation": "test_async_handle_verify_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
      "name": "test_async_handle_verify_request",
      "status": "partial - missing schema"
    },
    "test_async_list_connections": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_controller.py",
      "has_implementation": true,
      "implementation": "test_async_list_connections",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_controller.py",
      "name": "test_async_list_connections",
      "status": "partial - missing schema"
    },
    "test_auth_success_flow": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_controller.py",
      "has_implementation": true,
      "implementation": "test_auth_success_flow",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_huggingface_controller.py",
      "name": "test_auth_success_flow",
      "status": "partial - missing schema"
    },
    "test_authenticate_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_model.py",
      "has_implementation": true,
      "implementation": "test_authenticate_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
      "name": "test_authenticate_failure",
      "status": "partial - missing schema"
    },
    "test_auto_retry_on_daemon_not_running": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_auto_retry.py",
      "has_implementation": true,
      "implementation": "test_auto_retry_on_daemon_not_running",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_auto_retry.py",
      "name": "test_auto_retry_on_daemon_not_running",
      "status": "partial - missing schema"
    },
    "test_automatic_recovery_actions": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_monitoring_and_management.py",
      "has_implementation": true,
      "implementation": "test_automatic_recovery_actions",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_monitoring_and_management.py",
      "name": "test_automatic_recovery_actions",
      "status": "partial - missing schema"
    },
    "test_backend_availability": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_routing_system_integration.py",
      "has_implementation": true,
      "implementation": "test_backend_availability",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_routing_system_integration.py",
      "name": "test_backend_availability",
      "status": "partial - missing schema"
    },
    "test_backend_initialization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_backend.py",
      "has_implementation": true,
      "implementation": "test_backend_initialization",
      "implementation_file": "/home/barberb/ipfs_kit_py/tests/integration/backends/test_ipfs_backend.py",
      "name": "test_backend_initialization",
      "status": "partial - missing schema"
    },
    "test_backend_integration_simulation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_tiered_cache_anyio.py",
      "has_implementation": true,
      "implementation": "test_backend_integration_simulation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_tiered_cache.py",
      "name": "test_backend_integration_simulation",
      "status": "partial - missing schema"
    },
    "test_backend_storage_import": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_basic.py",
      "has_implementation": true,
      "implementation": "test_backend_storage_import",
      "implementation_file": "/home/barberb/ipfs_kit_py/basic_unit_tests.py",
      "name": "test_backend_storage_import",
      "status": "partial - missing schema"
    },
    "test_backend_storage_methods": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_fixes_direct.py",
      "has_implementation": true,
      "implementation": "test_backend_storage_methods",
      "implementation_file": "/home/barberb/ipfs_kit_py/verify_fixes_direct.py",
      "name": "test_backend_storage_methods",
      "status": "partial - missing schema"
    },
    "test_backend_unavailable": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_backend_unavailable",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_integration_anyio.py",
      "name": "test_backend_unavailable",
      "status": "partial - missing schema"
    },
    "test_backend_unavailable_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_backend_unavailable_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_integration_anyio.py",
      "name": "test_backend_unavailable_async",
      "status": "partial - missing schema"
    },
    "test_basic_function": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_tool_manager.py",
      "has_implementation": true,
      "implementation": "test_basic_function",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_tool_manager.py",
      "name": "test_basic_function",
      "status": "partial - missing schema"
    },
    "test_basic_operation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_method_normalization.py",
      "has_implementation": true,
      "implementation": "test_basic_operation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_method_normalization.py",
      "name": "test_basic_operation",
      "status": "partial - missing schema"
    },
    "test_basic_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_backend_fixed.py",
      "has_implementation": true,
      "implementation": "test_basic_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/test_ipfs_backend_fixed.py",
      "name": "test_basic_operations",
      "status": "partial - missing schema"
    },
    "test_basic_routing": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_routing_integration.py",
      "has_implementation": true,
      "implementation": "test_basic_routing",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_routing_integration.py",
      "name": "test_basic_routing",
      "status": "partial - missing schema"
    },
    "test_basic_tier_functionality": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_tiered_storage_backends.py",
      "has_implementation": true,
      "implementation": "test_basic_tier_functionality",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_tiered_storage_backends.py",
      "name": "test_basic_tier_functionality",
      "status": "partial - missing schema"
    },
    "test_batch_operations_partial_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_error_handling.py",
      "has_implementation": true,
      "implementation": "test_batch_operations_partial_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_error_handling.py",
      "name": "test_batch_operations_partial_success",
      "status": "partial - missing schema"
    },
    "test_binary_is_executable": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_binary_functionality.py",
      "has_implementation": true,
      "implementation": "test_binary_is_executable",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_binary_functionality.py",
      "name": "test_binary_is_executable",
      "status": "partial - missing schema"
    },
    "test_binary_returns_version": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_binary_functionality.py",
      "has_implementation": true,
      "implementation": "test_binary_returns_version",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_binary_functionality.py",
      "name": "test_binary_returns_version",
      "status": "partial - missing schema"
    },
    "test_block_get_async_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_block_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_block_get_async_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_block_operations_anyio.py",
      "name": "test_block_get_async_success",
      "status": "partial - missing schema"
    },
    "test_block_get_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_block_operations.py",
      "has_implementation": true,
      "implementation": "test_block_get_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_block_operations.py",
      "name": "test_block_get_success",
      "status": "partial - missing schema"
    },
    "test_block_put_async_with_format_parameter": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_block_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_block_put_async_with_format_parameter",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_block_operations_anyio.py",
      "name": "test_block_put_async_with_format_parameter",
      "status": "partial - missing schema"
    },
    "test_block_put_with_format_parameter": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_block_operations.py",
      "has_implementation": true,
      "implementation": "test_block_put_with_format_parameter",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_block_operations.py",
      "name": "test_block_put_with_format_parameter",
      "status": "partial - missing schema"
    },
    "test_block_stat_async_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_block_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_block_stat_async_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_block_operations_anyio.py",
      "name": "test_block_stat_async_failure",
      "status": "partial - missing schema"
    },
    "test_block_stat_async_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_block_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_block_stat_async_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_block_operations_anyio.py",
      "name": "test_block_stat_async_success",
      "status": "partial - missing schema"
    },
    "test_block_stat_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_block_operations.py",
      "has_implementation": true,
      "implementation": "test_block_stat_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_block_operations.py",
      "name": "test_block_stat_success",
      "status": "partial - missing schema"
    },
    "test_bootstrap_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_advanced.py",
      "has_implementation": true,
      "implementation": "test_bootstrap_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_ipfs_advanced.py",
      "name": "test_bootstrap_operations",
      "status": "partial - missing schema"
    },
    "test_bytes_response_handling": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fix_result.py",
      "has_implementation": true,
      "implementation": "test_bytes_response_handling",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_fix_result.py",
      "name": "test_bytes_response_handling",
      "status": "partial - missing schema"
    },
    "test_cache_error_recovery": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_error_scenarios.py",
      "has_implementation": true,
      "implementation": "test_cache_error_recovery",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_error_scenarios.py",
      "name": "test_cache_error_recovery",
      "status": "partial - missing schema"
    },
    "test_cache_initialization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_tiered_cache_anyio.py",
      "has_implementation": true,
      "implementation": "test_cache_initialization",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_tiered_storage.py",
      "name": "test_cache_initialization",
      "status": "partial - missing schema"
    },
    "test_cache_manager": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_mini.py",
      "has_implementation": true,
      "implementation": "test_cache_manager",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_mini.py",
      "name": "test_cache_manager",
      "status": "partial - missing schema"
    },
    "test_cache_operation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_distributed_controller.py",
      "has_implementation": true,
      "implementation": "test_cache_operation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_distributed_controller.py",
      "name": "test_cache_operation",
      "status": "partial - missing schema"
    },
    "test_cache_reuse": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_fixed_get_filesystem.py",
      "has_implementation": true,
      "implementation": "test_cache_reuse",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_integrated_get_filesystem.py",
      "name": "test_cache_reuse",
      "status": "partial - missing schema"
    },
    "test_call_nonexistent_method": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api.py",
      "has_implementation": true,
      "implementation": "test_call_nonexistent_method",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
      "name": "test_call_nonexistent_method",
      "status": "partial - missing schema"
    },
    "test_cat": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_py_mocked.py",
      "has_implementation": true,
      "implementation": "test_cat",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
      "name": "test_cat",
      "status": "partial - missing schema"
    },
    "test_cat_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_kit_mocked.py",
      "has_implementation": true,
      "implementation": "test_cat_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_kit_mocked.py",
      "name": "test_cat_content",
      "status": "partial - missing schema"
    },
    "test_check_connection_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_model.py",
      "has_implementation": true,
      "implementation": "test_check_connection_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_filecoin_model.py",
      "name": "test_check_connection_success",
      "status": "partial - missing schema"
    },
    "test_check_daemon_status_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_check_daemon_status_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
      "name": "test_check_daemon_status_async",
      "status": "partial - missing schema"
    },
    "test_check_dependencies": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_check_dependencies",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_controller_anyio.py",
      "name": "test_check_dependencies",
      "status": "partial - missing schema"
    },
    "test_check_existence": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_cli_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_check_existence",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_cli_controller.py",
      "name": "test_check_existence",
      "status": "partial - missing schema"
    },
    "test_check_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storacha_backend.py",
      "has_implementation": true,
      "implementation": "test_check_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_backends/test_storacha_backend.py",
      "name": "test_check_status",
      "status": "partial - missing schema"
    },
    "test_check_websocket_support": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_peer_websocket_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_check_websocket_support",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
      "name": "test_check_websocket_support",
      "status": "partial - missing schema"
    },
    "test_clean_stale_servers_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_clean_stale_servers_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "test_clean_stale_servers_async",
      "status": "partial - missing schema"
    },
    "test_clean_stale_servers_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_clean_stale_servers_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "test_clean_stale_servers_endpoint",
      "status": "partial - missing schema"
    },
    "test_cleanup": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_wal.py",
      "has_implementation": true,
      "implementation": "test_cleanup",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_wal.py",
      "name": "test_cleanup",
      "status": "partial - missing schema"
    },
    "test_cleanup_ended_connections": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_streaming_anyio.py",
      "has_implementation": true,
      "implementation": "test_cleanup_ended_connections",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_streaming.py",
      "name": "test_cleanup_ended_connections",
      "status": "partial - missing schema"
    },
    "test_cleanup_system": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_controller.py",
      "has_implementation": true,
      "implementation": "test_cleanup_system",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_controller.py",
      "name": "test_cleanup_system",
      "status": "partial - missing schema"
    },
    "test_clear_history": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_metrics.py",
      "has_implementation": true,
      "implementation": "test_clear_history",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_metrics.py",
      "name": "test_clear_history",
      "status": "partial - missing schema"
    },
    "test_cli_add_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface.py",
      "has_implementation": true,
      "implementation": "test_cli_add_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
      "name": "test_cli_add_command",
      "status": "partial - missing schema"
    },
    "test_cli_add_content_multipart": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_advanced.py",
      "has_implementation": true,
      "implementation": "test_cli_add_content_multipart",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_advanced.py",
      "name": "test_cli_add_content_multipart",
      "status": "partial - missing schema"
    },
    "test_cli_based_workflow": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_end_to_end.py",
      "has_implementation": true,
      "implementation": "test_cli_based_workflow",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_end_to_end.py",
      "name": "test_cli_based_workflow",
      "status": "partial - missing schema"
    },
    "test_cli_command_options": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface.py",
      "has_implementation": true,
      "implementation": "test_cli_command_options",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
      "name": "test_cli_command_options",
      "status": "partial - missing schema"
    },
    "test_cli_controller": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_all_controllers.py",
      "has_implementation": true,
      "implementation": "test_cli_controller",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_all_controllers.py",
      "name": "test_cli_controller",
      "status": "partial - missing schema"
    },
    "test_cli_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controllers.py",
      "has_implementation": true,
      "implementation": "test_cli_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_controllers.py",
      "name": "test_cli_endpoints",
      "status": "partial - missing schema"
    },
    "test_cli_error_handling": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface.py",
      "has_implementation": true,
      "implementation": "test_cli_error_handling",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
      "name": "test_cli_error_handling",
      "status": "partial - missing schema"
    },
    "test_cli_error_handling_validation_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface_additional.py",
      "has_implementation": true,
      "implementation": "test_cli_error_handling_validation_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface_additional.py",
      "name": "test_cli_error_handling_validation_error",
      "status": "partial - missing schema"
    },
    "test_cli_exists_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface.py",
      "has_implementation": true,
      "implementation": "test_cli_exists_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
      "name": "test_cli_exists_command",
      "status": "partial - missing schema"
    },
    "test_cli_ipfs_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controller_mocked_integration.py",
      "has_implementation": true,
      "implementation": "test_cli_ipfs_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_mocked_integration.py",
      "name": "test_cli_ipfs_integration",
      "status": "partial - missing schema"
    },
    "test_cli_ipfs_integration_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controller_mocked_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_cli_ipfs_integration_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_mocked_integration_anyio.py",
      "name": "test_cli_ipfs_integration_async",
      "status": "partial - missing schema"
    },
    "test_cli_key_value_parsing": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cli_interface_examples.py",
      "has_implementation": true,
      "implementation": "test_cli_key_value_parsing",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/helpers/cli_interface_examples.py",
      "name": "test_cli_key_value_parsing",
      "status": "partial - missing schema"
    },
    "test_cli_ls_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface.py",
      "has_implementation": true,
      "implementation": "test_cli_ls_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
      "name": "test_cli_ls_command",
      "status": "partial - missing schema"
    },
    "test_cli_pin_add_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface.py",
      "has_implementation": true,
      "implementation": "test_cli_pin_add_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
      "name": "test_cli_pin_add_command",
      "status": "partial - missing schema"
    },
    "test_cli_pin_ls_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface.py",
      "has_implementation": true,
      "implementation": "test_cli_pin_ls_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
      "name": "test_cli_pin_ls_command",
      "status": "partial - missing schema"
    },
    "test_cli_publish_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface.py",
      "has_implementation": true,
      "implementation": "test_cli_publish_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
      "name": "test_cli_publish_command",
      "status": "partial - missing schema"
    },
    "test_cli_shutdown_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface.py",
      "has_implementation": true,
      "implementation": "test_cli_shutdown_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
      "name": "test_cli_shutdown_command",
      "status": "partial - missing schema"
    },
    "test_cli_swarm_peers_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface.py",
      "has_implementation": true,
      "implementation": "test_cli_swarm_peers_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
      "name": "test_cli_swarm_peers_command",
      "status": "partial - missing schema"
    },
    "test_cli_version": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_controller.py",
      "has_implementation": true,
      "implementation": "test_cli_version",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_controller.py",
      "name": "test_cli_version",
      "status": "partial - missing schema"
    },
    "test_cli_version_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface.py",
      "has_implementation": true,
      "implementation": "test_cli_version_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
      "name": "test_cli_version_command",
      "status": "partial - missing schema"
    },
    "test_cli_wal_list_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cli_interface_examples.py",
      "has_implementation": true,
      "implementation": "test_cli_wal_list_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/helpers/cli_interface_examples.py",
      "name": "test_cli_wal_list_command",
      "status": "partial - missing schema"
    },
    "test_cli_wal_status_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cli_interface_examples.py",
      "has_implementation": true,
      "implementation": "test_cli_wal_status_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface_additional.py",
      "name": "test_cli_wal_status_command",
      "status": "partial - missing schema"
    },
    "test_cli_with_config_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface.py",
      "has_implementation": true,
      "implementation": "test_cli_with_config_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
      "name": "test_cli_with_config_file",
      "status": "partial - missing schema"
    },
    "test_cli_with_no_color_flag": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from cli_interface_examples.py",
      "has_implementation": true,
      "implementation": "test_cli_with_no_color_flag",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/helpers/cli_interface_examples.py",
      "name": "test_cli_with_no_color_flag",
      "status": "partial - missing schema"
    },
    "test_cli_with_verbose_flag": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface_additional.py",
      "has_implementation": true,
      "implementation": "test_cli_with_verbose_flag",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface_additional.py",
      "name": "test_cli_with_verbose_flag",
      "status": "partial - missing schema"
    },
    "test_cli_with_yaml_format": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface.py",
      "has_implementation": true,
      "implementation": "test_cli_with_yaml_format",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
      "name": "test_cli_with_yaml_format",
      "status": "partial - missing schema"
    },
    "test_client": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server.py",
      "has_implementation": true,
      "implementation": "test_client",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
      "name": "test_client",
      "status": "partial - missing schema"
    },
    "test_client_server_connection": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_peer_websocket_anyio.py",
      "has_implementation": true,
      "implementation": "test_client_server_connection",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_anyio.py",
      "name": "test_client_server_connection",
      "status": "partial - missing schema"
    },
    "test_close": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_dataloader.py",
      "has_implementation": true,
      "implementation": "test_close",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_integration_anyio.py",
      "name": "test_close",
      "status": "partial - missing schema"
    },
    "test_close_all_connections": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc.py",
      "has_implementation": true,
      "implementation": "test_close_all_connections",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_fix_detailed.py",
      "name": "test_close_all_connections",
      "status": "partial - missing schema"
    },
    "test_close_connection": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_controller.py",
      "has_implementation": true,
      "implementation": "test_close_connection",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_controller.py",
      "name": "test_close_connection",
      "status": "partial - missing schema"
    },
    "test_close_resource_cleanup": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_dataloader.py",
      "has_implementation": true,
      "implementation": "test_close_resource_cleanup",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
      "name": "test_close_resource_cleanup",
      "status": "partial - missing schema"
    },
    "test_cluster_operations_leecher": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api.py",
      "has_implementation": true,
      "implementation": "test_cluster_operations_leecher",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
      "name": "test_cluster_operations_leecher",
      "status": "partial - missing schema"
    },
    "test_cluster_pin_add_auto_retry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_auto_retry.py",
      "has_implementation": true,
      "implementation": "test_cluster_pin_add_auto_retry",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_auto_retry.py",
      "name": "test_cluster_pin_add_auto_retry",
      "status": "partial - missing schema"
    },
    "test_cluster_pin_rm_auto_retry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_auto_retry.py",
      "has_implementation": true,
      "implementation": "test_cluster_pin_rm_auto_retry",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_auto_retry.py",
      "name": "test_cluster_pin_rm_auto_retry",
      "status": "partial - missing schema"
    },
    "test_cluster_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_role_based_architecture.py",
      "has_implementation": true,
      "implementation": "test_cluster_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
      "name": "test_cluster_status",
      "status": "partial - missing schema"
    },
    "test_collect_metrics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_metrics.py",
      "has_implementation": true,
      "implementation": "test_collect_metrics",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_metrics.py",
      "name": "test_collect_metrics",
      "status": "partial - missing schema"
    },
    "test_collect_operation_stats": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_fs_journal_monitor.py",
      "has_implementation": true,
      "implementation": "test_collect_operation_stats",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_fs_journal_monitor.py",
      "name": "test_collect_operation_stats",
      "status": "partial - missing schema"
    },
    "test_combined_search": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_integrated_search.py",
      "has_implementation": true,
      "implementation": "test_combined_search",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_integrated_search.py",
      "name": "test_combined_search",
      "status": "partial - missing schema"
    },
    "test_concurrent_access": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_error_scenarios.py",
      "has_implementation": true,
      "implementation": "test_concurrent_access",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_error_scenarios.py",
      "name": "test_concurrent_access",
      "status": "partial - missing schema"
    },
    "test_concurrent_dht_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dht_operations_anyio_extended.py",
      "has_implementation": true,
      "implementation": "test_concurrent_dht_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_anyio_extended.py",
      "name": "test_concurrent_dht_operations",
      "status": "partial - missing schema"
    },
    "test_concurrent_files_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_files_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_concurrent_files_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_files_operations_anyio.py",
      "name": "test_concurrent_files_operations",
      "status": "partial - missing schema"
    },
    "test_concurrent_same_chunk_request_deduplication": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_enhanced_resumable.py",
      "has_implementation": true,
      "implementation": "test_concurrent_same_chunk_request_deduplication",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced_resumable.py",
      "name": "test_concurrent_same_chunk_request_deduplication",
      "status": "partial - missing schema"
    },
    "test_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "test_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/scripts/test_ai_ml_integration.py",
      "name": "test_config",
      "status": "partial - missing schema"
    },
    "test_config_parameters": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_fixed_get_filesystem.py",
      "has_implementation": true,
      "implementation": "test_config_parameters",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_integrated_get_filesystem.py",
      "name": "test_config_parameters",
      "status": "partial - missing schema"
    },
    "test_connect": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api.py",
      "has_implementation": true,
      "implementation": "test_connect",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
      "name": "test_connect",
      "status": "partial - missing schema"
    },
    "test_connect_peer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_connect_peer",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_cli_controller.py",
      "name": "test_connect_peer",
      "status": "partial - missing schema"
    },
    "test_connect_to_peer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_peer_websocket.py",
      "has_implementation": true,
      "implementation": "test_connect_to_peer",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/network_tests/test_mcp_peer_websocket.py",
      "name": "test_connect_to_peer",
      "status": "partial - missing schema"
    },
    "test_connect_to_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_peer_websocket_controller.py",
      "has_implementation": true,
      "implementation": "test_connect_to_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller.py",
      "name": "test_connect_to_server",
      "status": "partial - missing schema"
    },
    "test_connect_with_multiaddr": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_multiaddress.py",
      "has_implementation": true,
      "implementation": "test_connect_with_multiaddr",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_multiaddress.py",
      "name": "test_connect_with_multiaddr",
      "status": "partial - missing schema"
    },
    "test_connect_without_server_url": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_peer_websocket_controller.py",
      "has_implementation": true,
      "implementation": "test_connect_without_server_url",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_peer_websocket_controller.py",
      "name": "test_connect_without_server_url",
      "status": "partial - missing schema"
    },
    "test_connection_error_retry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_error_scenarios.py",
      "has_implementation": true,
      "implementation": "test_connection_error_retry",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_error_scenarios.py",
      "name": "test_connection_error_retry",
      "status": "partial - missing schema"
    },
    "test_connection_pool_creation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_simple_tests.py",
      "has_implementation": true,
      "implementation": "test_connection_pool_creation",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_simple_tests.py",
      "name": "test_connection_pool_creation",
      "status": "partial - missing schema"
    },
    "test_content_analysis": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_routing_system_integration.py",
      "has_implementation": true,
      "implementation": "test_content_analysis",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_routing_system_integration.py",
      "name": "test_content_analysis",
      "status": "partial - missing schema"
    },
    "test_content_announcement_via_ipfskit": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_connection.py",
      "has_implementation": true,
      "implementation": "test_content_announcement_via_ipfskit",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_connection.py",
      "name": "test_content_announcement_via_ipfskit",
      "status": "partial - missing schema"
    },
    "test_content_provider_search": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_content_provider_search",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_integration_anyio.py",
      "name": "test_content_provider_search",
      "status": "partial - missing schema"
    },
    "test_content_publication": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_content_publication",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_integration_anyio.py",
      "name": "test_content_publication",
      "status": "partial - missing schema"
    },
    "test_content_replication": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_tiered_storage.py",
      "has_implementation": true,
      "implementation": "test_content_replication",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_tiered_storage.py",
      "name": "test_content_replication",
      "status": "partial - missing schema"
    },
    "test_content_retrieval_performance": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_performance.py",
      "has_implementation": true,
      "implementation": "test_content_retrieval_performance",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_performance.py",
      "name": "test_content_retrieval_performance",
      "status": "partial - missing schema"
    },
    "test_content_retrieval_via_ipfskit": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_connection.py",
      "has_implementation": true,
      "implementation": "test_content_retrieval_via_ipfskit",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_connection.py",
      "name": "test_content_retrieval_via_ipfskit",
      "status": "partial - missing schema"
    },
    "test_content_storage": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_connection.py",
      "has_implementation": true,
      "implementation": "test_content_storage",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_connection.py",
      "name": "test_content_storage",
      "status": "partial - missing schema"
    },
    "test_context_detection": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_server.py",
      "has_implementation": true,
      "implementation": "test_context_detection",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
      "name": "test_context_detection",
      "status": "partial - missing schema"
    },
    "test_context_injection": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_tool_manager.py",
      "has_implementation": true,
      "implementation": "test_context_injection",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_tool_manager.py",
      "name": "test_context_injection",
      "status": "partial - missing schema"
    },
    "test_context_injection_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_tool_manager.py",
      "has_implementation": true,
      "implementation": "test_context_injection_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_tool_manager.py",
      "name": "test_context_injection_async",
      "status": "partial - missing schema"
    },
    "test_context_optional": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_tool_manager.py",
      "has_implementation": true,
      "implementation": "test_context_optional",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_tool_manager.py",
      "name": "test_context_optional",
      "status": "partial - missing schema"
    },
    "test_context_parameter_detection": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_tool_manager.py",
      "has_implementation": true,
      "implementation": "test_context_parameter_detection",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_tool_manager.py",
      "name": "test_context_parameter_detection",
      "status": "partial - missing schema"
    },
    "test_context_propagation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_telemetry_api_integration.py",
      "has_implementation": true,
      "implementation": "test_context_propagation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_telemetry_api_integration.py",
      "name": "test_context_propagation",
      "status": "partial - missing schema"
    },
    "test_controller_bytes_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fix_result.py",
      "has_implementation": true,
      "implementation": "test_controller_bytes_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_fix_result.py",
      "name": "test_controller_bytes_response",
      "status": "partial - missing schema"
    },
    "test_controller_initialization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_distributed.py",
      "has_implementation": true,
      "implementation": "test_controller_initialization",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/network_tests/test_mcp_distributed.py",
      "name": "test_controller_initialization",
      "status": "partial - missing schema"
    },
    "test_controller_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_status_integrated.py",
      "has_implementation": true,
      "implementation": "test_controller_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_status_integrated.py",
      "name": "test_controller_integration",
      "status": "partial - missing schema"
    },
    "test_copy_file_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_enhanced_files_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_copy_file_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
      "name": "test_copy_file_error",
      "status": "partial - missing schema"
    },
    "test_copy_file_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_enhanced_files_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_copy_file_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
      "name": "test_copy_file_success",
      "status": "partial - missing schema"
    },
    "test_copy_resumable_permission_check": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_permissions_integration.py",
      "has_implementation": true,
      "implementation": "test_copy_resumable_permission_check",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_permissions_integration.py",
      "name": "test_copy_resumable_permission_check",
      "status": "partial - missing schema"
    },
    "test_core_package_import": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_dependency_handling.py",
      "has_implementation": true,
      "implementation": "test_core_package_import",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_dependency_handling.py",
      "name": "test_core_package_import",
      "status": "partial - missing schema"
    },
    "test_correlation_id_tracking": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_error_handling.py",
      "has_implementation": true,
      "implementation": "test_correlation_id_tracking",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_error_handling.py",
      "name": "test_correlation_id_tracking",
      "status": "partial - missing schema"
    },
    "test_create_car": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipld_integration_with_kit.py",
      "has_implementation": true,
      "implementation": "test_create_car",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_integration_with_kit.py",
      "name": "test_create_car",
      "status": "partial - missing schema"
    },
    "test_create_dag_node": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipld_integration_with_kit.py",
      "has_implementation": true,
      "implementation": "test_create_dag_node",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_integration_with_kit.py",
      "name": "test_create_dag_node",
      "status": "partial - missing schema"
    },
    "test_create_gossipsub": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_pubsub.py",
      "has_implementation": true,
      "implementation": "test_create_gossipsub",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_pubsub.py",
      "name": "test_create_gossipsub",
      "status": "partial - missing schema"
    },
    "test_create_journal_monitor": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_fs_journal_monitor.py",
      "has_implementation": true,
      "implementation": "test_create_journal_monitor",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_fs_journal_monitor.py",
      "name": "test_create_journal_monitor",
      "status": "partial - missing schema"
    },
    "test_create_metadata_from_ipfs_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_arrow_metadata_index_additional.py",
      "has_implementation": true,
      "implementation": "test_create_metadata_from_ipfs_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index_additional.py",
      "name": "test_create_metadata_from_ipfs_file",
      "status": "partial - missing schema"
    },
    "test_create_metadata_with_directory": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_arrow_metadata_index_additional.py",
      "has_implementation": true,
      "implementation": "test_create_metadata_with_directory",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index_additional.py",
      "name": "test_create_metadata_with_directory",
      "status": "partial - missing schema"
    },
    "test_create_offer_with_replication": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_metadata_replication.py",
      "has_implementation": true,
      "implementation": "test_create_offer_with_replication",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication.py",
      "name": "test_create_offer_with_replication",
      "status": "partial - missing schema"
    },
    "test_create_offer_with_replication_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_metadata_replication_anyio.py",
      "has_implementation": true,
      "implementation": "test_create_offer_with_replication_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication_anyio.py",
      "name": "test_create_offer_with_replication_async",
      "status": "partial - missing schema"
    },
    "test_create_repository_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_model.py",
      "has_implementation": true,
      "implementation": "test_create_repository_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
      "name": "test_create_repository_failure",
      "status": "partial - missing schema"
    },
    "test_create_space": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storacha_mcp.py",
      "has_implementation": true,
      "implementation": "test_create_space",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_storacha_mcp.py",
      "name": "test_create_space",
      "status": "partial - missing schema"
    },
    "test_create_space_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storacha_model.py",
      "has_implementation": true,
      "implementation": "test_create_space_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_storacha_model.py",
      "name": "test_create_space_error",
      "status": "partial - missing schema"
    },
    "test_create_unknown_router": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_pubsub.py",
      "has_implementation": true,
      "implementation": "test_create_unknown_router",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_pubsub.py",
      "name": "test_create_unknown_router",
      "status": "partial - missing schema"
    },
    "test_credential_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controllers.py",
      "has_implementation": true,
      "implementation": "test_credential_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_controllers.py",
      "name": "test_credential_endpoints",
      "status": "partial - missing schema"
    },
    "test_credential_endpoints_exist": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_credential_management.py",
      "has_implementation": true,
      "implementation": "test_credential_endpoints_exist",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_credential_management.py",
      "name": "test_credential_endpoints_exist",
      "status": "partial - missing schema"
    },
    "test_daemon_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_api_anyio.py",
      "has_implementation": true,
      "implementation": "test_daemon_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_anyio.py",
      "name": "test_daemon_endpoints",
      "status": "partial - missing schema"
    },
    "test_daemon_not_running": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_error_scenarios.py",
      "has_implementation": true,
      "implementation": "test_daemon_not_running",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_error_scenarios.py",
      "name": "test_daemon_not_running",
      "status": "partial - missing schema"
    },
    "test_dag_get": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_advanced.py",
      "has_implementation": true,
      "implementation": "test_dag_get",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_ipfs_advanced.py",
      "name": "test_dag_get",
      "status": "partial - missing schema"
    },
    "test_dag_get_with_path_parameter": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dag_operations.py",
      "has_implementation": true,
      "implementation": "test_dag_get_with_path_parameter",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
      "name": "test_dag_get_with_path_parameter",
      "status": "partial - missing schema"
    },
    "test_dag_get_with_path_parameter_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dag_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_dag_get_with_path_parameter_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
      "name": "test_dag_get_with_path_parameter_async",
      "status": "partial - missing schema"
    },
    "test_dag_put_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dag_operations.py",
      "has_implementation": true,
      "implementation": "test_dag_put_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
      "name": "test_dag_put_failure",
      "status": "partial - missing schema"
    },
    "test_dag_put_failure_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dag_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_dag_put_failure_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
      "name": "test_dag_put_failure_async",
      "status": "partial - missing schema"
    },
    "test_dag_put_with_format_parameter": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dag_operations.py",
      "has_implementation": true,
      "implementation": "test_dag_put_with_format_parameter",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
      "name": "test_dag_put_with_format_parameter",
      "status": "partial - missing schema"
    },
    "test_dag_put_with_format_parameter_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dag_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_dag_put_with_format_parameter_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
      "name": "test_dag_put_with_format_parameter_async",
      "status": "partial - missing schema"
    },
    "test_dag_resolve": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_advanced.py",
      "has_implementation": true,
      "implementation": "test_dag_resolve",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_ipfs_advanced.py",
      "name": "test_dag_resolve",
      "status": "partial - missing schema"
    },
    "test_dag_resolve_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dag_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_dag_resolve_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
      "name": "test_dag_resolve_failure",
      "status": "partial - missing schema"
    },
    "test_dag_resolve_failure_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dag_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_dag_resolve_failure_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
      "name": "test_dag_resolve_failure_async",
      "status": "partial - missing schema"
    },
    "test_dag_resolve_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dag_operations.py",
      "has_implementation": true,
      "implementation": "test_dag_resolve_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
      "name": "test_dag_resolve_success",
      "status": "partial - missing schema"
    },
    "test_dag_resolve_success_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dag_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_dag_resolve_success_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dag_operations_anyio.py",
      "name": "test_dag_resolve_success_async",
      "status": "partial - missing schema"
    },
    "test_dask_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_data_science_integration.py",
      "has_implementation": true,
      "implementation": "test_dask_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_data_science_integration.py",
      "name": "test_dask_integration",
      "status": "partial - missing schema"
    },
    "test_data_migration_workflow": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_end_to_end.py",
      "has_implementation": true,
      "implementation": "test_data_migration_workflow",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_end_to_end.py",
      "name": "test_data_migration_workflow",
      "status": "partial - missing schema"
    },
    "test_debug_endpoint_includes_metrics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_component_monitoring.py",
      "has_implementation": true,
      "implementation": "test_debug_endpoint_includes_metrics",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_component_monitoring.py",
      "name": "test_debug_endpoint_includes_metrics",
      "status": "partial - missing schema"
    },
    "test_debug_middleware": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server_anyio.py",
      "has_implementation": true,
      "implementation": "test_debug_middleware",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server_anyio.py",
      "name": "test_debug_middleware",
      "status": "partial - missing schema"
    },
    "test_debug_output": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_daemon_status_direct.py",
      "has_implementation": true,
      "implementation": "test_debug_output",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_daemon_status_direct.py",
      "name": "test_debug_output",
      "status": "partial - missing schema"
    },
    "test_deep_directory_creation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_files_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_deep_directory_creation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_files_operations_anyio.py",
      "name": "test_deep_directory_creation",
      "status": "partial - missing schema"
    },
    "test_delete_credential": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_credential_management_anyio.py",
      "has_implementation": true,
      "implementation": "test_delete_credential",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_credential_management_anyio.py",
      "name": "test_delete_credential",
      "status": "partial - missing schema"
    },
    "test_detect_by_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "test_detect_by_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced.py",
      "name": "test_detect_by_content",
      "status": "partial - missing schema"
    },
    "test_detect_changes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "test_detect_changes",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced.py",
      "name": "test_detect_changes",
      "status": "partial - missing schema"
    },
    "test_dht_find_peer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_dht_find_peer",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_dht_find_peer",
      "status": "partial - missing schema"
    },
    "test_dht_find_peer_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_dht_operations.py",
      "has_implementation": true,
      "implementation": "test_dht_find_peer_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_ipfs_dht_operations.py",
      "name": "test_dht_find_peer_failure",
      "status": "partial - missing schema"
    },
    "test_dht_find_providers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_dht_find_providers",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_dht_find_providers",
      "status": "partial - missing schema"
    },
    "test_dht_find_providers_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_dht_operations.py",
      "has_implementation": true,
      "implementation": "test_dht_find_providers_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_ipfs_dht_operations.py",
      "name": "test_dht_find_providers_failure",
      "status": "partial - missing schema"
    },
    "test_dht_findpeer_async_empty_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dht_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_dht_findpeer_async_empty_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_dht_operations_anyio.py",
      "name": "test_dht_findpeer_async_empty_response",
      "status": "partial - missing schema"
    },
    "test_dht_findpeer_async_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dht_operations_anyio_extended.py",
      "has_implementation": true,
      "implementation": "test_dht_findpeer_async_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_anyio_extended.py",
      "name": "test_dht_findpeer_async_error",
      "status": "partial - missing schema"
    },
    "test_dht_findpeer_empty_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dht_operations.py",
      "has_implementation": true,
      "implementation": "test_dht_findpeer_empty_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_dht_operations.py",
      "name": "test_dht_findpeer_empty_response",
      "status": "partial - missing schema"
    },
    "test_dht_findpeer_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dht_operations_extended.py",
      "has_implementation": true,
      "implementation": "test_dht_findpeer_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_extended.py",
      "name": "test_dht_findpeer_endpoint",
      "status": "partial - missing schema"
    },
    "test_dht_findpeer_server_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dht_operations_extended.py",
      "has_implementation": true,
      "implementation": "test_dht_findpeer_server_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_extended.py",
      "name": "test_dht_findpeer_server_error",
      "status": "partial - missing schema"
    },
    "test_dht_findpeer_unexpected_error_type": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dht_operations_extended.py",
      "has_implementation": true,
      "implementation": "test_dht_findpeer_unexpected_error_type",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_extended.py",
      "name": "test_dht_findpeer_unexpected_error_type",
      "status": "partial - missing schema"
    },
    "test_dht_findpeer_validation_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dht_operations_extended.py",
      "has_implementation": true,
      "implementation": "test_dht_findpeer_validation_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_extended.py",
      "name": "test_dht_findpeer_validation_error",
      "status": "partial - missing schema"
    },
    "test_dht_findprovs_async_empty_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dht_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_dht_findprovs_async_empty_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_dht_operations_anyio.py",
      "name": "test_dht_findprovs_async_empty_response",
      "status": "partial - missing schema"
    },
    "test_dht_findprovs_async_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dht_operations_anyio_extended.py",
      "has_implementation": true,
      "implementation": "test_dht_findprovs_async_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_anyio_extended.py",
      "name": "test_dht_findprovs_async_error",
      "status": "partial - missing schema"
    },
    "test_dht_findprovs_async_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dht_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_dht_findprovs_async_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_dht_operations_anyio.py",
      "name": "test_dht_findprovs_async_success",
      "status": "partial - missing schema"
    },
    "test_dht_findprovs_empty_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dht_operations.py",
      "has_implementation": true,
      "implementation": "test_dht_findprovs_empty_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_dht_operations.py",
      "name": "test_dht_findprovs_empty_response",
      "status": "partial - missing schema"
    },
    "test_dht_findprovs_null_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dht_operations_extended.py",
      "has_implementation": true,
      "implementation": "test_dht_findprovs_null_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_extended.py",
      "name": "test_dht_findprovs_null_response",
      "status": "partial - missing schema"
    },
    "test_dht_findprovs_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dht_operations.py",
      "has_implementation": true,
      "implementation": "test_dht_findprovs_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_dht_operations.py",
      "name": "test_dht_findprovs_success",
      "status": "partial - missing schema"
    },
    "test_dht_findprovs_with_large_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dht_operations_extended.py",
      "has_implementation": true,
      "implementation": "test_dht_findprovs_with_large_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_extended.py",
      "name": "test_dht_findprovs_with_large_response",
      "status": "partial - missing schema"
    },
    "test_dht_findprovs_with_num_providers_parameter": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dht_operations_anyio_extended.py",
      "has_implementation": true,
      "implementation": "test_dht_findprovs_with_num_providers_parameter",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_anyio_extended.py",
      "name": "test_dht_findprovs_with_num_providers_parameter",
      "status": "partial - missing schema"
    },
    "test_dht_provide": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_dht_provide",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_dht_provide",
      "status": "partial - missing schema"
    },
    "test_dht_provide_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_dht_operations.py",
      "has_implementation": true,
      "implementation": "test_dht_provide_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_ipfs_dht_operations.py",
      "name": "test_dht_provide_failure",
      "status": "partial - missing schema"
    },
    "test_dict_response_handling": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fix_result.py",
      "has_implementation": true,
      "implementation": "test_dict_response_handling",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_fix_result.py",
      "name": "test_dict_response_handling",
      "status": "partial - missing schema"
    },
    "test_disable_warn_on_duplicate_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_tool_manager.py",
      "has_implementation": true,
      "implementation": "test_disable_warn_on_duplicate_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_tool_manager.py",
      "name": "test_disable_warn_on_duplicate_tools",
      "status": "partial - missing schema"
    },
    "test_disconnect_from_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_peer_websocket_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_disconnect_from_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller.py",
      "name": "test_disconnect_from_server",
      "status": "partial - missing schema"
    },
    "test_discover_partitions": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_arrow_metadata_index_additional.py",
      "has_implementation": true,
      "implementation": "test_discover_partitions",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index_additional.py",
      "name": "test_discover_partitions",
      "status": "partial - missing schema"
    },
    "test_discover_peers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_discover_peers",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_distributed_controller_fastapi.py",
      "name": "test_discover_peers",
      "status": "partial - missing schema"
    },
    "test_discover_servers_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_discover_servers_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "test_discover_servers_async",
      "status": "partial - missing schema"
    },
    "test_discover_servers_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_discover_servers_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "test_discover_servers_endpoint",
      "status": "partial - missing schema"
    },
    "test_distributed_controller": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_all_controllers.py",
      "has_implementation": true,
      "implementation": "test_distributed_controller",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_all_controllers.py",
      "name": "test_distributed_controller",
      "status": "partial - missing schema"
    },
    "test_document_indexing": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_search_integration.py",
      "has_implementation": true,
      "implementation": "test_document_indexing",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/verify_search_integration.py",
      "name": "test_document_indexing",
      "status": "partial - missing schema"
    },
    "test_downgrade_worker_to_leecher": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_dynamic_role_switching.py",
      "has_implementation": true,
      "implementation": "test_downgrade_worker_to_leecher",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_dynamic_role_switching.py",
      "name": "test_downgrade_worker_to_leecher",
      "status": "partial - missing schema"
    },
    "test_download_binaries": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_binary_download.py",
      "has_implementation": true,
      "implementation": "test_download_binaries",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_binary_download.py",
      "name": "test_download_binaries",
      "status": "partial - missing schema"
    },
    "test_download_file_with_name": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_api.py",
      "has_implementation": true,
      "implementation": "test_download_file_with_name",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_api.py",
      "name": "test_download_file_with_name",
      "status": "partial - missing schema"
    },
    "test_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_endpoints.py",
      "has_implementation": true,
      "implementation": "test_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/verify_api_endpoints.py",
      "name": "test_endpoint",
      "status": "partial - missing schema"
    },
    "test_enforce_minimum_replication_factor": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_metadata_replication.py",
      "has_implementation": true,
      "implementation": "test_enforce_minimum_replication_factor",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_metadata_replication_anyio.py",
      "name": "test_enforce_minimum_replication_factor",
      "status": "partial - missing schema"
    },
    "test_enhanced_dht_discovery_creation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_integration.py",
      "has_implementation": true,
      "implementation": "test_enhanced_dht_discovery_creation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_integration.py",
      "name": "test_enhanced_dht_discovery_creation",
      "status": "partial - missing schema"
    },
    "test_error_conversion": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_standardized_error_handling.py",
      "has_implementation": true,
      "implementation": "test_error_conversion",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/error_handling/test_standardized_error_handling.py",
      "name": "test_error_conversion",
      "status": "partial - missing schema"
    },
    "test_error_handling": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fix_result.py",
      "has_implementation": true,
      "implementation": "test_error_handling",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_fix_result.py",
      "name": "test_error_handling",
      "status": "partial - missing schema"
    },
    "test_error_handling_dependencies_not_available": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipld_additional_coverage.py",
      "has_implementation": true,
      "implementation": "test_error_handling_dependencies_not_available",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_additional_coverage.py",
      "name": "test_error_handling_dependencies_not_available",
      "status": "partial - missing schema"
    },
    "test_error_handling_file_not_found": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipld_additional_coverage.py",
      "has_implementation": true,
      "implementation": "test_error_handling_file_not_found",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_additional_coverage.py",
      "name": "test_error_handling_file_not_found",
      "status": "partial - missing schema"
    },
    "test_error_handling_http_api_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipld_additional_coverage.py",
      "has_implementation": true,
      "implementation": "test_error_handling_http_api_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_additional_coverage.py",
      "name": "test_error_handling_http_api_failure",
      "status": "partial - missing schema"
    },
    "test_error_middleware": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server_anyio.py",
      "has_implementation": true,
      "implementation": "test_error_middleware",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server_anyio.py",
      "name": "test_error_middleware",
      "status": "partial - missing schema"
    },
    "test_estimate_retrieval_cost": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_metrics.py",
      "has_implementation": true,
      "implementation": "test_estimate_retrieval_cost",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_metrics.py",
      "name": "test_estimate_retrieval_cost",
      "status": "partial - missing schema"
    },
    "test_estimate_time_to_completion": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_helper_functions.py",
      "has_implementation": true,
      "implementation": "test_estimate_time_to_completion",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_state_helpers.py",
      "name": "test_estimate_time_to_completion",
      "status": "partial - missing schema"
    },
    "test_estimate_total_cost": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_metrics.py",
      "has_implementation": true,
      "implementation": "test_estimate_total_cost",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_metrics.py",
      "name": "test_estimate_total_cost",
      "status": "partial - missing schema"
    },
    "test_exists": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api.py",
      "has_implementation": true,
      "implementation": "test_exists",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
      "name": "test_exists",
      "status": "partial - missing schema"
    },
    "test_exists_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_anyio_server.py",
      "has_implementation": true,
      "implementation": "test_exists_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_anyio_server.py",
      "name": "test_exists_endpoint",
      "status": "partial - missing schema"
    },
    "test_export_state_to_json": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_state_helpers.py",
      "has_implementation": true,
      "implementation": "test_export_state_to_json",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_state_helpers.py",
      "name": "test_export_state_to_json",
      "status": "partial - missing schema"
    },
    "test_extend_high_level_api_with_aiml_telemetry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_telemetry_ai_ml_anyio.py",
      "has_implementation": true,
      "implementation": "test_extend_high_level_api_with_aiml_telemetry",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/ai_ml/test_wal_telemetry_ai_ml_anyio.py",
      "name": "test_extend_high_level_api_with_aiml_telemetry",
      "status": "partial - missing schema"
    },
    "test_extend_ipfs_kit_class": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_integration.py",
      "has_implementation": true,
      "implementation": "test_extend_ipfs_kit_class",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_integration.py",
      "name": "test_extend_ipfs_kit_class",
      "status": "partial - missing schema"
    },
    "test_extension_initialization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_telemetry_api_integration.py",
      "has_implementation": true,
      "implementation": "test_extension_initialization",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_telemetry_api_integration.py",
      "name": "test_extension_initialization",
      "status": "partial - missing schema"
    },
    "test_failed_transaction": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "test_failed_transaction",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced.py",
      "name": "test_failed_transaction",
      "status": "partial - missing schema"
    },
    "test_fastmcp_resource_mime_type": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_152_resource_mime_type.py",
      "has_implementation": true,
      "implementation": "test_fastmcp_resource_mime_type",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/issues/test_152_resource_mime_type.py",
      "name": "test_fastmcp_resource_mime_type",
      "status": "partial - missing schema"
    },
    "test_fault_tolerance": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_enabled_api_example.py",
      "has_implementation": true,
      "implementation": "test_fault_tolerance",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/wal_enabled_api_example.py",
      "name": "test_fault_tolerance",
      "status": "partial - missing schema"
    },
    "test_fetch_image": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_dataloader.py",
      "has_implementation": true,
      "implementation": "test_fetch_image",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
      "name": "test_fetch_image",
      "status": "partial - missing schema"
    },
    "test_fetch_image_with_transform": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_dataloader.py",
      "has_implementation": true,
      "implementation": "test_fetch_image_with_transform",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
      "name": "test_fetch_image_with_transform",
      "status": "partial - missing schema"
    },
    "test_file_upload": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fixes.py",
      "has_implementation": true,
      "implementation": "test_file_upload",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_fixes.py",
      "name": "test_file_upload",
      "status": "partial - missing schema"
    },
    "test_filecoin": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_all_backends.py",
      "has_implementation": true,
      "implementation": "test_filecoin",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_all_backends.py",
      "name": "test_filecoin",
      "status": "partial - missing schema"
    },
    "test_filecoin_model_direct": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_comprehensive.py",
      "has_implementation": true,
      "implementation": "test_filecoin_model_direct",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_comprehensive.py",
      "name": "test_filecoin_model_direct",
      "status": "partial - missing schema"
    },
    "test_filecoin_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_filecoin.py",
      "has_implementation": true,
      "implementation": "test_filecoin_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_filecoin.py",
      "name": "test_filecoin_status",
      "status": "partial - missing schema"
    },
    "test_filecoin_support": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_filecoin_gateway.py",
      "has_implementation": true,
      "implementation": "test_filecoin_support",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_filecoin_gateway.py",
      "name": "test_filecoin_support",
      "status": "partial - missing schema"
    },
    "test_filecoin_to_ipfs_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_controller.py",
      "has_implementation": true,
      "implementation": "test_filecoin_to_ipfs_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_controller.py",
      "name": "test_filecoin_to_ipfs_endpoint",
      "status": "partial - missing schema"
    },
    "test_filecoin_to_ipfs_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_filecoin_integration.py",
      "has_implementation": true,
      "implementation": "test_filecoin_to_ipfs_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_filecoin_integration.py",
      "name": "test_filecoin_to_ipfs_success",
      "status": "partial - missing schema"
    },
    "test_files_mkdir": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_mfs_operations.py",
      "has_implementation": true,
      "implementation": "test_files_mkdir",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_mfs_operations.py",
      "name": "test_files_mkdir",
      "status": "partial - missing schema"
    },
    "test_files_operations_with_sync_compatibility": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_files_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_files_operations_with_sync_compatibility",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_files_operations_anyio.py",
      "name": "test_files_operations_with_sync_compatibility",
      "status": "partial - missing schema"
    },
    "test_files_stat": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_mfs_operations.py",
      "has_implementation": true,
      "implementation": "test_files_stat",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_mfs_operations.py",
      "name": "test_files_stat",
      "status": "partial - missing schema"
    },
    "test_files_write": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_mfs_operations.py",
      "has_implementation": true,
      "implementation": "test_files_write",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_mfs_operations.py",
      "name": "test_files_write",
      "status": "partial - missing schema"
    },
    "test_filesystem_journal": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_comprehensive.py",
      "has_implementation": true,
      "implementation": "test_filesystem_journal",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive.py",
      "name": "test_filesystem_journal",
      "status": "partial - missing schema"
    },
    "test_filesystem_journal_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_fs_journal_fixed.py",
      "has_implementation": true,
      "implementation": "test_filesystem_journal_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_fs_journal_fixed.py",
      "name": "test_filesystem_journal_integration",
      "status": "partial - missing schema"
    },
    "test_finalize_read_permission_check": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_permissions_integration.py",
      "has_implementation": true,
      "implementation": "test_finalize_read_permission_check",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_permissions_integration.py",
      "name": "test_finalize_read_permission_check",
      "status": "partial - missing schema"
    },
    "test_find_content_source": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_bridge_model.py",
      "has_implementation": true,
      "implementation": "test_find_content_source",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_bridge_model.py",
      "name": "test_find_content_source",
      "status": "partial - missing schema"
    },
    "test_find_libp2p_peers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_peer_discovery.py",
      "has_implementation": true,
      "implementation": "test_find_libp2p_peers",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_peer_discovery.py",
      "name": "test_find_libp2p_peers",
      "status": "partial - missing schema"
    },
    "test_find_nodes_by_role": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_state_helpers.py",
      "has_implementation": true,
      "implementation": "test_find_nodes_by_role",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_state_helpers.py",
      "name": "test_find_nodes_by_role",
      "status": "partial - missing schema"
    },
    "test_find_peers_websocket": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_peer_websocket.py",
      "has_implementation": true,
      "implementation": "test_find_peers_websocket",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/network_tests/test_mcp_peer_websocket.py",
      "name": "test_find_peers_websocket",
      "status": "partial - missing schema"
    },
    "test_find_providers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_find_providers",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_find_providers",
      "status": "partial - missing schema"
    },
    "test_find_tasks_by_resource_requirements": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_helper_functions.py",
      "has_implementation": true,
      "implementation": "test_find_tasks_by_resource_requirements",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_state_helpers.py",
      "name": "test_find_tasks_by_resource_requirements",
      "status": "partial - missing schema"
    },
    "test_find_tasks_by_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_state_helpers.py",
      "has_implementation": true,
      "implementation": "test_find_tasks_by_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_state_helpers.py",
      "name": "test_find_tasks_by_status",
      "status": "partial - missing schema"
    },
    "test_fixed_ipfs_backend": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_fixed_ipfs_backend.py",
      "has_implementation": true,
      "implementation": "test_fixed_ipfs_backend",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_backends/test_fixed_ipfs_backend.py",
      "name": "test_fixed_ipfs_backend",
      "status": "partial - missing schema"
    },
    "test_flush_files_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_enhanced_files_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_flush_files_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
      "name": "test_flush_files_error",
      "status": "partial - missing schema"
    },
    "test_flush_files_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_enhanced_files_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_flush_files_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
      "name": "test_flush_files_success",
      "status": "partial - missing schema"
    },
    "test_form_add": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fixes.py",
      "has_implementation": true,
      "implementation": "test_form_add",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_fixes.py",
      "name": "test_form_add",
      "status": "partial - missing schema"
    },
    "test_format_message_string": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_pubsub.py",
      "has_implementation": true,
      "implementation": "test_format_message_string",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_pubsub.py",
      "name": "test_format_message_string",
      "status": "partial - missing schema"
    },
    "test_from_ipfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storacha_backend.py",
      "has_implementation": true,
      "implementation": "test_from_ipfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_backends/test_storacha_backend.py",
      "name": "test_from_ipfs",
      "status": "partial - missing schema"
    },
    "test_fs_journal": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_fs_integration.py",
      "has_implementation": true,
      "implementation": "test_fs_journal",
      "implementation_file": "/home/barberb/ipfs_kit_py/test_ipfs_fs_integration.py",
      "name": "test_fs_journal",
      "status": "partial - missing schema"
    },
    "test_fs_journal_controller": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_all_controllers.py",
      "has_implementation": true,
      "implementation": "test_fs_journal_controller",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_all_controllers.py",
      "name": "test_fs_journal_controller",
      "status": "partial - missing schema"
    },
    "test_fs_read_handles_bytes_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_comprehensive_fixes.py",
      "has_implementation": true,
      "implementation": "test_fs_read_handles_bytes_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive_fixes.py",
      "name": "test_fs_read_handles_bytes_content",
      "status": "partial - missing schema"
    },
    "test_fsspec_not_available": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_fixed_get_filesystem.py",
      "has_implementation": true,
      "implementation": "test_fsspec_not_available",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_integrated_get_filesystem.py",
      "name": "test_fsspec_not_available",
      "status": "partial - missing schema"
    },
    "test_full_ipfs_webrtc_fs_journal_workflow": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_full_ipfs_webrtc_fs_journal_workflow",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration.py",
      "name": "test_full_ipfs_webrtc_fs_journal_workflow",
      "status": "partial - missing schema"
    },
    "test_full_workflow_integration_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controller_mocked_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_full_workflow_integration_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_mocked_integration_anyio.py",
      "name": "test_full_workflow_integration_async",
      "status": "partial - missing schema"
    },
    "test_gateway_configuration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_gateway_compatibility.py",
      "has_implementation": true,
      "implementation": "test_gateway_configuration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_gateway_compatibility.py",
      "name": "test_gateway_configuration",
      "status": "partial - missing schema"
    },
    "test_gateway_content_cached": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_gateway_compatibility.py",
      "has_implementation": true,
      "implementation": "test_gateway_content_cached",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_gateway_compatibility.py",
      "name": "test_gateway_content_cached",
      "status": "partial - missing schema"
    },
    "test_gateway_fallback_chain": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_gateway_compatibility.py",
      "has_implementation": true,
      "implementation": "test_gateway_fallback_chain",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_gateway_compatibility.py",
      "name": "test_gateway_fallback_chain",
      "status": "partial - missing schema"
    },
    "test_gateway_path_formatting": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_gateway_compatibility.py",
      "has_implementation": true,
      "implementation": "test_gateway_path_formatting",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_gateway_compatibility.py",
      "name": "test_gateway_path_formatting",
      "status": "partial - missing schema"
    },
    "test_generate_cluster_certificates": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_authentication.py",
      "has_implementation": true,
      "implementation": "test_generate_cluster_certificates",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_authentication.py",
      "name": "test_generate_cluster_certificates",
      "status": "partial - missing schema"
    },
    "test_generate_node_identity": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_authentication.py",
      "has_implementation": true,
      "implementation": "test_generate_node_identity",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_authentication.py",
      "name": "test_generate_node_identity",
      "status": "partial - missing schema"
    },
    "test_generate_telemetry_report_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_telemetry_api_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_generate_telemetry_report_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_telemetry_api_integration_anyio.py",
      "name": "test_generate_telemetry_report_async",
      "status": "partial - missing schema"
    },
    "test_generate_ucan_token": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_authentication.py",
      "has_implementation": true,
      "implementation": "test_generate_ucan_token",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_authentication.py",
      "name": "test_generate_ucan_token",
      "status": "partial - missing schema"
    },
    "test_get": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api.py",
      "has_implementation": true,
      "implementation": "test_get",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
      "name": "test_get",
      "status": "partial - missing schema"
    },
    "test_get_backend": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_distributed_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_get_backend",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_distributed_controller_anyio.py",
      "name": "test_get_backend",
      "status": "partial - missing schema"
    },
    "test_get_backend_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_get_backend_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
      "name": "test_get_backend_status",
      "status": "partial - missing schema"
    },
    "test_get_best_alternative": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_router.py",
      "has_implementation": true,
      "implementation": "test_get_best_alternative",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_router.py",
      "name": "test_get_best_alternative",
      "status": "partial - missing schema"
    },
    "test_get_compatible_servers_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_get_compatible_servers_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "test_get_compatible_servers_async",
      "status": "partial - missing schema"
    },
    "test_get_compatible_servers_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_get_compatible_servers_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "test_get_compatible_servers_endpoint",
      "status": "partial - missing schema"
    },
    "test_get_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_api.py",
      "has_implementation": true,
      "implementation": "test_get_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_api.py",
      "name": "test_get_config",
      "status": "partial - missing schema"
    },
    "test_get_connected_peers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_get_connected_peers",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_get_connected_peers",
      "status": "partial - missing schema"
    },
    "test_get_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_comprehensive.py",
      "has_implementation": true,
      "implementation": "test_get_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/tests/integration/backends/test_ipfs_backend.py",
      "name": "test_get_content",
      "status": "partial - missing schema"
    },
    "test_get_content_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_get_content_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
      "name": "test_get_content_async",
      "status": "partial - missing schema"
    },
    "test_get_content_bytes_fix": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fix.py",
      "has_implementation": true,
      "implementation": "test_get_content_bytes_fix",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_fix.py",
      "name": "test_get_content_bytes_fix",
      "status": "partial - missing schema"
    },
    "test_get_content_bytes_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fixes_all.py",
      "has_implementation": true,
      "implementation": "test_get_content_bytes_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_fixes_all.py",
      "name": "test_get_content_bytes_response",
      "status": "partial - missing schema"
    },
    "test_get_content_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_get_content_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
      "name": "test_get_content_endpoint",
      "status": "partial - missing schema"
    },
    "test_get_content_from_backend": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_bridge_model.py",
      "has_implementation": true,
      "implementation": "test_get_content_from_backend",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_bridge_model.py",
      "name": "test_get_content_from_backend",
      "status": "partial - missing schema"
    },
    "test_get_content_metadata": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_bridge_model.py",
      "has_implementation": true,
      "implementation": "test_get_content_metadata",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_bridge_model.py",
      "name": "test_get_content_metadata",
      "status": "partial - missing schema"
    },
    "test_get_content_tiers_all_backends": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_backends_interop.py",
      "has_implementation": true,
      "implementation": "test_get_content_tiers_all_backends",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_backends_interop.py",
      "name": "test_get_content_tiers_all_backends",
      "status": "partial - missing schema"
    },
    "test_get_cost_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_metrics.py",
      "has_implementation": true,
      "implementation": "test_get_cost_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_metrics.py",
      "name": "test_get_cost_model",
      "status": "partial - missing schema"
    },
    "test_get_daemon_status_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_daemon_management_anyio.py",
      "has_implementation": true,
      "implementation": "test_get_daemon_status_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_daemon_management_anyio.py",
      "name": "test_get_daemon_status_endpoint",
      "status": "partial - missing schema"
    },
    "test_get_debug_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_advanced.py",
      "has_implementation": true,
      "implementation": "test_get_debug_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_advanced.py",
      "name": "test_get_debug_endpoints",
      "status": "partial - missing schema"
    },
    "test_get_filesystem_exception": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_fsspec_standalone.py",
      "has_implementation": true,
      "implementation": "test_get_filesystem_exception",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_fsspec_standalone.py",
      "name": "test_get_filesystem_exception",
      "status": "partial - missing schema"
    },
    "test_get_filesystem_method": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_enhanced_tests.py",
      "has_implementation": true,
      "implementation": "test_get_filesystem_method",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
      "name": "test_get_filesystem_method",
      "status": "partial - missing schema"
    },
    "test_get_filesystem_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_fsspec_integration.py",
      "has_implementation": true,
      "implementation": "test_get_filesystem_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/tools/test_utils/test_fsspec_integration.py",
      "name": "test_get_filesystem_success",
      "status": "partial - missing schema"
    },
    "test_get_journal_health_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_fs_journal_monitor.py",
      "has_implementation": true,
      "implementation": "test_get_journal_health_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_fs_journal_monitor.py",
      "name": "test_get_journal_health_status",
      "status": "partial - missing schema"
    },
    "test_get_local_server_info_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_get_local_server_info_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "test_get_local_server_info_endpoint",
      "status": "partial - missing schema"
    },
    "test_get_metadata": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_backend.py",
      "has_implementation": true,
      "implementation": "test_get_metadata",
      "implementation_file": "/home/barberb/ipfs_kit_py/tests/integration/backends/test_ipfs_backend.py",
      "name": "test_get_metadata",
      "status": "partial - missing schema"
    },
    "test_get_metadata_index": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_metadata_index_integration.py",
      "has_implementation": true,
      "implementation": "test_get_metadata_index",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_metadata_index_integration.py",
      "name": "test_get_metadata_index",
      "status": "partial - missing schema"
    },
    "test_get_operation_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_api_anyio.py",
      "has_implementation": true,
      "implementation": "test_get_operation_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_api.py",
      "name": "test_get_operation_status",
      "status": "partial - missing schema"
    },
    "test_get_operations_by_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_wal.py",
      "has_implementation": true,
      "implementation": "test_get_operations_by_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_wal.py",
      "name": "test_get_operations_by_status",
      "status": "partial - missing schema"
    },
    "test_get_optimal_source": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_bridge_model.py",
      "has_implementation": true,
      "implementation": "test_get_optimal_source",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_bridge_model.py",
      "name": "test_get_optimal_source",
      "status": "partial - missing schema"
    },
    "test_get_peer_by_id": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_peer_websocket_controller.py",
      "has_implementation": true,
      "implementation": "test_get_peer_by_id",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_peer_websocket_controller.py",
      "name": "test_get_peer_by_id",
      "status": "partial - missing schema"
    },
    "test_get_peer_by_id_not_found": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_peer_websocket_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_get_peer_by_id_not_found",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
      "name": "test_get_peer_by_id_not_found",
      "status": "partial - missing schema"
    },
    "test_get_peer_info": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_get_peer_info",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_get_peer_info",
      "status": "partial - missing schema"
    },
    "test_get_peers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_get_peers",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_distributed_endpoints.py",
      "name": "test_get_peers",
      "status": "partial - missing schema"
    },
    "test_get_performance_metrics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_dataloader.py",
      "has_implementation": true,
      "implementation": "test_get_performance_metrics",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
      "name": "test_get_performance_metrics",
      "status": "partial - missing schema"
    },
    "test_get_preferred_backends": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_adaptive_optimizer.py",
      "has_implementation": true,
      "implementation": "test_get_preferred_backends",
      "implementation_file": "/home/barberb/ipfs_kit_py/tests/test_adaptive_optimizer.py",
      "name": "test_get_preferred_backends",
      "status": "partial - missing schema"
    },
    "test_get_prompt": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_server.py",
      "has_implementation": true,
      "implementation": "test_get_prompt",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
      "name": "test_get_prompt",
      "status": "partial - missing schema"
    },
    "test_get_prompt_with_resource": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_server.py",
      "has_implementation": true,
      "implementation": "test_get_prompt_with_resource",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
      "name": "test_get_prompt_with_resource",
      "status": "partial - missing schema"
    },
    "test_get_role_requirements": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_dynamic_role_switching.py",
      "has_implementation": true,
      "implementation": "test_get_role_requirements",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_dynamic_role_switching.py",
      "name": "test_get_role_requirements",
      "status": "partial - missing schema"
    },
    "test_get_server_by_id_endpoint_not_found": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_get_server_by_id_endpoint_not_found",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "test_get_server_by_id_endpoint_not_found",
      "status": "partial - missing schema"
    },
    "test_get_server_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_peer_websocket_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_get_server_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
      "name": "test_get_server_status",
      "status": "partial - missing schema"
    },
    "test_get_server_status_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_peer_websocket_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_get_server_status_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
      "name": "test_get_server_status_endpoint",
      "status": "partial - missing schema"
    },
    "test_get_set_metric": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_router.py",
      "has_implementation": true,
      "implementation": "test_get_set_metric",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_router.py",
      "name": "test_get_set_metric",
      "status": "partial - missing schema"
    },
    "test_get_state_interface_info": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_state.py",
      "has_implementation": true,
      "implementation": "test_get_state_interface_info",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_state.py",
      "name": "test_get_state_interface_info",
      "status": "partial - missing schema"
    },
    "test_get_state_path_from_metadata": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_state_helpers.py",
      "has_implementation": true,
      "implementation": "test_get_state_path_from_metadata",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_state_helpers.py",
      "name": "test_get_state_path_from_metadata",
      "status": "partial - missing schema"
    },
    "test_get_stats": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_get_stats",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_method_normalizer.py",
      "name": "test_get_stats",
      "status": "partial - missing schema"
    },
    "test_get_status_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fs_journal_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_get_status_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_fs_journal_controller_anyio.py",
      "name": "test_get_status_async",
      "status": "partial - missing schema"
    },
    "test_get_success_rate": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_metrics.py",
      "has_implementation": true,
      "implementation": "test_get_success_rate",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_metrics.py",
      "name": "test_get_success_rate",
      "status": "partial - missing schema"
    },
    "test_get_task_execution_metrics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_state_helpers.py",
      "has_implementation": true,
      "implementation": "test_get_task_execution_metrics",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_state_helpers.py",
      "name": "test_get_task_execution_metrics",
      "status": "partial - missing schema"
    },
    "test_get_task_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_distributed.py",
      "has_implementation": true,
      "implementation": "test_get_task_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/network_tests/test_mcp_distributed.py",
      "name": "test_get_task_status",
      "status": "partial - missing schema"
    },
    "test_get_telemetry_configuration_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_telemetry_api_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_get_telemetry_configuration_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_telemetry_api_integration_anyio.py",
      "name": "test_get_telemetry_configuration_async",
      "status": "partial - missing schema"
    },
    "test_get_throughput": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_metrics.py",
      "has_implementation": true,
      "implementation": "test_get_throughput",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_metrics.py",
      "name": "test_get_throughput",
      "status": "partial - missing schema"
    },
    "test_global_convenience_function": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_integration.py",
      "has_implementation": true,
      "implementation": "test_global_convenience_function",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_integration.py",
      "name": "test_global_convenience_function",
      "status": "partial - missing schema"
    },
    "test_gossipsub_and_enhanced_discovery": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_protocols.py",
      "has_implementation": true,
      "implementation": "test_gossipsub_and_enhanced_discovery",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_protocols.py",
      "name": "test_gossipsub_and_enhanced_discovery",
      "status": "partial - missing schema"
    },
    "test_handle_cache_miss": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_integration.py",
      "has_implementation": true,
      "implementation": "test_handle_cache_miss",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_integration.py",
      "name": "test_handle_cache_miss",
      "status": "partial - missing schema"
    },
    "test_handle_fetch_cid_request_async_impl": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_lassie_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_handle_fetch_cid_request_async_impl",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
      "name": "test_handle_fetch_cid_request_async_impl",
      "status": "partial - missing schema"
    },
    "test_handle_filecoin_to_ipfs_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_controller_mock.py",
      "has_implementation": true,
      "implementation": "test_handle_filecoin_to_ipfs_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_controller_mock.py",
      "name": "test_handle_filecoin_to_ipfs_request",
      "status": "partial - missing schema"
    },
    "test_handle_filecoin_to_ipfs_request_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_controller_mock.py",
      "has_implementation": true,
      "implementation": "test_handle_filecoin_to_ipfs_request_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_controller_mock.py",
      "name": "test_handle_filecoin_to_ipfs_request_error",
      "status": "partial - missing schema"
    },
    "test_handle_huggingface_to_ipfs_request_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_handle_huggingface_to_ipfs_request_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_huggingface_controller_anyio.py",
      "name": "test_handle_huggingface_to_ipfs_request_async",
      "status": "partial - missing schema"
    },
    "test_handle_ipfs_to_lassie_request_sync_fallback": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_lassie_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_handle_ipfs_to_lassie_request_sync_fallback",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
      "name": "test_handle_ipfs_to_lassie_request_sync_fallback",
      "status": "partial - missing schema"
    },
    "test_handle_lassie_to_ipfs_request_async_impl": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_lassie_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_handle_lassie_to_ipfs_request_async_impl",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
      "name": "test_handle_lassie_to_ipfs_request_async_impl",
      "status": "partial - missing schema"
    },
    "test_handle_lassie_to_ipfs_request_sync_fallback": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_lassie_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_handle_lassie_to_ipfs_request_sync_fallback",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
      "name": "test_handle_lassie_to_ipfs_request_sync_fallback",
      "status": "partial - missing schema"
    },
    "test_handle_list_wallets_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_controller_mock.py",
      "has_implementation": true,
      "implementation": "test_handle_list_wallets_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_controller_mock.py",
      "name": "test_handle_list_wallets_request",
      "status": "partial - missing schema"
    },
    "test_handle_migration_request_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_handle_migration_request_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller_anyio.py",
      "name": "test_handle_migration_request_async",
      "status": "partial - missing schema"
    },
    "test_handle_missing_samples": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_dataloader.py",
      "has_implementation": true,
      "implementation": "test_handle_missing_samples",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
      "name": "test_handle_missing_samples",
      "status": "partial - missing schema"
    },
    "test_handle_partition_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_arrow_metadata_index.py",
      "has_implementation": true,
      "implementation": "test_handle_partition_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index.py",
      "name": "test_handle_partition_request",
      "status": "partial - missing schema"
    },
    "test_handle_s3_to_ipfs_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_s3_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_handle_s3_to_ipfs_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_s3_controller.py",
      "name": "test_handle_s3_to_ipfs_request",
      "status": "partial - missing schema"
    },
    "test_handle_s3_to_ipfs_request_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_s3_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_handle_s3_to_ipfs_request_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_s3_controller_anyio.py",
      "name": "test_handle_s3_to_ipfs_request_error",
      "status": "partial - missing schema"
    },
    "test_handle_space_creation_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storacha_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_handle_space_creation_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storacha_controller_anyio.py",
      "name": "test_handle_space_creation_request",
      "status": "partial - missing schema"
    },
    "test_handle_status_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_s3_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_handle_status_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_s3_controller_anyio.py",
      "name": "test_handle_status_request",
      "status": "partial - missing schema"
    },
    "test_handle_status_request_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_handle_status_request_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_huggingface_controller_anyio.py",
      "name": "test_handle_status_request_async",
      "status": "partial - missing schema"
    },
    "test_handle_status_request_async_impl": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_lassie_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_handle_status_request_async_impl",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_lassie_controller_anyio.py",
      "name": "test_handle_status_request_async_impl",
      "status": "partial - missing schema"
    },
    "test_handle_status_request_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_handle_status_request_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_controller_anyio.py",
      "name": "test_handle_status_request_error",
      "status": "partial - missing schema"
    },
    "test_handle_storacha_to_ipfs_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storacha_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_handle_storacha_to_ipfs_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storacha_controller_anyio.py",
      "name": "test_handle_storacha_to_ipfs_request",
      "status": "partial - missing schema"
    },
    "test_handle_transfer_request_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_handle_transfer_request_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller_anyio.py",
      "name": "test_handle_transfer_request_async",
      "status": "partial - missing schema"
    },
    "test_handle_upload_request_form": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_s3_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_handle_upload_request_form",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_s3_controller.py",
      "name": "test_handle_upload_request_form",
      "status": "partial - missing schema"
    },
    "test_handle_webrtc_streaming": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_streaming_anyio.py",
      "has_implementation": true,
      "implementation": "test_handle_webrtc_streaming",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_streaming.py",
      "name": "test_handle_webrtc_streaming",
      "status": "partial - missing schema"
    },
    "test_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_comprehensive.py",
      "has_implementation": true,
      "implementation": "test_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_daemon_status_direct.py",
      "name": "test_health",
      "status": "partial - missing schema"
    },
    "test_health_check": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_health_check",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
      "name": "test_health_check",
      "status": "partial - missing schema"
    },
    "test_health_check_includes_daemon_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_daemon_management_anyio.py",
      "has_implementation": true,
      "implementation": "test_health_check_includes_daemon_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_daemon_management_anyio.py",
      "name": "test_health_check_includes_daemon_status",
      "status": "partial - missing schema"
    },
    "test_health_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server_anyio.py",
      "has_implementation": true,
      "implementation": "test_health_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_anyio_server.py",
      "name": "test_health_endpoint",
      "status": "partial - missing schema"
    },
    "test_health_monitoring": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_comprehensive.py",
      "has_implementation": true,
      "implementation": "test_health_monitoring",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_mcp_discovery_comprehensive.py",
      "name": "test_health_monitoring",
      "status": "partial - missing schema"
    },
    "test_high_level_api_compatibility": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns.py",
      "has_implementation": true,
      "implementation": "test_high_level_api_compatibility",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_ipns.py",
      "name": "test_high_level_api_compatibility",
      "status": "partial - missing schema"
    },
    "test_http_ipns_publish": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns.py",
      "has_implementation": true,
      "implementation": "test_http_ipns_publish",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_ipns.py",
      "name": "test_http_ipns_publish",
      "status": "partial - missing schema"
    },
    "test_http_stream_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_streaming.py",
      "has_implementation": true,
      "implementation": "test_http_stream_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/streaming/test_streaming_anyio.py",
      "name": "test_http_stream_endpoint",
      "status": "partial - missing schema"
    },
    "test_http_upload_stream_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_streaming.py",
      "has_implementation": true,
      "implementation": "test_http_upload_stream_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/streaming/test_streaming_anyio.py",
      "name": "test_http_upload_stream_endpoint",
      "status": "partial - missing schema"
    },
    "test_huggingface": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_hf_storacha.py",
      "has_implementation": true,
      "implementation": "test_huggingface",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_all_backends.py",
      "name": "test_huggingface",
      "status": "partial - missing schema"
    },
    "test_huggingface_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_huggingface_integration.py",
      "has_implementation": true,
      "implementation": "test_huggingface_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_huggingface_integration.py",
      "name": "test_huggingface_integration",
      "status": "partial - missing schema"
    },
    "test_huggingface_model_parity": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_controllers.py",
      "has_implementation": true,
      "implementation": "test_huggingface_model_parity",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
      "name": "test_huggingface_model_parity",
      "status": "partial - missing schema"
    },
    "test_huggingface_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server.py",
      "has_implementation": true,
      "implementation": "test_huggingface_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/ai_ml/test_huggingface.py",
      "name": "test_huggingface_status",
      "status": "partial - missing schema"
    },
    "test_huggingface_to_ipfs_download_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_model.py",
      "has_implementation": true,
      "implementation": "test_huggingface_to_ipfs_download_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
      "name": "test_huggingface_to_ipfs_download_error",
      "status": "partial - missing schema"
    },
    "test_huggingface_to_ipfs_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_huggingface_to_ipfs_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_huggingface_controller_anyio.py",
      "name": "test_huggingface_to_ipfs_endpoint",
      "status": "partial - missing schema"
    },
    "test_huggingface_to_ipfs_ipfs_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_model.py",
      "has_implementation": true,
      "implementation": "test_huggingface_to_ipfs_ipfs_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
      "name": "test_huggingface_to_ipfs_ipfs_error",
      "status": "partial - missing schema"
    },
    "test_huggingface_to_ipfs_missing_dependency": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_model.py",
      "has_implementation": true,
      "implementation": "test_huggingface_to_ipfs_missing_dependency",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
      "name": "test_huggingface_to_ipfs_missing_dependency",
      "status": "partial - missing schema"
    },
    "test_huggingface_to_ipfs_missing_filename": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_model.py",
      "has_implementation": true,
      "implementation": "test_huggingface_to_ipfs_missing_filename",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
      "name": "test_huggingface_to_ipfs_missing_filename",
      "status": "partial - missing schema"
    },
    "test_huggingface_to_ipfs_missing_repo_id": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_model.py",
      "has_implementation": true,
      "implementation": "test_huggingface_to_ipfs_missing_repo_id",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
      "name": "test_huggingface_to_ipfs_missing_repo_id",
      "status": "partial - missing schema"
    },
    "test_huggingface_to_ipfs_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_model.py",
      "has_implementation": true,
      "implementation": "test_huggingface_to_ipfs_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
      "name": "test_huggingface_to_ipfs_success",
      "status": "partial - missing schema"
    },
    "test_hyperparameter_tuning": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ai_ml_integrations.py",
      "has_implementation": true,
      "implementation": "test_hyperparameter_tuning",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ai/test_ai_ml_integrations.py",
      "name": "test_hyperparameter_tuning",
      "status": "partial - missing schema"
    },
    "test_identify_backend_operation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_auth.py",
      "has_implementation": true,
      "implementation": "test_identify_backend_operation",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/tests/test_auth.py",
      "name": "test_identify_backend_operation",
      "status": "partial - missing schema"
    },
    "test_image_data_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_data_science_integration.py",
      "has_implementation": true,
      "implementation": "test_image_data_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_data_science_integration.py",
      "name": "test_image_data_integration",
      "status": "partial - missing schema"
    },
    "test_import_ipfs_kit": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_tests.py",
      "has_implementation": true,
      "implementation": "test_import_ipfs_kit",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_tests.py",
      "name": "test_import_ipfs_kit",
      "status": "partial - missing schema"
    },
    "test_import_lotus_kit": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_tests.py",
      "has_implementation": true,
      "implementation": "test_import_lotus_kit",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_tests.py",
      "name": "test_import_lotus_kit",
      "status": "partial - missing schema"
    },
    "test_import_wallet_data": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_lotus_kit.py",
      "has_implementation": true,
      "implementation": "test_import_wallet_data",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_lotus_kit.py",
      "name": "test_import_wallet_data",
      "status": "partial - missing schema"
    },
    "test_init": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_init",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index.py",
      "name": "test_init",
      "status": "partial - missing schema"
    },
    "test_init_default": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_performance_metrics.py",
      "has_implementation": true,
      "implementation": "test_init_default",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/performance/test_performance_metrics.py",
      "name": "test_init_default",
      "status": "partial - missing schema"
    },
    "test_init_metadata_replication": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api_metadata_replication.py",
      "has_implementation": true,
      "implementation": "test_init_metadata_replication",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api_metadata_replication.py",
      "name": "test_init_metadata_replication",
      "status": "partial - missing schema"
    },
    "test_init_with_multiple_backends": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller.py",
      "has_implementation": true,
      "implementation": "test_init_with_multiple_backends",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
      "name": "test_init_with_multiple_backends",
      "status": "partial - missing schema"
    },
    "test_init_with_webrtc_support": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_controller.py",
      "has_implementation": true,
      "implementation": "test_init_with_webrtc_support",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_controller.py",
      "name": "test_init_with_webrtc_support",
      "status": "partial - missing schema"
    },
    "test_init_with_websocket_support": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_peer_websocket_controller.py",
      "has_implementation": true,
      "implementation": "test_init_with_websocket_support",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
      "name": "test_init_with_websocket_support",
      "status": "partial - missing schema"
    },
    "test_initialization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_peer_websocket_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_initialization",
      "implementation_file": "/home/barberb/ipfs_kit_py/tests/test_adaptive_optimizer.py",
      "name": "test_initialization",
      "status": "partial - missing schema"
    },
    "test_initialization_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_fixed_get_filesystem.py",
      "has_implementation": true,
      "implementation": "test_initialization_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index_additional.py",
      "name": "test_initialization_error",
      "status": "partial - missing schema"
    },
    "test_install": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_kit.py",
      "has_implementation": true,
      "implementation": "test_install",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "test_install",
      "status": "partial - missing schema"
    },
    "test_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_fs_integration.py",
      "has_implementation": true,
      "implementation": "test_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test_ipfs_fs_integration.py",
      "name": "test_integration",
      "status": "partial - missing schema"
    },
    "test_integration_mcp_server_ipns_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations.py",
      "has_implementation": true,
      "implementation": "test_integration_mcp_server_ipns_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
      "name": "test_integration_mcp_server_ipns_endpoints",
      "status": "partial - missing schema"
    },
    "test_invalid_cid_error_handling": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_error_scenarios.py",
      "has_implementation": true,
      "implementation": "test_invalid_cid_error_handling",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_error_scenarios.py",
      "name": "test_invalid_cid_error_handling",
      "status": "partial - missing schema"
    },
    "test_invalid_daemon_type_validation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_daemon_management_anyio.py",
      "has_implementation": true,
      "implementation": "test_invalid_daemon_type_validation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_daemon_management_anyio.py",
      "name": "test_invalid_daemon_type_validation",
      "status": "partial - missing schema"
    },
    "test_ipfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs.py",
      "has_implementation": true,
      "implementation": "test_ipfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs.py",
      "name": "test_ipfs",
      "status": "partial - missing schema"
    },
    "test_ipfs_add": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_tools.py",
      "has_implementation": true,
      "implementation": "test_ipfs_add",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_add.py",
      "name": "test_ipfs_add",
      "status": "partial - missing schema"
    },
    "test_ipfs_add_and_cat": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_mcp_server_tests.py",
      "has_implementation": true,
      "implementation": "test_ipfs_add_and_cat",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_mcp_server.py",
      "name": "test_ipfs_add_and_cat",
      "status": "partial - missing schema"
    },
    "test_ipfs_add_directory": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_add_directory",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "test_ipfs_add_directory",
      "status": "partial - missing schema"
    },
    "test_ipfs_add_method": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_enhanced_tests.py",
      "has_implementation": true,
      "implementation": "test_ipfs_add_method",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
      "name": "test_ipfs_add_method",
      "status": "partial - missing schema"
    },
    "test_ipfs_add_pin": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_add_pin",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "test_ipfs_add_pin",
      "status": "partial - missing schema"
    },
    "test_ipfs_api": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_direct_fix.py",
      "has_implementation": true,
      "implementation": "test_ipfs_api",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/implementation/mcp_direct_fix.py",
      "name": "test_ipfs_api",
      "status": "partial - missing schema"
    },
    "test_ipfs_backend": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_backend_fix.py",
      "has_implementation": true,
      "implementation": "test_ipfs_backend",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/tests/test_ipfs_backend.py",
      "name": "test_ipfs_backend",
      "status": "partial - missing schema"
    },
    "test_ipfs_backend_import": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_enhanced_tests.py",
      "has_implementation": true,
      "implementation": "test_ipfs_backend_import",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/ipfs/test_ipfs_client_fix.py",
      "name": "test_ipfs_backend_import",
      "status": "partial - missing schema"
    },
    "test_ipfs_backend_import_mechanism": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_dependency_fixed.py",
      "has_implementation": true,
      "implementation": "test_ipfs_backend_import_mechanism",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/test_ipfs_dependency_fixed.py",
      "name": "test_ipfs_backend_import_mechanism",
      "status": "partial - missing schema"
    },
    "test_ipfs_backend_initialization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_backend_fixed.py",
      "has_implementation": true,
      "implementation": "test_ipfs_backend_initialization",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/test_ipfs_backend_fixed.py",
      "name": "test_ipfs_backend_initialization",
      "status": "partial - missing schema"
    },
    "test_ipfs_basic_functionality": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_basic.py",
      "has_implementation": true,
      "implementation": "test_ipfs_basic_functionality",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_simple_tests.py",
      "name": "test_ipfs_basic_functionality",
      "status": "partial - missing schema"
    },
    "test_ipfs_cat": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_tools.py",
      "has_implementation": true,
      "implementation": "test_ipfs_cat",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "test_ipfs_cat",
      "status": "partial - missing schema"
    },
    "test_ipfs_cat_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_api_anyio.py",
      "has_implementation": true,
      "implementation": "test_ipfs_cat_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_anyio.py",
      "name": "test_ipfs_cat_endpoint",
      "status": "partial - missing schema"
    },
    "test_ipfs_cat_method": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_enhanced_tests.py",
      "has_implementation": true,
      "implementation": "test_ipfs_cat_method",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
      "name": "test_ipfs_cat_method",
      "status": "partial - missing schema"
    },
    "test_ipfs_cat_query": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_api_fixed.py",
      "has_implementation": true,
      "implementation": "test_ipfs_cat_query",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_fixed.py",
      "name": "test_ipfs_cat_query",
      "status": "partial - missing schema"
    },
    "test_ipfs_client_import": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_client_fix.py",
      "has_implementation": true,
      "implementation": "test_ipfs_client_import",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/ipfs/test_ipfs_client_fix.py",
      "name": "test_ipfs_client_import",
      "status": "partial - missing schema"
    },
    "test_ipfs_client_reconnection": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_error_scenarios.py",
      "has_implementation": true,
      "implementation": "test_ipfs_client_reconnection",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_error_scenarios.py",
      "name": "test_ipfs_client_reconnection",
      "status": "partial - missing schema"
    },
    "test_ipfs_cluster_ctl": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_ctl.py",
      "has_implementation": true,
      "implementation": "test_ipfs_cluster_ctl",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_ctl.py",
      "name": "test_ipfs_cluster_ctl",
      "status": "partial - missing schema"
    },
    "test_ipfs_cluster_follow": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_daemons.py",
      "has_implementation": true,
      "implementation": "test_ipfs_cluster_follow",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_daemons.py",
      "name": "test_ipfs_cluster_follow",
      "status": "partial - missing schema"
    },
    "test_ipfs_cluster_follow_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_controller_directly.py",
      "has_implementation": true,
      "implementation": "test_ipfs_cluster_follow_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_controller_directly.py",
      "name": "test_ipfs_cluster_follow_status",
      "status": "partial - missing schema"
    },
    "test_ipfs_cluster_follow_status_direct": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_status_integrated.py",
      "has_implementation": true,
      "implementation": "test_ipfs_cluster_follow_status_direct",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_status_integrated.py",
      "name": "test_ipfs_cluster_follow_status_direct",
      "status": "partial - missing schema"
    },
    "test_ipfs_cluster_service": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_cluster_service.py",
      "has_implementation": true,
      "implementation": "test_ipfs_cluster_service",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_cluster_service.py",
      "name": "test_ipfs_cluster_service",
      "status": "partial - missing schema"
    },
    "test_ipfs_cluster_service_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_controller_directly.py",
      "has_implementation": true,
      "implementation": "test_ipfs_cluster_service_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_controller_directly.py",
      "name": "test_ipfs_cluster_service_status",
      "status": "partial - missing schema"
    },
    "test_ipfs_connection_import": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_enhanced_tests.py",
      "has_implementation": true,
      "implementation": "test_ipfs_connection_import",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
      "name": "test_ipfs_connection_import",
      "status": "partial - missing schema"
    },
    "test_ipfs_controller": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_mini.py",
      "has_implementation": true,
      "implementation": "test_ipfs_controller",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_all_controllers.py",
      "name": "test_ipfs_controller",
      "status": "partial - missing schema"
    },
    "test_ipfs_controller_key_gen_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_controller_key_gen_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
      "name": "test_ipfs_controller_key_gen_endpoint",
      "status": "partial - missing schema"
    },
    "test_ipfs_controller_key_list_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_controller_key_list_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
      "name": "test_ipfs_controller_key_list_endpoint",
      "status": "partial - missing schema"
    },
    "test_ipfs_controller_name_publish_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_controller_name_publish_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
      "name": "test_ipfs_controller_name_publish_endpoint",
      "status": "partial - missing schema"
    },
    "test_ipfs_controller_name_resolve_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_controller_name_resolve_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
      "name": "test_ipfs_controller_name_resolve_endpoint",
      "status": "partial - missing schema"
    },
    "test_ipfs_daemon_start": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_daemon_start",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "test_ipfs_daemon_start",
      "status": "partial - missing schema"
    },
    "test_ipfs_daemon_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_enhanced_tests.py",
      "has_implementation": true,
      "implementation": "test_ipfs_daemon_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_backends/test_ipfs_backend.py",
      "name": "test_ipfs_daemon_status",
      "status": "partial - missing schema"
    },
    "test_ipfs_daemon_stop": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_daemon_stop",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "test_ipfs_daemon_stop",
      "status": "partial - missing schema"
    },
    "test_ipfs_dag_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_mcp_server_tests.py",
      "has_implementation": true,
      "implementation": "test_ipfs_dag_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_mcp_server.py",
      "name": "test_ipfs_dag_operations",
      "status": "partial - missing schema"
    },
    "test_ipfs_dht_provide": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_dht_provide",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "test_ipfs_dht_provide",
      "status": "partial - missing schema"
    },
    "test_ipfs_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controllers.py",
      "has_implementation": true,
      "implementation": "test_ipfs_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_controllers.py",
      "name": "test_ipfs_endpoints",
      "status": "partial - missing schema"
    },
    "test_ipfs_error_hierarchy": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_error_handling.py",
      "has_implementation": true,
      "implementation": "test_ipfs_error_hierarchy",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_error_handling.py",
      "name": "test_ipfs_error_hierarchy",
      "status": "partial - missing schema"
    },
    "test_ipfs_filesystem": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_final_mcp_server.py",
      "has_implementation": true,
      "implementation": "test_ipfs_filesystem",
      "implementation_file": "/home/barberb/ipfs_kit_py/test_final_mcp_server.py",
      "name": "test_ipfs_filesystem",
      "status": "partial - missing schema"
    },
    "test_ipfs_fs_cached_access": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_fsspec_mocked.py",
      "has_implementation": true,
      "implementation": "test_ipfs_fs_cached_access",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_fsspec_mocked.py",
      "name": "test_ipfs_fs_cached_access",
      "status": "partial - missing schema"
    },
    "test_ipfs_fs_journal_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_ipfs_fs_journal_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration.py",
      "name": "test_ipfs_fs_journal_integration",
      "status": "partial - missing schema"
    },
    "test_ipfs_fs_journal_integration_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controller_mocked_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_ipfs_fs_journal_integration_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_mocked_integration_anyio.py",
      "name": "test_ipfs_fs_journal_integration_async",
      "status": "partial - missing schema"
    },
    "test_ipfs_fs_ls": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_fsspec_mocked.py",
      "has_implementation": true,
      "implementation": "test_ipfs_fs_ls",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_fsspec_mocked.py",
      "name": "test_ipfs_fs_ls",
      "status": "partial - missing schema"
    },
    "test_ipfs_fs_path_to_cid": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_fsspec_mocked.py",
      "has_implementation": true,
      "implementation": "test_ipfs_fs_path_to_cid",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_fsspec_mocked.py",
      "name": "test_ipfs_fs_path_to_cid",
      "status": "partial - missing schema"
    },
    "test_ipfs_fs_pin": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_fsspec_mocked.py",
      "has_implementation": true,
      "implementation": "test_ipfs_fs_pin",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_fsspec_mocked.py",
      "name": "test_ipfs_fs_pin",
      "status": "partial - missing schema"
    },
    "test_ipfs_get": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_get",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "test_ipfs_get",
      "status": "partial - missing schema"
    },
    "test_ipfs_get_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_get_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "test_ipfs_get_config",
      "status": "partial - missing schema"
    },
    "test_ipfs_id": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_api_fixed.py",
      "has_implementation": true,
      "implementation": "test_ipfs_id",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_fixed.py",
      "name": "test_ipfs_id",
      "status": "partial - missing schema"
    },
    "test_ipfs_key_gen_async_functionality": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_ipfs_key_gen_async_functionality",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
      "name": "test_ipfs_key_gen_async_functionality",
      "status": "partial - missing schema"
    },
    "test_ipfs_key_gen_async_with_type_and_size": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_ipfs_key_gen_async_with_type_and_size",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
      "name": "test_ipfs_key_gen_async_with_type_and_size",
      "status": "partial - missing schema"
    },
    "test_ipfs_key_gen_functionality": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_key_gen_functionality",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
      "name": "test_ipfs_key_gen_functionality",
      "status": "partial - missing schema"
    },
    "test_ipfs_key_gen_with_type_and_size": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_key_gen_with_type_and_size",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
      "name": "test_ipfs_key_gen_with_type_and_size",
      "status": "partial - missing schema"
    },
    "test_ipfs_key_list_async_functionality": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_ipfs_key_list_async_functionality",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
      "name": "test_ipfs_key_list_async_functionality",
      "status": "partial - missing schema"
    },
    "test_ipfs_key_list_functionality": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_key_list_functionality",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
      "name": "test_ipfs_key_list_functionality",
      "status": "partial - missing schema"
    },
    "test_ipfs_kit_binary_path_creation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_first_run_initialization.py",
      "has_implementation": true,
      "implementation": "test_ipfs_kit_binary_path_creation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_first_run_initialization.py",
      "name": "test_ipfs_kit_binary_path_creation",
      "status": "partial - missing schema"
    },
    "test_ipfs_kit_import": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_kit.py",
      "has_implementation": true,
      "implementation": "test_ipfs_kit_import",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
      "name": "test_ipfs_kit_import",
      "status": "partial - missing schema"
    },
    "test_ipfs_kit_initialization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_enhanced_tests.py",
      "has_implementation": true,
      "implementation": "test_ipfs_kit_initialization",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
      "name": "test_ipfs_kit_initialization",
      "status": "partial - missing schema"
    },
    "test_ipfs_kit_initialization_download": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_binary_download.py",
      "has_implementation": true,
      "implementation": "test_ipfs_kit_initialization_download",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_binary_download.py",
      "name": "test_ipfs_kit_initialization_download",
      "status": "partial - missing schema"
    },
    "test_ipfs_kit_py_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_final_mcp_server.py",
      "has_implementation": true,
      "implementation": "test_ipfs_kit_py_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test_final_mcp_server.py",
      "name": "test_ipfs_kit_py_integration",
      "status": "partial - missing schema"
    },
    "test_ipfs_kit_uses_existing_path": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_first_run_initialization.py",
      "has_implementation": true,
      "implementation": "test_ipfs_kit_uses_existing_path",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_first_run_initialization.py",
      "name": "test_ipfs_kit_uses_existing_path",
      "status": "partial - missing schema"
    },
    "test_ipfs_ls_pinset": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_ls_pinset",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "test_ipfs_ls_pinset",
      "status": "partial - missing schema"
    },
    "test_ipfs_media_stream_track": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_streaming_anyio.py",
      "has_implementation": true,
      "implementation": "test_ipfs_media_stream_track",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_streaming.py",
      "name": "test_ipfs_media_stream_track",
      "status": "partial - missing schema"
    },
    "test_ipfs_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from debug_ipfs_model.py",
      "has_implementation": true,
      "implementation": "test_ipfs_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_mini.py",
      "name": "test_ipfs_model",
      "status": "partial - missing schema"
    },
    "test_ipfs_model_parity": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_controllers.py",
      "has_implementation": true,
      "implementation": "test_ipfs_model_parity",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
      "name": "test_ipfs_model_parity",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_publish": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_publish",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "test_ipfs_name_publish",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_publish_async_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_publish_async_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
      "name": "test_ipfs_name_publish_async_failure",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_publish_async_with_json_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_publish_async_with_json_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
      "name": "test_ipfs_name_publish_async_with_json_response",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_publish_async_with_key": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_publish_async_with_key",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
      "name": "test_ipfs_name_publish_async_with_key",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_publish_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_publish_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
      "name": "test_ipfs_name_publish_failure",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_publish_handles_bytes_stdout": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_comprehensive_fixes.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_publish_handles_bytes_stdout",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive_fixes.py",
      "name": "test_ipfs_name_publish_handles_bytes_stdout",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_publish_with_json_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_publish_with_json_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
      "name": "test_ipfs_name_publish_with_json_response",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_publish_with_key": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_publish_with_key",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
      "name": "test_ipfs_name_publish_with_key",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_resolve_async_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_resolve_async_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
      "name": "test_ipfs_name_resolve_async_failure",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_resolve_async_with_ipns_prefix_handling": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_resolve_async_with_ipns_prefix_handling",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
      "name": "test_ipfs_name_resolve_async_with_ipns_prefix_handling",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_resolve_async_with_nocache_parameter": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_resolve_async_with_nocache_parameter",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
      "name": "test_ipfs_name_resolve_async_with_nocache_parameter",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_resolve_async_with_recursive_parameter": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_resolve_async_with_recursive_parameter",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
      "name": "test_ipfs_name_resolve_async_with_recursive_parameter",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_resolve_async_with_string_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_resolve_async_with_string_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
      "name": "test_ipfs_name_resolve_async_with_string_response",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_resolve_async_with_timeout_parameter": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_resolve_async_with_timeout_parameter",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations_anyio.py",
      "name": "test_ipfs_name_resolve_async_with_timeout_parameter",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_resolve_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_resolve_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
      "name": "test_ipfs_name_resolve_failure",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_resolve_handles_bytes_stdout": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_comprehensive_fixes.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_resolve_handles_bytes_stdout",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive_fixes.py",
      "name": "test_ipfs_name_resolve_handles_bytes_stdout",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_resolve_handles_dict_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_name_resolve.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_resolve_handles_dict_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_name_resolve.py",
      "name": "test_ipfs_name_resolve_handles_dict_response",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_resolve_with_ipns_prefix_handling": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_resolve_with_ipns_prefix_handling",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
      "name": "test_ipfs_name_resolve_with_ipns_prefix_handling",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_resolve_with_nocache_parameter": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_resolve_with_nocache_parameter",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
      "name": "test_ipfs_name_resolve_with_nocache_parameter",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_resolve_with_recursive_parameter": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_resolve_with_recursive_parameter",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
      "name": "test_ipfs_name_resolve_with_recursive_parameter",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_resolve_with_string_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_resolve_with_string_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
      "name": "test_ipfs_name_resolve_with_string_response",
      "status": "partial - missing schema"
    },
    "test_ipfs_name_resolve_with_timeout_parameter": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_name_resolve_with_timeout_parameter",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipns_operations.py",
      "name": "test_ipfs_name_resolve_with_timeout_parameter",
      "status": "partial - missing schema"
    },
    "test_ipfs_object_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_mcp_server_tests.py",
      "has_implementation": true,
      "implementation": "test_ipfs_object_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_mcp_server.py",
      "name": "test_ipfs_object_operations",
      "status": "partial - missing schema"
    },
    "test_ipfs_pin": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_tools.py",
      "has_implementation": true,
      "implementation": "test_ipfs_pin",
      "implementation_file": "/home/barberb/ipfs_kit_py/test_mcp_tools.py",
      "name": "test_ipfs_pin",
      "status": "partial - missing schema"
    },
    "test_ipfs_pin_add": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_api_fixed.py",
      "has_implementation": true,
      "implementation": "test_ipfs_pin_add",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_fixed.py",
      "name": "test_ipfs_pin_add",
      "status": "partial - missing schema"
    },
    "test_ipfs_pin_add_query": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_api_fixed.py",
      "has_implementation": true,
      "implementation": "test_ipfs_pin_add_query",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_fixed.py",
      "name": "test_ipfs_pin_add_query",
      "status": "partial - missing schema"
    },
    "test_ipfs_pin_ls": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_api_fixed.py",
      "has_implementation": true,
      "implementation": "test_ipfs_pin_ls",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_fixed.py",
      "name": "test_ipfs_pin_ls",
      "status": "partial - missing schema"
    },
    "test_ipfs_pin_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_enhanced_tests.py",
      "has_implementation": true,
      "implementation": "test_ipfs_pin_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_mcp_server.py",
      "name": "test_ipfs_pin_operations",
      "status": "partial - missing schema"
    },
    "test_ipfs_pin_rm": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_api_fixed.py",
      "has_implementation": true,
      "implementation": "test_ipfs_pin_rm",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_fixed.py",
      "name": "test_ipfs_pin_rm",
      "status": "partial - missing schema"
    },
    "test_ipfs_pin_rm_query": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_api_fixed.py",
      "has_implementation": true,
      "implementation": "test_ipfs_pin_rm_query",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_fixed.py",
      "name": "test_ipfs_pin_rm_query",
      "status": "partial - missing schema"
    },
    "test_ipfs_py_import": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_backend_fixed.py",
      "has_implementation": true,
      "implementation": "test_ipfs_py_import",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/test_ipfs_dependency_fixed.py",
      "name": "test_ipfs_py_import",
      "status": "partial - missing schema"
    },
    "test_ipfs_remove_pin": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_remove_pin",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "test_ipfs_remove_pin",
      "status": "partial - missing schema"
    },
    "test_ipfs_specific_pin_methods": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_backend.py",
      "has_implementation": true,
      "implementation": "test_ipfs_specific_pin_methods",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_backends/test_ipfs_backend.py",
      "name": "test_ipfs_specific_pin_methods",
      "status": "partial - missing schema"
    },
    "test_ipfs_swarm_disconnect": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_swarm_disconnect",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "test_ipfs_swarm_disconnect",
      "status": "partial - missing schema"
    },
    "test_ipfs_swarm_methods_existence": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_enhanced_tests.py",
      "has_implementation": true,
      "implementation": "test_ipfs_swarm_methods_existence",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
      "name": "test_ipfs_swarm_methods_existence",
      "status": "partial - missing schema"
    },
    "test_ipfs_swarm_peers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_core_operations.py",
      "has_implementation": true,
      "implementation": "test_ipfs_swarm_peers",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_core_operations.py",
      "name": "test_ipfs_swarm_peers",
      "status": "partial - missing schema"
    },
    "test_ipfs_to_filecoin_import_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_model.py",
      "has_implementation": true,
      "implementation": "test_ipfs_to_filecoin_import_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_filecoin_model.py",
      "name": "test_ipfs_to_filecoin_import_failure",
      "status": "partial - missing schema"
    },
    "test_ipfs_to_filecoin_ipfs_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_model.py",
      "has_implementation": true,
      "implementation": "test_ipfs_to_filecoin_ipfs_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_filecoin_model.py",
      "name": "test_ipfs_to_filecoin_ipfs_failure",
      "status": "partial - missing schema"
    },
    "test_ipfs_to_huggingface_ipfs_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_model.py",
      "has_implementation": true,
      "implementation": "test_ipfs_to_huggingface_ipfs_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
      "name": "test_ipfs_to_huggingface_ipfs_error",
      "status": "partial - missing schema"
    },
    "test_ipfs_to_huggingface_missing_cid": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_model.py",
      "has_implementation": true,
      "implementation": "test_ipfs_to_huggingface_missing_cid",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
      "name": "test_ipfs_to_huggingface_missing_cid",
      "status": "partial - missing schema"
    },
    "test_ipfs_to_huggingface_missing_dependency": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_model.py",
      "has_implementation": true,
      "implementation": "test_ipfs_to_huggingface_missing_dependency",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
      "name": "test_ipfs_to_huggingface_missing_dependency",
      "status": "partial - missing schema"
    },
    "test_ipfs_to_huggingface_missing_repo_id": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_huggingface_model.py",
      "has_implementation": true,
      "implementation": "test_ipfs_to_huggingface_missing_repo_id",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_huggingface_model.py",
      "name": "test_ipfs_to_huggingface_missing_repo_id",
      "status": "partial - missing schema"
    },
    "test_ipfs_to_s3_ipfs_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_s3_model.py",
      "has_implementation": true,
      "implementation": "test_ipfs_to_s3_ipfs_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_s3_model.py",
      "name": "test_ipfs_to_s3_ipfs_error",
      "status": "partial - missing schema"
    },
    "test_ipfs_to_storacha_ipfs_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storacha_model.py",
      "has_implementation": true,
      "implementation": "test_ipfs_to_storacha_ipfs_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_storacha_model.py",
      "name": "test_ipfs_to_storacha_ipfs_error",
      "status": "partial - missing schema"
    },
    "test_ipfs_version": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server.py",
      "has_implementation": true,
      "implementation": "test_ipfs_version",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api.py",
      "name": "test_ipfs_version",
      "status": "partial - missing schema"
    },
    "test_ipfs_webrtc_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controller_mocked_integration.py",
      "has_implementation": true,
      "implementation": "test_ipfs_webrtc_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_mocked_integration.py",
      "name": "test_ipfs_webrtc_integration",
      "status": "partial - missing schema"
    },
    "test_ipfs_webrtc_integration_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controller_mocked_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_ipfs_webrtc_integration_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_mocked_integration_anyio.py",
      "name": "test_ipfs_webrtc_integration_async",
      "status": "partial - missing schema"
    },
    "test_ipget": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipget.py",
      "has_implementation": true,
      "implementation": "test_ipget",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipget.py",
      "name": "test_ipget",
      "status": "partial - missing schema"
    },
    "test_ipld_extension_initialization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipld_integration_with_kit.py",
      "has_implementation": true,
      "implementation": "test_ipld_extension_initialization",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_integration_with_kit.py",
      "name": "test_ipld_extension_initialization",
      "status": "partial - missing schema"
    },
    "test_is_backend_available": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_wal.py",
      "has_implementation": true,
      "implementation": "test_is_backend_available",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_wal.py",
      "name": "test_is_backend_available",
      "status": "partial - missing schema"
    },
    "test_isolation_mode": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server_anyio.py",
      "has_implementation": true,
      "implementation": "test_isolation_mode",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server_anyio.py",
      "name": "test_isolation_mode",
      "status": "partial - missing schema"
    },
    "test_issue_auth_token": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_authentication.py",
      "has_implementation": true,
      "implementation": "test_issue_auth_token",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_authentication.py",
      "name": "test_issue_auth_token",
      "status": "partial - missing schema"
    },
    "test_job_creation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ai_ml_integrations.py",
      "has_implementation": true,
      "implementation": "test_job_creation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ai/test_ai_ml_integrations.py",
      "name": "test_job_creation",
      "status": "partial - missing schema"
    },
    "test_join_paths": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "test_join_paths",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced.py",
      "name": "test_join_paths",
      "status": "partial - missing schema"
    },
    "test_json_add": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fixes.py",
      "has_implementation": true,
      "implementation": "test_json_add",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_fixes.py",
      "name": "test_json_add",
      "status": "partial - missing schema"
    },
    "test_jsonrpc_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from final_integration.py",
      "has_implementation": true,
      "implementation": "test_jsonrpc_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test_final_mcp_server.py",
      "name": "test_jsonrpc_endpoint",
      "status": "partial - missing schema"
    },
    "test_jsonrpc_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from simple_verify_mcp.py",
      "has_implementation": true,
      "implementation": "test_jsonrpc_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/simple_verify_mcp.py",
      "name": "test_jsonrpc_server",
      "status": "partial - missing schema"
    },
    "test_key_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_advanced.py",
      "has_implementation": true,
      "implementation": "test_key_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_ipfs_advanced.py",
      "name": "test_key_operations",
      "status": "partial - missing schema"
    },
    "test_kwargs_handling": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_fixed_get_filesystem.py",
      "has_implementation": true,
      "implementation": "test_kwargs_handling",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_integrated_get_filesystem.py",
      "name": "test_kwargs_handling",
      "status": "partial - missing schema"
    },
    "test_large_file_handling": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server.py",
      "has_implementation": true,
      "implementation": "test_large_file_handling",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_mcp_server.py",
      "name": "test_large_file_handling",
      "status": "partial - missing schema"
    },
    "test_lassie_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_lassie_integration.py",
      "has_implementation": true,
      "implementation": "test_lassie_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_lassie_integration.py",
      "name": "test_lassie_integration",
      "status": "partial - missing schema"
    },
    "test_lassie_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_lassie.py",
      "has_implementation": true,
      "implementation": "test_lassie_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_lassie.py",
      "name": "test_lassie_status",
      "status": "partial - missing schema"
    },
    "test_latency_tracking": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_tiered_storage.py",
      "has_implementation": true,
      "implementation": "test_latency_tracking",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_tiered_storage.py",
      "name": "test_latency_tracking",
      "status": "partial - missing schema"
    },
    "test_leader_election_process": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_distributed_coordination.py",
      "has_implementation": true,
      "implementation": "test_leader_election_process",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_distributed_coordination.py",
      "name": "test_leader_election_process",
      "status": "partial - missing schema"
    },
    "test_learning_from_outcomes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_routing_integration.py",
      "has_implementation": true,
      "implementation": "test_learning_from_outcomes",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_routing_system_integration.py",
      "name": "test_learning_from_outcomes",
      "status": "partial - missing schema"
    },
    "test_leecher_get_pinset": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_role_based_architecture.py",
      "has_implementation": true,
      "implementation": "test_leecher_get_pinset",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
      "name": "test_leecher_get_pinset",
      "status": "partial - missing schema"
    },
    "test_leecher_pin_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_role_based_architecture.py",
      "has_implementation": true,
      "implementation": "test_leecher_pin_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
      "name": "test_leecher_pin_operations",
      "status": "partial - missing schema"
    },
    "test_leecher_role": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_connection.py",
      "has_implementation": true,
      "implementation": "test_leecher_role",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_connection.py",
      "name": "test_leecher_role",
      "status": "partial - missing schema"
    },
    "test_libp2p_communication": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_communication.py",
      "has_implementation": true,
      "implementation": "test_libp2p_communication",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/network_tests/test_mcp_communication_anyio.py",
      "name": "test_libp2p_communication",
      "status": "partial - missing schema"
    },
    "test_libp2p_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_libp2p_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_libp2p_health",
      "status": "partial - missing schema"
    },
    "test_libp2p_health_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_server_integration.py",
      "has_implementation": true,
      "implementation": "test_libp2p_health_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_libp2p_server_integration.py",
      "name": "test_libp2p_health_endpoint",
      "status": "partial - missing schema"
    },
    "test_libp2p_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_server_integration.py",
      "has_implementation": true,
      "implementation": "test_libp2p_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_libp2p_server_integration.py",
      "name": "test_libp2p_model",
      "status": "partial - missing schema"
    },
    "test_list_connections": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc.py",
      "has_implementation": true,
      "implementation": "test_list_connections",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_webrtc.py",
      "name": "test_list_connections",
      "status": "partial - missing schema"
    },
    "test_list_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_tools.py",
      "has_implementation": true,
      "implementation": "test_list_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/test_mcp_tools.py",
      "name": "test_list_files",
      "status": "partial - missing schema"
    },
    "test_list_files_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_list_files_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
      "name": "test_list_files_endpoint",
      "status": "partial - missing schema"
    },
    "test_list_files_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_files_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_list_files_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_files_operations_anyio.py",
      "name": "test_list_files_error",
      "status": "partial - missing schema"
    },
    "test_list_known_peers_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_distributed_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_list_known_peers_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_distributed_controller_anyio.py",
      "name": "test_list_known_peers_async",
      "status": "partial - missing schema"
    },
    "test_list_message_handlers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_list_message_handlers",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_list_message_handlers",
      "status": "partial - missing schema"
    },
    "test_list_miners_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_model.py",
      "has_implementation": true,
      "implementation": "test_list_miners_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_filecoin_model.py",
      "name": "test_list_miners_success",
      "status": "partial - missing schema"
    },
    "test_list_pins": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_comprehensive.py",
      "has_implementation": true,
      "implementation": "test_list_pins",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive.py",
      "name": "test_list_pins",
      "status": "partial - missing schema"
    },
    "test_list_pins_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_list_pins_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
      "name": "test_list_pins_async",
      "status": "partial - missing schema"
    },
    "test_list_pins_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_list_pins_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
      "name": "test_list_pins_endpoint",
      "status": "partial - missing schema"
    },
    "test_list_prompts": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_server.py",
      "has_implementation": true,
      "implementation": "test_list_prompts",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
      "name": "test_list_prompts",
      "status": "partial - missing schema"
    },
    "test_list_tasks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_distributed.py",
      "has_implementation": true,
      "implementation": "test_list_tasks",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/network_tests/test_mcp_distributed.py",
      "name": "test_list_tasks",
      "status": "partial - missing schema"
    },
    "test_list_uploads": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storacha_mcp.py",
      "has_implementation": true,
      "implementation": "test_list_uploads",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_storacha_mcp.py",
      "name": "test_list_uploads",
      "status": "partial - missing schema"
    },
    "test_llm_context_generation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_integrated_search.py",
      "has_implementation": true,
      "implementation": "test_llm_context_generation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_integrated_search.py",
      "name": "test_llm_context_generation",
      "status": "partial - missing schema"
    },
    "test_load_dataset": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_dataloader.py",
      "has_implementation": true,
      "implementation": "test_load_dataset",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
      "name": "test_load_dataset",
      "status": "partial - missing schema"
    },
    "test_load_multimodal_dataset": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_dataloader.py",
      "has_implementation": true,
      "implementation": "test_load_multimodal_dataset",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
      "name": "test_load_multimodal_dataset",
      "status": "partial - missing schema"
    },
    "test_lock_file_handling": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_comprehensive.py",
      "has_implementation": true,
      "implementation": "test_lock_file_handling",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive.py",
      "name": "test_lock_file_handling",
      "status": "partial - missing schema"
    },
    "test_lock_file_no_removal": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_lock_handling.py",
      "has_implementation": true,
      "implementation": "test_lock_file_no_removal",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_lock_handling.py",
      "name": "test_lock_file_no_removal",
      "status": "partial - missing schema"
    },
    "test_log_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server_anyio.py",
      "has_implementation": true,
      "implementation": "test_log_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_server_anyio.py",
      "name": "test_log_endpoint",
      "status": "partial - missing schema"
    },
    "test_lotus_daemon_management": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_lotus_daemon.py",
      "has_implementation": true,
      "implementation": "test_lotus_daemon_management",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_lotus_daemon.py",
      "name": "test_lotus_daemon_management",
      "status": "partial - missing schema"
    },
    "test_lotus_kit_available": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_kit.py",
      "has_implementation": true,
      "implementation": "test_lotus_kit_available",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_fix_verification.py",
      "name": "test_lotus_kit_available",
      "status": "partial - missing schema"
    },
    "test_lotus_kit_available_constant": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_enhanced_tests.py",
      "has_implementation": true,
      "implementation": "test_lotus_kit_available_constant",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
      "name": "test_lotus_kit_available_constant",
      "status": "partial - missing schema"
    },
    "test_lotus_kit_initialization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_lotus_functionality.py",
      "has_implementation": true,
      "implementation": "test_lotus_kit_initialization",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_lotus_functionality.py",
      "name": "test_lotus_kit_initialization",
      "status": "partial - missing schema"
    },
    "test_lowlevel_server_lifespan": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_lifespan.py",
      "has_implementation": true,
      "implementation": "test_lowlevel_server_lifespan",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/test_lifespan.py",
      "name": "test_lowlevel_server_lifespan",
      "status": "partial - missing schema"
    },
    "test_ls_multi_gw": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_async.py",
      "has_implementation": true,
      "implementation": "test_ls_multi_gw",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/ipfsspec/test/test_async.py",
      "name": "test_ls_multi_gw",
      "status": "partial - missing schema"
    },
    "test_make_directory_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_make_directory_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
      "name": "test_make_directory_async",
      "status": "partial - missing schema"
    },
    "test_make_directory_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_files_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_make_directory_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_files_operations_anyio.py",
      "name": "test_make_directory_error",
      "status": "partial - missing schema"
    },
    "test_make_directory_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_files_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_make_directory_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_files_operations_anyio.py",
      "name": "test_make_directory_success",
      "status": "partial - missing schema"
    },
    "test_master_get_pinset": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_role_based_architecture.py",
      "has_implementation": true,
      "implementation": "test_master_get_pinset",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
      "name": "test_master_get_pinset",
      "status": "partial - missing schema"
    },
    "test_master_peer_listing": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_role_based_architecture.py",
      "has_implementation": true,
      "implementation": "test_master_peer_listing",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
      "name": "test_master_peer_listing",
      "status": "partial - missing schema"
    },
    "test_master_pin_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_role_based_architecture.py",
      "has_implementation": true,
      "implementation": "test_master_pin_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
      "name": "test_master_pin_operations",
      "status": "partial - missing schema"
    },
    "test_master_role": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_connection.py",
      "has_implementation": true,
      "implementation": "test_master_role",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_connection.py",
      "name": "test_master_role",
      "status": "partial - missing schema"
    },
    "test_mcp_api_feature_completeness": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_controllers.py",
      "has_implementation": true,
      "implementation": "test_mcp_api_feature_completeness",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
      "name": "test_mcp_api_feature_completeness",
      "status": "partial - missing schema"
    },
    "test_mcp_cli_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_cli.py",
      "has_implementation": true,
      "implementation": "test_mcp_cli_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_cli.py",
      "name": "test_mcp_cli_integration",
      "status": "partial - missing schema"
    },
    "test_mcp_content_replication_info": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_tiered_cache_anyio.py",
      "has_implementation": true,
      "implementation": "test_mcp_content_replication_info",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_tiered_cache.py",
      "name": "test_mcp_content_replication_info",
      "status": "partial - missing schema"
    },
    "test_mcp_discovery_controller_anyio_import": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_anyio.py",
      "has_implementation": true,
      "implementation": "test_mcp_discovery_controller_anyio_import",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_controller_import.py",
      "name": "test_mcp_discovery_controller_anyio_import",
      "status": "partial - missing schema"
    },
    "test_mcp_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_paths.py",
      "has_implementation": true,
      "implementation": "test_mcp_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_paths.py",
      "name": "test_mcp_endpoints",
      "status": "partial - missing schema"
    },
    "test_mcp_ensure_replication": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_tiered_cache_anyio.py",
      "has_implementation": true,
      "implementation": "test_mcp_ensure_replication",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_tiered_cache.py",
      "name": "test_mcp_ensure_replication",
      "status": "partial - missing schema"
    },
    "test_mcp_fixes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fixes.py",
      "has_implementation": true,
      "implementation": "test_mcp_fixes",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_fixes.py",
      "name": "test_mcp_fixes",
      "status": "partial - missing schema"
    },
    "test_mcp_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_tiered_storage_backends.py",
      "has_implementation": true,
      "implementation": "test_mcp_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_tiered_storage_backends.py",
      "name": "test_mcp_integration",
      "status": "partial - missing schema"
    },
    "test_mcp_ipfs_methods": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_methods.py",
      "has_implementation": true,
      "implementation": "test_mcp_ipfs_methods",
      "implementation_file": "/home/barberb/ipfs_kit_py/test_ipfs_methods.py",
      "name": "test_mcp_ipfs_methods",
      "status": "partial - missing schema"
    },
    "test_mcp_lock_handling": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_lock_handling.py",
      "has_implementation": true,
      "implementation": "test_mcp_lock_handling",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_lock_handling.py",
      "name": "test_mcp_lock_handling",
      "status": "partial - missing schema"
    },
    "test_mcp_replication_api_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_tiered_cache_anyio.py",
      "has_implementation": true,
      "implementation": "test_mcp_replication_api_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_tiered_cache.py",
      "name": "test_mcp_replication_api_endpoint",
      "status": "partial - missing schema"
    },
    "test_mcp_replication_thresholds": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_tiered_cache_anyio.py",
      "has_implementation": true,
      "implementation": "test_mcp_replication_thresholds",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_tiered_cache.py",
      "name": "test_mcp_replication_thresholds",
      "status": "partial - missing schema"
    },
    "test_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage.py",
      "has_implementation": true,
      "implementation": "test_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p.py",
      "name": "test_mcp_server",
      "status": "partial - missing schema"
    },
    "test_mcp_server_initialization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_controllers.py",
      "has_implementation": true,
      "implementation": "test_mcp_server_initialization",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
      "name": "test_mcp_server_initialization",
      "status": "partial - missing schema"
    },
    "test_mcp_server_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_comprehensive.py",
      "has_implementation": true,
      "implementation": "test_mcp_server_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/scripts/test_ai_ml_integration.py",
      "name": "test_mcp_server_integration",
      "status": "partial - missing schema"
    },
    "test_mcp_shutdown": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_shutdown.py",
      "has_implementation": true,
      "implementation": "test_mcp_shutdown",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_shutdown.py",
      "name": "test_mcp_shutdown",
      "status": "partial - missing schema"
    },
    "test_mcp_special_test_keys": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_tiered_cache_anyio.py",
      "has_implementation": true,
      "implementation": "test_mcp_special_test_keys",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_tiered_cache.py",
      "name": "test_mcp_special_test_keys",
      "status": "partial - missing schema"
    },
    "test_mcp_tools_registration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_fs_integration.py",
      "has_implementation": true,
      "implementation": "test_mcp_tools_registration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test_ipfs_fs_integration.py",
      "name": "test_mcp_tools_registration",
      "status": "partial - missing schema"
    },
    "test_metadata_only_search": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_integrated_search.py",
      "has_implementation": true,
      "implementation": "test_metadata_only_search",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_integrated_search.py",
      "name": "test_metadata_only_search",
      "status": "partial - missing schema"
    },
    "test_method": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api.py",
      "has_implementation": true,
      "implementation": "test_method",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
      "name": "test_method",
      "status": "partial - missing schema"
    },
    "test_method_call_forwarding": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_normalized_ipfs.py",
      "has_implementation": true,
      "implementation": "test_method_call_forwarding",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_method_normalizer.py",
      "name": "test_method_call_forwarding",
      "status": "partial - missing schema"
    },
    "test_method_normalization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_normalized_ipfs.py",
      "has_implementation": true,
      "implementation": "test_method_normalization",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_method_normalizer.py",
      "name": "test_method_normalization",
      "status": "partial - missing schema"
    },
    "test_method_normalization_stress": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_normalized_ipfs_anyio.py",
      "has_implementation": true,
      "implementation": "test_method_normalization_stress",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_normalized_ipfs.py",
      "name": "test_method_normalization_stress",
      "status": "partial - missing schema"
    },
    "test_metrics_collection": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_fsspec_metrics.py",
      "has_implementation": true,
      "implementation": "test_metrics_collection",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_fsspec_metrics.py",
      "name": "test_metrics_collection",
      "status": "partial - missing schema"
    },
    "test_metrics_collector_records_requests": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_blue_green_deployment.py",
      "has_implementation": true,
      "implementation": "test_metrics_collector_records_requests",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_blue_green_deployment.py",
      "name": "test_metrics_collector_records_requests",
      "status": "partial - missing schema"
    },
    "test_metrics_creation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_metrics_extension.py",
      "has_implementation": true,
      "implementation": "test_metrics_creation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_metrics_extension.py",
      "name": "test_metrics_creation",
      "status": "partial - missing schema"
    },
    "test_middleware_error_handling": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_error_scenarios.py",
      "has_implementation": true,
      "implementation": "test_middleware_error_handling",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_error_scenarios.py",
      "name": "test_middleware_error_handling",
      "status": "partial - missing schema"
    },
    "test_migrate_between_tiers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_backends_interop.py",
      "has_implementation": true,
      "implementation": "test_migrate_between_tiers",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_backends_interop.py",
      "name": "test_migrate_between_tiers",
      "status": "partial - missing schema"
    },
    "test_migrate_by_list": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_to_s3.py",
      "has_implementation": true,
      "implementation": "test_migrate_by_list",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_s3_to_ipfs.py",
      "name": "test_migrate_by_list",
      "status": "partial - missing schema"
    },
    "test_migrate_by_list_with_string_cids": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_to_s3.py",
      "has_implementation": true,
      "implementation": "test_migrate_by_list_with_string_cids",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_to_s3.py",
      "name": "test_migrate_by_list_with_string_cids",
      "status": "partial - missing schema"
    },
    "test_migrate_content_direct_implementation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller.py",
      "has_implementation": true,
      "implementation": "test_migrate_content_direct_implementation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
      "name": "test_migrate_content_direct_implementation",
      "status": "partial - missing schema"
    },
    "test_migrate_content_with_bridge": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller.py",
      "has_implementation": true,
      "implementation": "test_migrate_content_with_bridge",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
      "name": "test_migrate_content_with_bridge",
      "status": "partial - missing schema"
    },
    "test_migrate_directory": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_to_storacha.py",
      "has_implementation": true,
      "implementation": "test_migrate_directory",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_to_storacha.py",
      "name": "test_migrate_directory",
      "status": "partial - missing schema"
    },
    "test_migrate_empty_list": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_to_storacha.py",
      "has_implementation": true,
      "implementation": "test_migrate_empty_list",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_s3_to_ipfs.py",
      "name": "test_migrate_empty_list",
      "status": "partial - missing schema"
    },
    "test_migrate_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_to_s3.py",
      "has_implementation": true,
      "implementation": "test_migrate_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_s3_to_ipfs.py",
      "name": "test_migrate_file",
      "status": "partial - missing schema"
    },
    "test_migrate_file_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_to_s3.py",
      "has_implementation": true,
      "implementation": "test_migrate_file_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_to_s3.py",
      "name": "test_migrate_file_failure",
      "status": "partial - missing schema"
    },
    "test_migrate_file_no_pin": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storacha_to_ipfs.py",
      "has_implementation": true,
      "implementation": "test_migrate_file_no_pin",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_s3_to_ipfs.py",
      "name": "test_migrate_file_no_pin",
      "status": "partial - missing schema"
    },
    "test_migrate_file_with_filename": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_to_s3.py",
      "has_implementation": true,
      "implementation": "test_migrate_file_with_filename",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_to_s3.py",
      "name": "test_migrate_file_with_filename",
      "status": "partial - missing schema"
    },
    "test_migration_imports": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_migration_controller.py",
      "has_implementation": true,
      "implementation": "test_migration_imports",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/verify_migration_controller.py",
      "name": "test_migration_imports",
      "status": "partial - missing schema"
    },
    "test_migration_with_verification_failure": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller.py",
      "has_implementation": true,
      "implementation": "test_migration_with_verification_failure",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
      "name": "test_migration_with_verification_failure",
      "status": "partial - missing schema"
    },
    "test_minimum_replication_factor_enforcement": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_metadata_replication.py",
      "has_implementation": true,
      "implementation": "test_minimum_replication_factor_enforcement",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication.py",
      "name": "test_minimum_replication_factor_enforcement",
      "status": "partial - missing schema"
    },
    "test_minimum_replication_factor_enforcement_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_metadata_replication_anyio.py",
      "has_implementation": true,
      "implementation": "test_minimum_replication_factor_enforcement_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication_anyio.py",
      "name": "test_minimum_replication_factor_enforcement_async",
      "status": "partial - missing schema"
    },
    "test_mock_tiered_cache_manager_with_all_backends": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_tiered_cache_anyio.py",
      "has_implementation": true,
      "implementation": "test_mock_tiered_cache_manager_with_all_backends",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_tiered_cache.py",
      "name": "test_mock_tiered_cache_manager_with_all_backends",
      "status": "partial - missing schema"
    },
    "test_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_model.py",
      "has_implementation": true,
      "implementation": "test_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_model_direct.py",
      "name": "test_model",
      "status": "partial - missing schema"
    },
    "test_model_classes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_api.py",
      "has_implementation": true,
      "implementation": "test_model_classes",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_api.py",
      "name": "test_model_classes",
      "status": "partial - missing schema"
    },
    "test_model_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ai_ml_integrations.py",
      "has_implementation": true,
      "implementation": "test_model_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ai/test_ai_ml_integrations.py",
      "name": "test_model_endpoint",
      "status": "partial - missing schema"
    },
    "test_model_enforces_replication_policy": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_metadata_replication.py",
      "has_implementation": true,
      "implementation": "test_model_enforces_replication_policy",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication.py",
      "name": "test_model_enforces_replication_policy",
      "status": "partial - missing schema"
    },
    "test_model_enforces_replication_policy_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_metadata_replication_anyio.py",
      "has_implementation": true,
      "implementation": "test_model_enforces_replication_policy_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication_anyio.py",
      "name": "test_model_enforces_replication_policy_async",
      "status": "partial - missing schema"
    },
    "test_model_initialize_with_replication": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_metadata_replication.py",
      "has_implementation": true,
      "implementation": "test_model_initialize_with_replication",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_metadata_replication_anyio.py",
      "name": "test_model_initialize_with_replication",
      "status": "partial - missing schema"
    },
    "test_model_initialize_with_replication_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_metadata_replication_anyio.py",
      "has_implementation": true,
      "implementation": "test_model_initialize_with_replication_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_metadata_replication_anyio.py",
      "name": "test_model_initialize_with_replication_async",
      "status": "partial - missing schema"
    },
    "test_model_ipns_publish": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipns.py",
      "has_implementation": true,
      "implementation": "test_model_ipns_publish",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_ipns.py",
      "name": "test_model_ipns_publish",
      "status": "partial - missing schema"
    },
    "test_model_passes_buffer_params_to_track": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_stream_buffer_optimization.py",
      "has_implementation": true,
      "implementation": "test_model_passes_buffer_params_to_track",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_stream_buffer_optimization.py",
      "name": "test_model_passes_buffer_params_to_track",
      "status": "partial - missing schema"
    },
    "test_model_registry_class": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_dependency_handling.py",
      "has_implementation": true,
      "implementation": "test_model_registry_class",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_dependency_handling.py",
      "name": "test_model_registry_class",
      "status": "partial - missing schema"
    },
    "test_model_with_normalized_ipfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_normalized_ipfs_anyio.py",
      "has_implementation": true,
      "implementation": "test_model_with_normalized_ipfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_normalized_ipfs.py",
      "name": "test_model_with_normalized_ipfs",
      "status": "partial - missing schema"
    },
    "test_monitor_startup_and_shutdown": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_daemon_health_monitor.py",
      "has_implementation": true,
      "implementation": "test_monitor_startup_and_shutdown",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_daemon_health_monitor.py",
      "name": "test_monitor_startup_and_shutdown",
      "status": "partial - missing schema"
    },
    "test_monitoring": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "test_monitoring",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/scripts/test_ai_ml_integration.py",
      "name": "test_monitoring",
      "status": "partial - missing schema"
    },
    "test_move_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fs_journal_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_move_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_fs_journal_controller_anyio.py",
      "name": "test_move_async",
      "status": "partial - missing schema"
    },
    "test_move_content_batch": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "test_move_content_batch",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced.py",
      "name": "test_move_content_batch",
      "status": "partial - missing schema"
    },
    "test_move_file_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_move_file_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
      "name": "test_move_file_async",
      "status": "partial - missing schema"
    },
    "test_move_file_with_parents": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_enhanced_files_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_move_file_with_parents",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
      "name": "test_move_file_with_parents",
      "status": "partial - missing schema"
    },
    "test_multiaddr_manipulation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_multiaddress.py",
      "has_implementation": true,
      "implementation": "test_multiaddr_manipulation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_multiaddress.py",
      "name": "test_multiaddr_manipulation",
      "status": "partial - missing schema"
    },
    "test_multiaddr_string_conversion": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_multiaddress.py",
      "has_implementation": true,
      "implementation": "test_multiaddr_string_conversion",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_multiaddress.py",
      "name": "test_multiaddr_string_conversion",
      "status": "partial - missing schema"
    },
    "test_name_publish": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_advanced.py",
      "has_implementation": true,
      "implementation": "test_name_publish",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipns_model.py",
      "name": "test_name_publish",
      "status": "partial - missing schema"
    },
    "test_new_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_endpoints.py",
      "has_implementation": true,
      "implementation": "test_new_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_endpoints.py",
      "name": "test_new_endpoints",
      "status": "partial - missing schema"
    },
    "test_no_available_backends": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_algorithms.py",
      "has_implementation": true,
      "implementation": "test_no_available_backends",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_algorithms.py",
      "name": "test_no_available_backends",
      "status": "partial - missing schema"
    },
    "test_no_lock_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_lock_handling_simple.py",
      "has_implementation": true,
      "implementation": "test_no_lock_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_lock_handling_simple.py",
      "name": "test_no_lock_file",
      "status": "partial - missing schema"
    },
    "test_node_initialization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_role_based_architecture.py",
      "has_implementation": true,
      "implementation": "test_node_initialization",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
      "name": "test_node_initialization",
      "status": "partial - missing schema"
    },
    "test_non_ascii_description": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_server.py",
      "has_implementation": true,
      "implementation": "test_non_ascii_description",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
      "name": "test_non_ascii_description",
      "status": "partial - missing schema"
    },
    "test_normal_startup": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_lock_handling.py",
      "has_implementation": true,
      "implementation": "test_normal_startup",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_lock_handling.py",
      "name": "test_normal_startup",
      "status": "partial - missing schema"
    },
    "test_object_new": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_advanced.py",
      "has_implementation": true,
      "implementation": "test_object_new",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_ipfs_advanced.py",
      "name": "test_object_new",
      "status": "partial - missing schema"
    },
    "test_object_put": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_advanced.py",
      "has_implementation": true,
      "implementation": "test_object_put",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_ipfs_advanced.py",
      "name": "test_object_put",
      "status": "partial - missing schema"
    },
    "test_open": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api.py",
      "has_implementation": true,
      "implementation": "test_open",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
      "name": "test_open",
      "status": "partial - missing schema"
    },
    "test_operation_error_type_classification": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_error_handling.py",
      "has_implementation": true,
      "implementation": "test_operation_error_type_classification",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_error_handling.py",
      "name": "test_operation_error_type_classification",
      "status": "partial - missing schema"
    },
    "test_operation_failure_propagates": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_filecoin_model.py",
      "has_implementation": true,
      "implementation": "test_operation_failure_propagates",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_filecoin_model.py",
      "name": "test_operation_failure_propagates",
      "status": "partial - missing schema"
    },
    "test_optional_context": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_server.py",
      "has_implementation": true,
      "implementation": "test_optional_context",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
      "name": "test_optional_context",
      "status": "partial - missing schema"
    },
    "test_other_controllers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_endpoints.py",
      "has_implementation": true,
      "implementation": "test_other_controllers",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_endpoints.py",
      "name": "test_other_controllers",
      "status": "partial - missing schema"
    },
    "test_pandas_parquet_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_data_science_integration.py",
      "has_implementation": true,
      "implementation": "test_pandas_parquet_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_data_science_integration.py",
      "name": "test_pandas_parquet_integration",
      "status": "partial - missing schema"
    },
    "test_parquet_dataset_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_data_science_integration.py",
      "has_implementation": true,
      "implementation": "test_parquet_dataset_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_data_science_integration.py",
      "name": "test_parquet_dataset_integration",
      "status": "partial - missing schema"
    },
    "test_partitioning": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_wal.py",
      "has_implementation": true,
      "implementation": "test_partitioning",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_wal.py",
      "name": "test_partitioning",
      "status": "partial - missing schema"
    },
    "test_peer_info_from_dict": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_peer_websocket_anyio.py",
      "has_implementation": true,
      "implementation": "test_peer_info_from_dict",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_anyio.py",
      "name": "test_peer_info_from_dict",
      "status": "partial - missing schema"
    },
    "test_peer_info_initialization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_peer_websocket_anyio.py",
      "has_implementation": true,
      "implementation": "test_peer_info_initialization",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_anyio.py",
      "name": "test_peer_info_initialization",
      "status": "partial - missing schema"
    },
    "test_peer_initialization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_connection.py",
      "has_implementation": true,
      "implementation": "test_peer_initialization",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_connection.py",
      "name": "test_peer_initialization",
      "status": "partial - missing schema"
    },
    "test_peer_websocket_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_api.py",
      "has_implementation": true,
      "implementation": "test_peer_websocket_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api.py",
      "name": "test_peer_websocket_status",
      "status": "partial - missing schema"
    },
    "test_perform_with_retry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_py_mocked.py",
      "has_implementation": true,
      "implementation": "test_perform_with_retry",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
      "name": "test_perform_with_retry",
      "status": "partial - missing schema"
    },
    "test_persistence_metrics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_component_monitoring.py",
      "has_implementation": true,
      "implementation": "test_persistence_metrics",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_component_monitoring.py",
      "name": "test_persistence_metrics",
      "status": "partial - missing schema"
    },
    "test_pin_add": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_kit_mocked.py",
      "has_implementation": true,
      "implementation": "test_pin_add",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
      "name": "test_pin_add",
      "status": "partial - missing schema"
    },
    "test_pin_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_comprehensive.py",
      "has_implementation": true,
      "implementation": "test_pin_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_normalized_ipfs.py",
      "name": "test_pin_content",
      "status": "partial - missing schema"
    },
    "test_pin_content_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_pin_content_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
      "name": "test_pin_content_async",
      "status": "partial - missing schema"
    },
    "test_pin_content_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_pin_content_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
      "name": "test_pin_content_endpoint",
      "status": "partial - missing schema"
    },
    "test_pin_content_simulation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_model_parquet_cache.py",
      "has_implementation": true,
      "implementation": "test_pin_content_simulation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ipfs/test_ipfs_model_parquet_cache.py",
      "name": "test_pin_content_simulation",
      "status": "partial - missing schema"
    },
    "test_pin_ls": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_kit_mocked.py",
      "has_implementation": true,
      "implementation": "test_pin_ls",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
      "name": "test_pin_ls",
      "status": "partial - missing schema"
    },
    "test_pin_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fixes.py",
      "has_implementation": true,
      "implementation": "test_pin_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/integration/test_mcp_fixes.py",
      "name": "test_pin_operations",
      "status": "partial - missing schema"
    },
    "test_pin_rm": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_kit_mocked.py",
      "has_implementation": true,
      "implementation": "test_pin_rm",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
      "name": "test_pin_rm",
      "status": "partial - missing schema"
    },
    "test_ping_peer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_distributed_endpoints.py",
      "has_implementation": true,
      "implementation": "test_ping_peer",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_distributed_endpoints.py",
      "name": "test_ping_peer",
      "status": "partial - missing schema"
    },
    "test_post_apply_policy": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_post_apply_policy",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller_anyio.py",
      "name": "test_post_apply_policy",
      "status": "partial - missing schema"
    },
    "test_post_verify_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_post_verify_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller_anyio.py",
      "name": "test_post_verify_content",
      "status": "partial - missing schema"
    },
    "test_problematic_methods_local": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_anyio_integration.py",
      "has_implementation": true,
      "implementation": "test_problematic_methods_local",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_anyio_integration.py",
      "name": "test_problematic_methods_local",
      "status": "partial - missing schema"
    },
    "test_progressive_fetch": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_stream_buffer_optimization.py",
      "has_implementation": true,
      "implementation": "test_progressive_fetch",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_stream_buffer_optimization.py",
      "name": "test_progressive_fetch",
      "status": "partial - missing schema"
    },
    "test_prometheus_integration_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_telemetry_api_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_prometheus_integration_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_telemetry_api_integration_anyio.py",
      "name": "test_prometheus_integration_async",
      "status": "partial - missing schema"
    },
    "test_prompt_decorator": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_server.py",
      "has_implementation": true,
      "implementation": "test_prompt_decorator",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
      "name": "test_prompt_decorator",
      "status": "partial - missing schema"
    },
    "test_prompt_decorator_with_description": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_server.py",
      "has_implementation": true,
      "implementation": "test_prompt_decorator_with_description",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
      "name": "test_prompt_decorator_with_description",
      "status": "partial - missing schema"
    },
    "test_protocol_registration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_protocol_registration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_integration_anyio.py",
      "name": "test_protocol_registration",
      "status": "partial - missing schema"
    },
    "test_provider_finding_via_ipfskit": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_connection.py",
      "has_implementation": true,
      "implementation": "test_provider_finding_via_ipfskit",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_connection.py",
      "name": "test_provider_finding_via_ipfskit",
      "status": "partial - missing schema"
    },
    "test_publish": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api.py",
      "has_implementation": true,
      "implementation": "test_publish",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
      "name": "test_publish",
      "status": "partial - missing schema"
    },
    "test_publish_metadata_index": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_metadata_index_integration.py",
      "has_implementation": true,
      "implementation": "test_publish_metadata_index",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_metadata_index_integration.py",
      "name": "test_publish_metadata_index",
      "status": "partial - missing schema"
    },
    "test_pubsub_get_peers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_pubsub_get_peers",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_pubsub_get_peers",
      "status": "partial - missing schema"
    },
    "test_pubsub_get_topics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_pubsub_get_topics",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_pubsub_get_topics",
      "status": "partial - missing schema"
    },
    "test_pubsub_publish": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_pubsub_publish",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_pubsub_publish",
      "status": "partial - missing schema"
    },
    "test_pubsub_subscribe": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_pubsub_subscribe",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_pubsub_subscribe",
      "status": "partial - missing schema"
    },
    "test_pubsub_unsubscribe": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_pubsub_unsubscribe",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_pubsub_unsubscribe",
      "status": "partial - missing schema"
    },
    "test_put_in_tier_all_backends": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_backends_interop.py",
      "has_implementation": true,
      "implementation": "test_put_in_tier_all_backends",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_backends_interop.py",
      "name": "test_put_in_tier_all_backends",
      "status": "partial - missing schema"
    },
    "test_pyarrow_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_data_science_integration.py",
      "has_implementation": true,
      "implementation": "test_pyarrow_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_data_science_integration.py",
      "name": "test_pyarrow_integration",
      "status": "partial - missing schema"
    },
    "test_pydantic_model_function": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_tool_manager.py",
      "has_implementation": true,
      "implementation": "test_pydantic_model_function",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_tool_manager.py",
      "name": "test_pydantic_model_function",
      "status": "partial - missing schema"
    },
    "test_query_pins": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_graphql_api.py",
      "has_implementation": true,
      "implementation": "test_query_pins",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_graphql_api.py",
      "name": "test_query_pins",
      "status": "partial - missing schema"
    },
    "test_read_chunk_permission_check": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_permissions_integration.py",
      "has_implementation": true,
      "implementation": "test_read_chunk_permission_check",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_permissions_integration.py",
      "name": "test_read_chunk_permission_check",
      "status": "partial - missing schema"
    },
    "test_read_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_tools.py",
      "has_implementation": true,
      "implementation": "test_read_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/test_mcp_tools.py",
      "name": "test_read_file",
      "status": "partial - missing schema"
    },
    "test_read_file_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_enhanced_files_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_read_file_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
      "name": "test_read_file_error",
      "status": "partial - missing schema"
    },
    "test_read_file_with_offset_and_count": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_enhanced_files_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_read_file_with_offset_and_count",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
      "name": "test_read_file_with_offset_and_count",
      "status": "partial - missing schema"
    },
    "test_record_and_use_performance_metrics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_integration.py",
      "has_implementation": true,
      "implementation": "test_record_and_use_performance_metrics",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_integration.py",
      "name": "test_record_and_use_performance_metrics",
      "status": "partial - missing schema"
    },
    "test_record_connection_attempt": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_peer_websocket_anyio.py",
      "has_implementation": true,
      "implementation": "test_record_connection_attempt",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_anyio.py",
      "name": "test_record_connection_attempt",
      "status": "partial - missing schema"
    },
    "test_record_failed_operation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_metrics.py",
      "has_implementation": true,
      "implementation": "test_record_failed_operation",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_metrics.py",
      "name": "test_record_failed_operation",
      "status": "partial - missing schema"
    },
    "test_record_outcome": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_routing_system_integration.py",
      "has_implementation": true,
      "implementation": "test_record_outcome",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_routing_system_integration.py",
      "name": "test_record_outcome",
      "status": "partial - missing schema"
    },
    "test_record_usage": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_adaptive_optimizer.py",
      "has_implementation": true,
      "implementation": "test_record_usage",
      "implementation_file": "/home/barberb/ipfs_kit_py/tests/test_adaptive_optimizer.py",
      "name": "test_record_usage",
      "status": "partial - missing schema"
    },
    "test_recovery_from_wal": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_replication_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_recovery_from_wal",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_replication_integration_anyio.py",
      "name": "test_recovery_from_wal",
      "status": "partial - missing schema"
    },
    "test_register_message_handler": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_register_message_handler",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_register_message_handler",
      "status": "partial - missing schema"
    },
    "test_register_node": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_distributed.py",
      "has_implementation": true,
      "implementation": "test_register_node",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_distributed_controller_fastapi.py",
      "name": "test_register_node",
      "status": "partial - missing schema"
    },
    "test_register_peer_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_metadata_replication.py",
      "has_implementation": true,
      "implementation": "test_register_peer_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_metadata_replication_anyio.py",
      "name": "test_register_peer_endpoint",
      "status": "partial - missing schema"
    },
    "test_register_routes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_register_routes",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
      "name": "test_register_routes",
      "status": "partial - missing schema"
    },
    "test_register_server_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_register_server_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "test_register_server_async",
      "status": "partial - missing schema"
    },
    "test_register_wal_commands": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_cli_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_register_wal_commands",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_cli_integration_anyio.py",
      "name": "test_register_wal_commands",
      "status": "partial - missing schema"
    },
    "test_remove_credential_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_credential_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_remove_credential_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_credential_controller_anyio.py",
      "name": "test_remove_credential_async",
      "status": "partial - missing schema"
    },
    "test_remove_credentials": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_credential_controller.py",
      "has_implementation": true,
      "implementation": "test_remove_credentials",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_credential_controller.py",
      "name": "test_remove_credentials",
      "status": "partial - missing schema"
    },
    "test_remove_directory_recursive": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_enhanced_files_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_remove_directory_recursive",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
      "name": "test_remove_directory_recursive",
      "status": "partial - missing schema"
    },
    "test_remove_file_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_remove_file_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
      "name": "test_remove_file_async",
      "status": "partial - missing schema"
    },
    "test_replicate_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_bridge_model.py",
      "has_implementation": true,
      "implementation": "test_replicate_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_bridge_model.py",
      "name": "test_replicate_content",
      "status": "partial - missing schema"
    },
    "test_replicate_webrtc_metadata_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_metadata_replication.py",
      "has_implementation": true,
      "implementation": "test_replicate_webrtc_metadata_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication.py",
      "name": "test_replicate_webrtc_metadata_endpoint",
      "status": "partial - missing schema"
    },
    "test_replicate_webrtc_metadata_endpoint_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_metadata_replication_anyio.py",
      "has_implementation": true,
      "implementation": "test_replicate_webrtc_metadata_endpoint_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_metadata_replication_anyio.py",
      "name": "test_replicate_webrtc_metadata_endpoint_async",
      "status": "partial - missing schema"
    },
    "test_replication_policy": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_backends_interop.py",
      "has_implementation": true,
      "implementation": "test_replication_policy",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_backends_interop.py",
      "name": "test_replication_policy",
      "status": "partial - missing schema"
    },
    "test_replication_policy_thresholds": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_tiered_cache.py",
      "has_implementation": true,
      "implementation": "test_replication_policy_thresholds",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_tiered_cache.py",
      "name": "test_replication_policy_thresholds",
      "status": "partial - missing schema"
    },
    "test_reset": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_reset",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_reset",
      "status": "partial - missing schema"
    },
    "test_reset_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_reset_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_discovery_controller_anyio.py",
      "name": "test_reset_async",
      "status": "partial - missing schema"
    },
    "test_resource_mismatched_params": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_server.py",
      "has_implementation": true,
      "implementation": "test_resource_mismatched_params",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
      "name": "test_resource_mismatched_params",
      "status": "partial - missing schema"
    },
    "test_resource_multiple_mismatched_params": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_server.py",
      "has_implementation": true,
      "implementation": "test_resource_multiple_mismatched_params",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
      "name": "test_resource_multiple_mismatched_params",
      "status": "partial - missing schema"
    },
    "test_resource_template_edge_cases": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_141_resource_templates.py",
      "has_implementation": true,
      "implementation": "test_resource_template_edge_cases",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/issues/test_141_resource_templates.py",
      "name": "test_resource_template_edge_cases",
      "status": "partial - missing schema"
    },
    "test_resource_with_params": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_server.py",
      "has_implementation": true,
      "implementation": "test_resource_with_params",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
      "name": "test_resource_with_params",
      "status": "partial - missing schema"
    },
    "test_resource_with_untyped_params": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_server.py",
      "has_implementation": true,
      "implementation": "test_resource_with_untyped_params",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
      "name": "test_resource_with_untyped_params",
      "status": "partial - missing schema"
    },
    "test_result_dictionary_pattern": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_error_handling.py",
      "has_implementation": true,
      "implementation": "test_result_dictionary_pattern",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_error_handling.py",
      "name": "test_result_dictionary_pattern",
      "status": "partial - missing schema"
    },
    "test_resume_operation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_enhanced_resumable.py",
      "has_implementation": true,
      "implementation": "test_resume_operation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced_resumable.py",
      "name": "test_resume_operation",
      "status": "partial - missing schema"
    },
    "test_retrieve_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_retrieve_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_retrieve_content",
      "status": "partial - missing schema"
    },
    "test_retrieve_content_info": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_retrieve_content_info",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_retrieve_content_info",
      "status": "partial - missing schema"
    },
    "test_retry_exhaustion": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_error_scenarios.py",
      "has_implementation": true,
      "implementation": "test_retry_exhaustion",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_error_scenarios.py",
      "name": "test_retry_exhaustion",
      "status": "partial - missing schema"
    },
    "test_retry_with_demo_method": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_auto_retry.py",
      "has_implementation": true,
      "implementation": "test_retry_with_demo_method",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_auto_retry.py",
      "name": "test_retry_with_demo_method",
      "status": "partial - missing schema"
    },
    "test_return_mock_parameter": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_fixed_get_filesystem.py",
      "has_implementation": true,
      "implementation": "test_return_mock_parameter",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_integrated_get_filesystem.py",
      "name": "test_return_mock_parameter",
      "status": "partial - missing schema"
    },
    "test_role_based_behavior": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_kit_mocked.py",
      "has_implementation": true,
      "implementation": "test_role_based_behavior",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_kit_mocked.py",
      "name": "test_role_based_behavior",
      "status": "partial - missing schema"
    },
    "test_role_specific_daemon_monitoring": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_daemon_health_monitor.py",
      "has_implementation": true,
      "implementation": "test_role_specific_daemon_monitoring",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_daemon_health_monitor.py",
      "name": "test_role_specific_daemon_monitoring",
      "status": "partial - missing schema"
    },
    "test_role_specific_shutdown": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_role_based_architecture.py",
      "has_implementation": true,
      "implementation": "test_role_specific_shutdown",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
      "name": "test_role_specific_shutdown",
      "status": "partial - missing schema"
    },
    "test_role_switching": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_role_based_architecture.py",
      "has_implementation": true,
      "implementation": "test_role_switching",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
      "name": "test_role_switching",
      "status": "partial - missing schema"
    },
    "test_route_registration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_controller.py",
      "has_implementation": true,
      "implementation": "test_route_registration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
      "name": "test_route_registration",
      "status": "partial - missing schema"
    },
    "test_route_registration_without_websocket": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_peer_websocket_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_route_registration_without_websocket",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_peer_websocket_controller_anyio.py",
      "name": "test_route_registration_without_websocket",
      "status": "partial - missing schema"
    },
    "test_run_benchmark": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc.py",
      "has_implementation": true,
      "implementation": "test_run_benchmark",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_webrtc.py",
      "name": "test_run_benchmark",
      "status": "partial - missing schema"
    },
    "test_run_ipfs_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_py_mocked.py",
      "has_implementation": true,
      "implementation": "test_run_ipfs_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
      "name": "test_run_ipfs_command",
      "status": "partial - missing schema"
    },
    "test_run_ipfs_command_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_py_mocked.py",
      "has_implementation": true,
      "implementation": "test_run_ipfs_command_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
      "name": "test_run_ipfs_command_error",
      "status": "partial - missing schema"
    },
    "test_run_ipfs_command_raw_output": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_py_mocked.py",
      "has_implementation": true,
      "implementation": "test_run_ipfs_command_raw_output",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
      "name": "test_run_ipfs_command_raw_output",
      "status": "partial - missing schema"
    },
    "test_run_ipfs_command_timeout": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_py_mocked.py",
      "has_implementation": true,
      "implementation": "test_run_ipfs_command_timeout",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_py_mocked.py",
      "name": "test_run_ipfs_command_timeout",
      "status": "partial - missing schema"
    },
    "test_s3_connection": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_local_s3.py",
      "has_implementation": true,
      "implementation": "test_s3_connection",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_local_s3.py",
      "name": "test_s3_connection",
      "status": "partial - missing schema"
    },
    "test_s3_controller_http_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_controllers.py",
      "has_implementation": true,
      "implementation": "test_s3_controller_http_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
      "name": "test_s3_controller_http_endpoints",
      "status": "partial - missing schema"
    },
    "test_s3_model_parity": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_controllers.py",
      "has_implementation": true,
      "implementation": "test_s3_model_parity",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
      "name": "test_s3_model_parity",
      "status": "partial - missing schema"
    },
    "test_s3_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_s3.py",
      "has_implementation": true,
      "implementation": "test_s3_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_s3.py",
      "name": "test_s3_status",
      "status": "partial - missing schema"
    },
    "test_s3_to_ipfs_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_s3_model.py",
      "has_implementation": true,
      "implementation": "test_s3_to_ipfs_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_s3_model.py",
      "name": "test_s3_to_ipfs_success",
      "status": "partial - missing schema"
    },
    "test_save_car": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipld_additional_coverage.py",
      "has_implementation": true,
      "implementation": "test_save_car",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_ipld_additional_coverage.py",
      "name": "test_save_car",
      "status": "partial - missing schema"
    },
    "test_scikit_learn_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_data_science_integration.py",
      "has_implementation": true,
      "implementation": "test_scikit_learn_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_data_science_integration.py",
      "name": "test_scikit_learn_integration",
      "status": "partial - missing schema"
    },
    "test_seaborn_visualization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_data_science_integration.py",
      "has_implementation": true,
      "implementation": "test_seaborn_visualization",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_data_science_integration.py",
      "name": "test_seaborn_visualization",
      "status": "partial - missing schema"
    },
    "test_search_imports": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_search_integration.py",
      "has_implementation": true,
      "implementation": "test_search_imports",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/verify_search_integration.py",
      "name": "test_search_imports",
      "status": "partial - missing schema"
    },
    "test_search_module_exists": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_search.py",
      "has_implementation": true,
      "implementation": "test_search_module_exists",
      "implementation_file": "/home/barberb/ipfs_kit_py/tests/integration/search/test_search.py",
      "name": "test_search_module_exists",
      "status": "partial - missing schema"
    },
    "test_search_text_error_handling": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_arrow_metadata_index_additional.py",
      "has_implementation": true,
      "implementation": "test_search_text_error_handling",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index_additional.py",
      "name": "test_search_text_error_handling",
      "status": "partial - missing schema"
    },
    "test_select_backend_for_small_document": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_integration.py",
      "has_implementation": true,
      "implementation": "test_select_backend_for_small_document",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_integration.py",
      "name": "test_select_backend_for_small_document",
      "status": "partial - missing schema"
    },
    "test_select_backend_for_write": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_algorithms.py",
      "has_implementation": true,
      "implementation": "test_select_backend_for_write",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_algorithms.py",
      "name": "test_select_backend_for_write",
      "status": "partial - missing schema"
    },
    "test_select_backend_with_analyzer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_algorithms.py",
      "has_implementation": true,
      "implementation": "test_select_backend_with_analyzer",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_algorithms.py",
      "name": "test_select_backend_with_analyzer",
      "status": "partial - missing schema"
    },
    "test_select_backend_with_client_ip": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_algorithms.py",
      "has_implementation": true,
      "implementation": "test_select_backend_with_client_ip",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_algorithms.py",
      "name": "test_select_backend_with_client_ip",
      "status": "partial - missing schema"
    },
    "test_select_backend_with_strategy": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_router.py",
      "has_implementation": true,
      "implementation": "test_select_backend_with_strategy",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/routing/tests/test_router.py",
      "name": "test_select_backend_with_strategy",
      "status": "partial - missing schema"
    },
    "test_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_server_response.py",
      "has_implementation": true,
      "implementation": "test_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_server_response.py",
      "name": "test_server",
      "status": "partial - missing schema"
    },
    "test_server_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server.py",
      "has_implementation": true,
      "implementation": "test_server_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_server_health",
      "status": "partial - missing schema"
    },
    "test_server_initialization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server_anyio.py",
      "has_implementation": true,
      "implementation": "test_server_initialization",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_anyio.py",
      "name": "test_server_initialization",
      "status": "partial - missing schema"
    },
    "test_server_initialization_with_normalized_ipfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_normalized_ipfs_anyio.py",
      "has_implementation": true,
      "implementation": "test_server_initialization_with_normalized_ipfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_normalized_ipfs_anyio.py",
      "name": "test_server_initialization_with_normalized_ipfs",
      "status": "partial - missing schema"
    },
    "test_server_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_integration.py",
      "has_implementation": true,
      "implementation": "test_server_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_integration.py",
      "name": "test_server_integration",
      "status": "partial - missing schema"
    },
    "test_server_routes_registration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_metadata_replication.py",
      "has_implementation": true,
      "implementation": "test_server_routes_registration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_metadata_replication_anyio.py",
      "name": "test_server_routes_registration",
      "status": "partial - missing schema"
    },
    "test_server_status": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_server_integration.py",
      "has_implementation": true,
      "implementation": "test_server_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller.py",
      "name": "test_server_status",
      "status": "partial - missing schema"
    },
    "test_server_tracking": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_controller.py",
      "has_implementation": true,
      "implementation": "test_server_tracking",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_controller.py",
      "name": "test_server_tracking",
      "status": "partial - missing schema"
    },
    "test_set_quality": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc.py",
      "has_implementation": true,
      "implementation": "test_set_quality",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_webrtc.py",
      "name": "test_set_quality",
      "status": "partial - missing schema"
    },
    "test_shuffled_batch_iteration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_dataloader.py",
      "has_implementation": true,
      "implementation": "test_shuffled_batch_iteration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
      "name": "test_shuffled_batch_iteration",
      "status": "partial - missing schema"
    },
    "test_shutdown": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_peer_websocket_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_shutdown",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_peer_websocket_controller_anyio.py",
      "name": "test_shutdown",
      "status": "partial - missing schema"
    },
    "test_simple_echo": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_examples.py",
      "has_implementation": true,
      "implementation": "test_simple_echo",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/test_examples.py",
      "name": "test_simple_echo",
      "status": "partial - missing schema"
    },
    "test_simulate_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_telemetry_api_integration.py",
      "has_implementation": true,
      "implementation": "test_simulate_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_telemetry_api_integration.py",
      "name": "test_simulate_operations",
      "status": "partial - missing schema"
    },
    "test_simulation_functions_directly": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_normalized_ipfs_anyio.py",
      "has_implementation": true,
      "implementation": "test_simulation_functions_directly",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_normalized_ipfs.py",
      "name": "test_simulation_functions_directly",
      "status": "partial - missing schema"
    },
    "test_simulation_mode": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_mfs_operations.py",
      "has_implementation": true,
      "implementation": "test_simulation_mode",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_mfs_operations.py",
      "name": "test_simulation_mode",
      "status": "partial - missing schema"
    },
    "test_skip_wal_parameter": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_skip_wal_parameter",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_integration.py",
      "name": "test_skip_wal_parameter",
      "status": "partial - missing schema"
    },
    "test_sse_connection": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from diagnose_vscode_extension.py",
      "has_implementation": true,
      "implementation": "test_sse_connection",
      "implementation_file": "/home/barberb/ipfs_kit_py/diagnose_vscode_extension.py",
      "name": "test_sse_connection",
      "status": "partial - missing schema"
    },
    "test_sse_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_vscode_mcp_integration.py",
      "has_implementation": true,
      "implementation": "test_sse_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/archive/mcp_start_scripts/verify_sse_endpoints.py",
      "name": "test_sse_endpoint",
      "status": "partial - missing schema"
    },
    "test_stale_lock_file_without_removal": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_lock_handling_simple.py",
      "has_implementation": true,
      "implementation": "test_stale_lock_file_without_removal",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_lock_handling_simple.py",
      "name": "test_stale_lock_file_without_removal",
      "status": "partial - missing schema"
    },
    "test_start_daemon_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_daemon_management_anyio.py",
      "has_implementation": true,
      "implementation": "test_start_daemon_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_daemon_management_anyio.py",
      "name": "test_start_daemon_endpoint",
      "status": "partial - missing schema"
    },
    "test_start_peer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_start_peer",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_start_peer",
      "status": "partial - missing schema"
    },
    "test_start_resumable_read_with_permissions": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_permissions_integration.py",
      "has_implementation": true,
      "implementation": "test_start_resumable_read_with_permissions",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_permissions_integration.py",
      "name": "test_start_resumable_read_with_permissions",
      "status": "partial - missing schema"
    },
    "test_start_resumable_write": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_enhanced_resumable.py",
      "has_implementation": true,
      "implementation": "test_start_resumable_write",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced_resumable.py",
      "name": "test_start_resumable_write",
      "status": "partial - missing schema"
    },
    "test_start_resumable_write_permission_denied": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_permissions_integration.py",
      "has_implementation": true,
      "implementation": "test_start_resumable_write_permission_denied",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_permissions_integration.py",
      "name": "test_start_resumable_write_permission_denied",
      "status": "partial - missing schema"
    },
    "test_start_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_peer_websocket_controller.py",
      "has_implementation": true,
      "implementation": "test_start_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_peer_websocket_controller.py",
      "name": "test_start_server",
      "status": "partial - missing schema"
    },
    "test_start_server_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_peer_websocket_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_start_server_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_peer_websocket_controller_anyio.py",
      "name": "test_start_server_endpoint",
      "status": "partial - missing schema"
    },
    "test_start_server_exception": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_peer_websocket_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_start_server_exception",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_peer_websocket_controller_anyio.py",
      "name": "test_start_server_exception",
      "status": "partial - missing schema"
    },
    "test_start_stream": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_controller.py",
      "has_implementation": true,
      "implementation": "test_start_stream",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_controller.py",
      "name": "test_start_stream",
      "status": "partial - missing schema"
    },
    "test_stat_file_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_files_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_stat_file_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_files_operations_anyio.py",
      "name": "test_stat_file_success",
      "status": "partial - missing schema"
    },
    "test_state_operation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_distributed.py",
      "has_implementation": true,
      "implementation": "test_state_operation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/network_tests/test_mcp_distributed.py",
      "name": "test_state_operation",
      "status": "partial - missing schema"
    },
    "test_static_files": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_integration.py",
      "has_implementation": true,
      "implementation": "test_static_files",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_integration.py",
      "name": "test_static_files",
      "status": "partial - missing schema"
    },
    "test_statistics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_wal.py",
      "has_implementation": true,
      "implementation": "test_statistics",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_wal.py",
      "name": "test_statistics",
      "status": "partial - missing schema"
    },
    "test_stats_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_stats_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
      "name": "test_stats_endpoint",
      "status": "partial - missing schema"
    },
    "test_status_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_filecoin_integration.py",
      "has_implementation": true,
      "implementation": "test_status_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_filecoin_integration.py",
      "name": "test_status_success",
      "status": "partial - missing schema"
    },
    "test_stop_daemon_monitor_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_daemon_management_anyio.py",
      "has_implementation": true,
      "implementation": "test_stop_daemon_monitor_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_daemon_management_anyio.py",
      "name": "test_stop_daemon_monitor_endpoint",
      "status": "partial - missing schema"
    },
    "test_stop_peer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_stop_peer",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_stop_peer",
      "status": "partial - missing schema"
    },
    "test_stop_server_exception": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_peer_websocket_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_stop_server_exception",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_peer_websocket_controller_anyio.py",
      "name": "test_stop_server_exception",
      "status": "partial - missing schema"
    },
    "test_stop_streaming": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_fix_detailed.py",
      "has_implementation": true,
      "implementation": "test_stop_streaming",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_fix_detailed.py",
      "name": "test_stop_streaming",
      "status": "partial - missing schema"
    },
    "test_storacha": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_all_backends.py",
      "has_implementation": true,
      "implementation": "test_storacha",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_all_backends.py",
      "name": "test_storacha",
      "status": "partial - missing schema"
    },
    "test_storacha_credentials": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storacha_mcp.py",
      "has_implementation": true,
      "implementation": "test_storacha_credentials",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_storacha_mcp.py",
      "name": "test_storacha_credentials",
      "status": "partial - missing schema"
    },
    "test_storacha_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_all_storacha.py",
      "has_implementation": true,
      "implementation": "test_storacha_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_all_storacha.py",
      "name": "test_storacha_integration",
      "status": "partial - missing schema"
    },
    "test_storacha_model_parity": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_controllers.py",
      "has_implementation": true,
      "implementation": "test_storacha_model_parity",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/test_mcp_storage_controllers.py",
      "name": "test_storacha_model_parity",
      "status": "partial - missing schema"
    },
    "test_storacha_to_ipfs_success": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storacha_model.py",
      "has_implementation": true,
      "implementation": "test_storacha_to_ipfs_success",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_storacha_model.py",
      "name": "test_storacha_to_ipfs_success",
      "status": "partial - missing schema"
    },
    "test_storacha_to_ipfs_validation_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storacha_model.py",
      "has_implementation": true,
      "implementation": "test_storacha_to_ipfs_validation_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_storacha_model.py",
      "name": "test_storacha_to_ipfs_validation_error",
      "status": "partial - missing schema"
    },
    "test_storage_api_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from storage_controller_anyio_example.py",
      "has_implementation": true,
      "implementation": "test_storage_api_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/storage_controller_anyio_example.py",
      "name": "test_storage_api_async",
      "status": "partial - missing schema"
    },
    "test_storage_backends": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_api_fixed.py",
      "has_implementation": true,
      "implementation": "test_storage_backends",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/server/test_mcp_api_fixed.py",
      "name": "test_storage_backends",
      "status": "partial - missing schema"
    },
    "test_storage_controllers_initialization_normal": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_controllers.py",
      "has_implementation": true,
      "implementation": "test_storage_controllers_initialization_normal",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_controllers.py",
      "name": "test_storage_controllers_initialization_normal",
      "status": "partial - missing schema"
    },
    "test_storage_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_mcp_server_tests.py",
      "has_implementation": true,
      "implementation": "test_storage_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_mcp_server_tests.py",
      "name": "test_storage_health",
      "status": "partial - missing schema"
    },
    "test_storage_status_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_mcp_server_tests.py",
      "has_implementation": true,
      "implementation": "test_storage_status_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_mcp_server_tests.py",
      "name": "test_storage_status_endpoints",
      "status": "partial - missing schema"
    },
    "test_storage_type_enum": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from run_enhanced_tests.py",
      "has_implementation": true,
      "implementation": "test_storage_type_enum",
      "implementation_file": "/home/barberb/ipfs_kit_py/run_enhanced_tests.py",
      "name": "test_storage_type_enum",
      "status": "partial - missing schema"
    },
    "test_storage_wal_with_pytest": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_wal.py",
      "has_implementation": true,
      "implementation": "test_storage_wal_with_pytest",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_storage_wal.py",
      "name": "test_storage_wal_with_pytest",
      "status": "partial - missing schema"
    },
    "test_store_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_udm_extension.py",
      "has_implementation": true,
      "implementation": "test_store_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_udm_extension.py",
      "name": "test_store_content",
      "status": "partial - missing schema"
    },
    "test_store_metadata_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_metadata_replication.py",
      "has_implementation": true,
      "implementation": "test_store_metadata_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_metadata_replication_anyio.py",
      "name": "test_store_metadata_endpoint",
      "status": "partial - missing schema"
    },
    "test_store_metadata_endpoint_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_metadata_replication_anyio.py",
      "has_implementation": true,
      "implementation": "test_store_metadata_endpoint_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_metadata_replication_anyio.py",
      "name": "test_store_metadata_endpoint_async",
      "status": "partial - missing schema"
    },
    "test_stream_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_fix.py",
      "has_implementation": true,
      "implementation": "test_stream_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_fix.py",
      "name": "test_stream_content",
      "status": "partial - missing schema"
    },
    "test_stream_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_stream_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_webrtc_controller_anyio.py",
      "name": "test_stream_endpoint",
      "status": "partial - missing schema"
    },
    "test_stream_media": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_streaming.py",
      "has_implementation": true,
      "implementation": "test_stream_media",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/streaming/test_streaming_anyio.py",
      "name": "test_stream_media",
      "status": "partial - missing schema"
    },
    "test_stream_media_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_streaming.py",
      "has_implementation": true,
      "implementation": "test_stream_media_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/streaming/test_streaming_anyio.py",
      "name": "test_stream_media_async",
      "status": "partial - missing schema"
    },
    "test_stream_to_ipfs_performance": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_streaming_performance.py",
      "has_implementation": true,
      "implementation": "test_stream_to_ipfs_performance",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/performance/test_streaming_performance_anyio.py",
      "name": "test_stream_to_ipfs_performance",
      "status": "partial - missing schema"
    },
    "test_streaming_imports": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_streaming.py",
      "has_implementation": true,
      "implementation": "test_streaming_imports",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/verify_streaming.py",
      "name": "test_streaming_imports",
      "status": "partial - missing schema"
    },
    "test_swarm_peers": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_kit_mocked.py",
      "has_implementation": true,
      "implementation": "test_swarm_peers",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_kit_mocked.py",
      "name": "test_swarm_peers",
      "status": "partial - missing schema"
    },
    "test_sync_local_to_mfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_enhanced.py",
      "has_implementation": true,
      "implementation": "test_sync_local_to_mfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced.py",
      "name": "test_sync_local_to_mfs",
      "status": "partial - missing schema"
    },
    "test_sync_thread_main": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_arrow_metadata_index_additional.py",
      "has_implementation": true,
      "implementation": "test_sync_thread_main",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index_additional.py",
      "name": "test_sync_thread_main",
      "status": "partial - missing schema"
    },
    "test_task_creation_and_distribution": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_distributed_coordination.py",
      "has_implementation": true,
      "implementation": "test_task_creation_and_distribution",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_distributed_coordination.py",
      "name": "test_task_creation_and_distribution",
      "status": "partial - missing schema"
    },
    "test_task_management": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_migration_controller.py",
      "has_implementation": true,
      "implementation": "test_task_management",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/verify_migration_controller.py",
      "name": "test_task_management",
      "status": "partial - missing schema"
    },
    "test_task_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_distributed_controller.py",
      "has_implementation": true,
      "implementation": "test_task_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_distributed_controller.py",
      "name": "test_task_operations",
      "status": "partial - missing schema"
    },
    "test_template_to_resource_conversion": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_server.py",
      "has_implementation": true,
      "implementation": "test_template_to_resource_conversion",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
      "name": "test_template_to_resource_conversion",
      "status": "partial - missing schema"
    },
    "test_tier_demotion": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_tiered_storage.py",
      "has_implementation": true,
      "implementation": "test_tier_demotion",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_tiered_storage.py",
      "name": "test_tier_demotion",
      "status": "partial - missing schema"
    },
    "test_tier_movement_to_storacha": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_tiered_storage_backends.py",
      "has_implementation": true,
      "implementation": "test_tier_movement_to_storacha",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_tiered_storage_backends.py",
      "name": "test_tier_movement_to_storacha",
      "status": "partial - missing schema"
    },
    "test_tls_connection_setup": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_authentication.py",
      "has_implementation": true,
      "implementation": "test_tls_connection_setup",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_authentication.py",
      "name": "test_tls_connection_setup",
      "status": "partial - missing schema"
    },
    "test_to_pytorch": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_dataloader.py",
      "has_implementation": true,
      "implementation": "test_to_pytorch",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
      "name": "test_to_pytorch",
      "status": "partial - missing schema"
    },
    "test_to_tensorflow": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ipfs_dataloader.py",
      "has_implementation": true,
      "implementation": "test_to_tensorflow",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_ipfs_dataloader.py",
      "name": "test_to_tensorflow",
      "status": "partial - missing schema"
    },
    "test_tool_error_details": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_server.py",
      "has_implementation": true,
      "implementation": "test_tool_error_details",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/tests/server/fastmcp/test_server.py",
      "name": "test_tool_error_details",
      "status": "partial - missing schema"
    },
    "test_tracing_integration_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_telemetry_api_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_tracing_integration_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_telemetry_api_integration_anyio.py",
      "name": "test_tracing_integration_async",
      "status": "partial - missing schema"
    },
    "test_track_cleanup_with_buffer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_stream_buffer_optimization.py",
      "has_implementation": true,
      "implementation": "test_track_cleanup_with_buffer",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_stream_buffer_optimization.py",
      "name": "test_track_cleanup_with_buffer",
      "status": "partial - missing schema"
    },
    "test_track_model_operation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_telemetry_ai_ml_anyio.py",
      "has_implementation": true,
      "implementation": "test_track_model_operation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/ai_ml/test_wal_telemetry_ai_ml.py",
      "name": "test_track_model_operation",
      "status": "partial - missing schema"
    },
    "test_transfer_content_without_bridge": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller.py",
      "has_implementation": true,
      "implementation": "test_transfer_content_without_bridge",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
      "name": "test_transfer_content_without_bridge",
      "status": "partial - missing schema"
    },
    "test_transfer_missing_capabilities": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller.py",
      "has_implementation": true,
      "implementation": "test_transfer_missing_capabilities",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
      "name": "test_transfer_missing_capabilities",
      "status": "partial - missing schema"
    },
    "test_unavailable_libp2p": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_unavailable_libp2p",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_unavailable_libp2p",
      "status": "partial - missing schema"
    },
    "test_unpin": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_high_level_api.py",
      "has_implementation": true,
      "implementation": "test_unpin",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_high_level_api.py",
      "name": "test_unpin",
      "status": "partial - missing schema"
    },
    "test_unpin_content_bytes_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_fixes_all.py",
      "has_implementation": true,
      "implementation": "test_unpin_content_bytes_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_fixes_all.py",
      "name": "test_unpin_content_bytes_response",
      "status": "partial - missing schema"
    },
    "test_unpin_content_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_unpin_content_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
      "name": "test_unpin_content_endpoint",
      "status": "partial - missing schema"
    },
    "test_unpin_content_handles_bytes_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_comprehensive_fixes.py",
      "has_implementation": true,
      "implementation": "test_unpin_content_handles_bytes_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive_fixes.py",
      "name": "test_unpin_content_handles_bytes_response",
      "status": "partial - missing schema"
    },
    "test_unregister_message_handler": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_libp2p_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_unregister_message_handler",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_libp2p_controller_integration.py",
      "name": "test_unregister_message_handler",
      "status": "partial - missing schema"
    },
    "test_update_api_key_restrictions_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_api_key_management.py",
      "has_implementation": true,
      "implementation": "test_update_api_key_restrictions_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/tests/test_api_key_management.py",
      "name": "test_update_api_key_restrictions_endpoint",
      "status": "partial - missing schema"
    },
    "test_update_dataset": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ai_ml_integrations.py",
      "has_implementation": true,
      "implementation": "test_update_dataset",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ai/test_ai_ml_integrations.py",
      "name": "test_update_dataset",
      "status": "partial - missing schema"
    },
    "test_update_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_ai_ml_integrations.py",
      "has_implementation": true,
      "implementation": "test_update_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/ai/test_ai_ml_integrations.py",
      "name": "test_update_model",
      "status": "partial - missing schema"
    },
    "test_update_record": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_arrow_metadata_index.py",
      "has_implementation": true,
      "implementation": "test_update_record",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index.py",
      "name": "test_update_record",
      "status": "partial - missing schema"
    },
    "test_update_stats_nonexistent": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_arrow_metadata_index_additional.py",
      "has_implementation": true,
      "implementation": "test_update_stats_nonexistent",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index_additional.py",
      "name": "test_update_stats_nonexistent",
      "status": "partial - missing schema"
    },
    "test_upload_file_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_api.py",
      "has_implementation": true,
      "implementation": "test_upload_file_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_api.py",
      "name": "test_upload_file_error",
      "status": "partial - missing schema"
    },
    "test_upload_file_failure_invalid_params": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_s3_model.py",
      "has_implementation": true,
      "implementation": "test_upload_file_failure_invalid_params",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/model/test_mcp_s3_model.py",
      "name": "test_upload_file_failure_invalid_params",
      "status": "partial - missing schema"
    },
    "test_user_creation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_auth_extension.py",
      "has_implementation": true,
      "implementation": "test_user_creation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_auth_extension.py",
      "name": "test_user_creation",
      "status": "partial - missing schema"
    },
    "test_valid_topics": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_libp2p_pubsub.py",
      "has_implementation": true,
      "implementation": "test_valid_topics",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/libp2p/test_libp2p_pubsub.py",
      "name": "test_valid_topics",
      "status": "partial - missing schema"
    },
    "test_validate_cid_format": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_parameter_validation.py",
      "has_implementation": true,
      "implementation": "test_validate_cid_format",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_parameter_validation.py",
      "name": "test_validate_cid_format",
      "status": "partial - missing schema"
    },
    "test_validate_command_arguments": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_parameter_validation.py",
      "has_implementation": true,
      "implementation": "test_validate_command_arguments",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_parameter_validation.py",
      "name": "test_validate_command_arguments",
      "status": "partial - missing schema"
    },
    "test_validate_required_parameters": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_parameter_validation.py",
      "has_implementation": true,
      "implementation": "test_validate_required_parameters",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_parameter_validation.py",
      "name": "test_validate_required_parameters",
      "status": "partial - missing schema"
    },
    "test_vector_search": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_search_integration.py",
      "has_implementation": true,
      "implementation": "test_vector_search",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/verify_search_integration.py",
      "name": "test_vector_search",
      "status": "partial - missing schema"
    },
    "test_verify_capability_for_operation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cluster_authentication.py",
      "has_implementation": true,
      "implementation": "test_verify_capability_for_operation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_cluster_authentication.py",
      "name": "test_verify_capability_for_operation",
      "status": "partial - missing schema"
    },
    "test_verify_content_with_nonexistent_backend": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller.py",
      "has_implementation": true,
      "implementation": "test_verify_content_with_nonexistent_backend",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_storage_manager_controller.py",
      "name": "test_verify_content_with_nonexistent_backend",
      "status": "partial - missing schema"
    },
    "test_verify_metadata_replication_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_metadata_replication.py",
      "has_implementation": true,
      "implementation": "test_verify_metadata_replication_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_metadata_replication_anyio.py",
      "name": "test_verify_metadata_replication_endpoint",
      "status": "partial - missing schema"
    },
    "test_verify_metadata_replication_endpoint_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_metadata_replication_anyio.py",
      "has_implementation": true,
      "implementation": "test_verify_metadata_replication_endpoint_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_metadata_replication_anyio.py",
      "name": "test_verify_metadata_replication_endpoint_async",
      "status": "partial - missing schema"
    },
    "test_version_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_interface.py",
      "has_implementation": true,
      "implementation": "test_version_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_interface.py",
      "name": "test_version_command",
      "status": "partial - missing schema"
    },
    "test_visualize_telemetry_metrics_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_telemetry_api_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_visualize_telemetry_metrics_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/api/test_wal_telemetry_api_integration_anyio.py",
      "name": "test_visualize_telemetry_metrics_async",
      "status": "partial - missing schema"
    },
    "test_wait_for_completion": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_integration.py",
      "has_implementation": true,
      "implementation": "test_wait_for_completion",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_integration.py",
      "name": "test_wait_for_completion",
      "status": "partial - missing schema"
    },
    "test_wait_for_operation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_wal.py",
      "has_implementation": true,
      "implementation": "test_wait_for_operation",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_integration.py",
      "name": "test_wait_for_operation",
      "status": "partial - missing schema"
    },
    "test_wait_for_operation_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_wait_for_operation_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_integration_anyio.py",
      "name": "test_wait_for_operation_async",
      "status": "partial - missing schema"
    },
    "test_wal_health_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_cli_integration.py",
      "has_implementation": true,
      "implementation": "test_wal_health_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_cli_integration.py",
      "name": "test_wal_health_command",
      "status": "partial - missing schema"
    },
    "test_wal_health_command_sync": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_cli_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_wal_health_command_sync",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_cli_integration_anyio.py",
      "name": "test_wal_health_command_sync",
      "status": "partial - missing schema"
    },
    "test_wal_status_command": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_wal_cli_integration.py",
      "has_implementation": true,
      "implementation": "test_wal_status_command",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/wal/test_wal_cli_integration.py",
      "name": "test_wal_status_command",
      "status": "partial - missing schema"
    },
    "test_warn_if_async_context": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_storage_manager_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_warn_if_async_context",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_filecoin_model_anyio.py",
      "name": "test_warn_if_async_context",
      "status": "partial - missing schema"
    },
    "test_webrtc_benchmark": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_controller.py",
      "has_implementation": true,
      "implementation": "test_webrtc_benchmark",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_controller.py",
      "name": "test_webrtc_benchmark",
      "status": "partial - missing schema"
    },
    "test_webrtc_check": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_api.py",
      "has_implementation": true,
      "implementation": "test_webrtc_check",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_comprehensive.py",
      "name": "test_webrtc_check",
      "status": "partial - missing schema"
    },
    "test_webrtc_communication": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_communication.py",
      "has_implementation": true,
      "implementation": "test_webrtc_communication",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/network_tests/test_mcp_communication_anyio.py",
      "name": "test_webrtc_communication",
      "status": "partial - missing schema"
    },
    "test_webrtc_dependency_check": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_webrtc.py",
      "has_implementation": true,
      "implementation": "test_webrtc_dependency_check",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_fix_detailed.py",
      "name": "test_webrtc_dependency_check",
      "status": "partial - missing schema"
    },
    "test_webrtc_imports": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_fix.py",
      "has_implementation": true,
      "implementation": "test_webrtc_imports",
      "implementation_file": "/home/barberb/ipfs_kit_py/backup_files/test_webrtc_fix.py",
      "name": "test_webrtc_imports",
      "status": "partial - missing schema"
    },
    "test_webrtc_ipfs_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controller_integration.py",
      "has_implementation": true,
      "implementation": "test_webrtc_ipfs_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration.py",
      "name": "test_webrtc_ipfs_integration",
      "status": "partial - missing schema"
    },
    "test_webrtc_ipfs_integration_anyio": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_controller_integration_anyio.py",
      "has_implementation": true,
      "implementation": "test_webrtc_ipfs_integration_anyio",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/test_mcp_controller_integration_anyio.py",
      "name": "test_webrtc_ipfs_integration_anyio",
      "status": "partial - missing schema"
    },
    "test_webrtc_list_connections": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_webrtc_controller.py",
      "has_implementation": true,
      "implementation": "test_webrtc_list_connections",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/webrtc/test_webrtc_controller.py",
      "name": "test_webrtc_list_connections",
      "status": "partial - missing schema"
    },
    "test_webrtc_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_advanced.py",
      "has_implementation": true,
      "implementation": "test_webrtc_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/mcp/test_mcp_advanced.py",
      "name": "test_webrtc_operations",
      "status": "partial - missing schema"
    },
    "test_websocket_media_stream": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_streaming.py",
      "has_implementation": true,
      "implementation": "test_websocket_media_stream",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/streaming/test_streaming_anyio.py",
      "name": "test_websocket_media_stream",
      "status": "partial - missing schema"
    },
    "test_with_multipart_form": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_cli_controller.py",
      "has_implementation": true,
      "implementation": "test_with_multipart_form",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/cli/test_cli_controller.py",
      "name": "test_with_multipart_form",
      "status": "partial - missing schema"
    },
    "test_worker_get_pinset": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_role_based_architecture.py",
      "has_implementation": true,
      "implementation": "test_worker_get_pinset",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
      "name": "test_worker_get_pinset",
      "status": "partial - missing schema"
    },
    "test_worker_pin_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_role_based_architecture.py",
      "has_implementation": true,
      "implementation": "test_worker_pin_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_role_based_architecture.py",
      "name": "test_worker_pin_operations",
      "status": "partial - missing schema"
    },
    "test_worker_role_initialization": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_arrow_metadata_index_additional.py",
      "has_implementation": true,
      "implementation": "test_worker_role_initialization",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_arrow_metadata_index_additional.py",
      "name": "test_worker_role_initialization",
      "status": "partial - missing schema"
    },
    "test_workflow_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_data_science_integration.py",
      "has_implementation": true,
      "implementation": "test_workflow_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_data_science_integration.py",
      "name": "test_workflow_integration",
      "status": "partial - missing schema"
    },
    "test_write_chunk": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_enhanced_resumable.py",
      "has_implementation": true,
      "implementation": "test_write_chunk",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced_resumable.py",
      "name": "test_write_chunk",
      "status": "partial - missing schema"
    },
    "test_write_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_tools.py",
      "has_implementation": true,
      "implementation": "test_write_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/test_mcp_tools.py",
      "name": "test_write_file",
      "status": "partial - missing schema"
    },
    "test_write_file_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_ipfs_controller_anyio.py",
      "has_implementation": true,
      "implementation": "test_write_file_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_ipfs_controller_anyio.py",
      "name": "test_write_file_async",
      "status": "partial - missing schema"
    },
    "test_write_file_error": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_enhanced_files_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_write_file_error",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_enhanced_files_operations_anyio.py",
      "name": "test_write_file_error",
      "status": "partial - missing schema"
    },
    "test_write_multiple_chunks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_enhanced_resumable.py",
      "has_implementation": true,
      "implementation": "test_write_multiple_chunks",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_enhanced_resumable.py",
      "name": "test_write_multiple_chunks",
      "status": "partial - missing schema"
    },
    "test_write_multiple_chunks_permission_check": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mfs_permissions_integration.py",
      "has_implementation": true,
      "implementation": "test_write_multiple_chunks_permission_check",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/functional/filesystem/test_mfs_permissions_integration.py",
      "name": "test_write_multiple_chunks_permission_check",
      "status": "partial - missing schema"
    },
    "test_zero_byte_file_stat": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_files_operations_anyio.py",
      "has_implementation": true,
      "implementation": "test_zero_byte_file_stat",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_files_operations_anyio.py",
      "name": "test_zero_byte_file_stat",
      "status": "partial - missing schema"
    },
    "textme": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from text_me.py",
      "has_implementation": true,
      "implementation": "text_me",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/examples/fastmcp/text_me.py",
      "name": "textme",
      "status": "partial - missing schema"
    },
    "timed_response": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_dht_operations_extended.py",
      "has_implementation": true,
      "implementation": "timed_response",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_dht_operations_extended.py",
      "name": "timed_response",
      "status": "partial - missing schema"
    },
    "to_dict": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_peer_websocket_controller_anyio.py",
      "has_implementation": true,
      "implementation": "to_dict",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/mcp/controller/test_mcp_peer_websocket_controller_anyio.py",
      "name": "to_dict",
      "status": "partial - missing schema"
    },
    "to_ipfs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from implement_real_apis.py",
      "has_implementation": true,
      "implementation": "to_ipfs",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/api/filecoin_real_api.py",
      "name": "to_ipfs",
      "status": "partial - missing schema"
    },
    "toggle_daemon": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_lock_handling.py",
      "has_implementation": true,
      "implementation": "toggle_daemon",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/mcp/test_mcp_lock_handling.py",
      "name": "toggle_daemon",
      "status": "partial - missing schema"
    },
    "tool": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "tool",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/src/mcp/server/fastmcp.py",
      "name": "tool",
      "status": "partial - missing schema"
    },
    "tool_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from simple_mcp_server.py",
      "has_implementation": true,
      "implementation": "tool_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/simple_mcp_server.py",
      "name": "tool_endpoint",
      "status": "partial - missing schema"
    },
    "tool_handler": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from server_bridge.py",
      "has_implementation": true,
      "implementation": "tool_handler",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/server_bridge.py",
      "name": "tool_handler",
      "status": "partial - missing schema"
    },
    "tools_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_server_fixed_all.py",
      "has_implementation": true,
      "implementation": "tools_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_server_fixed_all.py",
      "name": "tools_health",
      "status": "partial - missing schema"
    },
    "trace_model": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "trace_model",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "trace_model",
      "status": "partial - missing schema"
    },
    "track_api_request": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_prometheus.py",
      "has_implementation": true,
      "implementation": "track_api_request",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_prometheus.py",
      "name": "track_api_request",
      "status": "partial - missing schema"
    },
    "track_connection_pool": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_prometheus.py",
      "has_implementation": true,
      "implementation": "track_connection_pool",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_prometheus.py",
      "name": "track_connection_pool",
      "status": "partial - missing schema"
    },
    "track_content_get": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_prometheus.py",
      "has_implementation": true,
      "implementation": "track_content_get",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
      "name": "track_content_get",
      "status": "partial - missing schema"
    },
    "track_dht_operation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_monitoring.py",
      "has_implementation": true,
      "implementation": "track_dht_operation",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
      "name": "track_dht_operation",
      "status": "partial - missing schema"
    },
    "track_integration_usage": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_monitoring.py",
      "has_implementation": true,
      "implementation": "track_integration_usage",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_monitoring.py",
      "name": "track_integration_usage",
      "status": "partial - missing schema"
    },
    "track_model_operation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_telemetry_ai_ml.py",
      "has_implementation": true,
      "implementation": "track_model_operation",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_telemetry_ai_ml.py",
      "name": "track_model_operation",
      "status": "partial - missing schema"
    },
    "track_streaming_operation": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from implement_streaming_metrics.py",
      "has_implementation": true,
      "implementation": "track_streaming_operation",
      "implementation_file": "/home/barberb/ipfs_kit_py/backup_files/streaming_metrics_patch.py",
      "name": "track_streaming_operation",
      "status": "partial - missing schema"
    },
    "transfer_to_backend": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_backends_comprehensive.py",
      "has_implementation": true,
      "implementation": "transfer_to_backend",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/test_storage_backends_comprehensive.py",
      "name": "transfer_to_backend",
      "status": "partial - missing schema"
    },
    "unmap_ipfs_from_fs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from add_comprehensive_ipfs_tools.py",
      "has_implementation": true,
      "implementation": "unmap_ipfs_from_fs",
      "implementation_file": "/home/barberb/ipfs_kit_py/add_comprehensive_ipfs_tools.py",
      "name": "unmap_ipfs_from_fs",
      "status": "partial - missing schema"
    },
    "unmount_ipfs_from_fs": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from add_comprehensive_ipfs_tools.py",
      "has_implementation": true,
      "implementation": "unmount_ipfs_from_fs",
      "implementation_file": "/home/barberb/ipfs_kit_py/add_comprehensive_ipfs_tools.py",
      "name": "unmount_ipfs_from_fs",
      "status": "partial - missing schema"
    },
    "unpin": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mock_ipfs_kit.py",
      "has_implementation": true,
      "implementation": "unpin",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/mock_ipfs_kit.py",
      "name": "unpin",
      "status": "partial - missing schema"
    },
    "unpin_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_mcp_server_anyio.py",
      "has_implementation": true,
      "implementation": "unpin_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
      "name": "unpin_content",
      "status": "partial - missing schema"
    },
    "unregister_peer": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from high_level_api.py",
      "has_implementation": true,
      "implementation": "unregister_peer",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api.py",
      "name": "unregister_peer",
      "status": "partial - missing schema"
    },
    "update_claude_mcp_settings": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from update_vscode_settings_for_proxy.py",
      "has_implementation": true,
      "implementation": "update_claude_mcp_settings",
      "implementation_file": "/home/barberb/ipfs_kit_py/update_vscode_settings_for_proxy.py",
      "name": "update_claude_mcp_settings",
      "status": "partial - missing schema"
    },
    "update_comprehensive_features_doc": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from register_all_controller_tools.py",
      "has_implementation": true,
      "implementation": "update_comprehensive_features_doc",
      "implementation_file": "/home/barberb/ipfs_kit_py/register_all_controller_tools.py",
      "name": "update_comprehensive_features_doc",
      "status": "partial - missing schema"
    },
    "update_controller_registry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from integrate_auth.py",
      "has_implementation": true,
      "implementation": "update_controller_registry",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/integrate_auth.py",
      "name": "update_controller_registry",
      "status": "partial - missing schema"
    },
    "update_filecoin_credentials": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_local_filecoin.py",
      "has_implementation": true,
      "implementation": "update_filecoin_credentials",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_local_filecoin.py",
      "name": "update_filecoin_credentials",
      "status": "partial - missing schema"
    },
    "update_final_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from final_integration.py",
      "has_implementation": true,
      "implementation": "update_final_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/final_integration.py",
      "name": "update_final_mcp_server",
      "status": "partial - missing schema"
    },
    "update_from_dict": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from peer_websocket_anyio.py",
      "has_implementation": true,
      "implementation": "update_from_dict",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/peer_websocket.py",
      "name": "update_from_dict",
      "status": "partial - missing schema"
    },
    "update_imports": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from migrate_tests.py",
      "has_implementation": true,
      "implementation": "update_imports",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/migrate_tests.py",
      "name": "update_imports",
      "status": "partial - missing schema"
    },
    "update_imports_in_storage_controller": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_controllers.py",
      "has_implementation": true,
      "implementation": "update_imports_in_storage_controller",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/mcp/fix_mcp_controllers.py",
      "name": "update_imports_in_storage_controller",
      "status": "partial - missing schema"
    },
    "update_integration_script": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from register_all_controller_tools.py",
      "has_implementation": true,
      "implementation": "update_integration_script",
      "implementation_file": "/home/barberb/ipfs_kit_py/register_all_controller_tools.py",
      "name": "update_integration_script",
      "status": "partial - missing schema"
    },
    "update_ipfs_comprehensive_tools_doc": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from register_all_controller_tools.py",
      "has_implementation": true,
      "implementation": "update_ipfs_comprehensive_tools_doc",
      "implementation_file": "/home/barberb/ipfs_kit_py/register_all_controller_tools.py",
      "name": "update_ipfs_comprehensive_tools_doc",
      "status": "partial - missing schema"
    },
    "update_ipfs_controller": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from implement_mcp_ipfs_tools.py",
      "has_implementation": true,
      "implementation": "update_ipfs_controller",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_ipfs_cluster_status.py",
      "name": "update_ipfs_controller",
      "status": "partial - missing schema"
    },
    "update_ipfs_tools_registry": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from add_new_ipfs_tools.py",
      "has_implementation": true,
      "implementation": "update_ipfs_tools_registry",
      "implementation_file": "/home/barberb/ipfs_kit_py/add_new_ipfs_tools.py",
      "name": "update_ipfs_tools_registry",
      "status": "partial - missing schema"
    },
    "update_last_used": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from rbac_enhanced.py",
      "has_implementation": true,
      "implementation": "update_last_used",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/auth/rbac_enhanced.py",
      "name": "update_last_used",
      "status": "partial - missing schema"
    },
    "update_local_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_discovery_controller_anyio.py",
      "has_implementation": true,
      "implementation": "update_local_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/mcp_discovery_controller_anyio.py",
      "name": "update_local_server",
      "status": "partial - missing schema"
    },
    "update_local_storage_settings": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from update_vscode_settings_for_proxy.py",
      "has_implementation": true,
      "implementation": "update_local_storage_settings",
      "implementation_file": "/home/barberb/ipfs_kit_py/update_vscode_settings_for_proxy.py",
      "name": "update_local_storage_settings",
      "status": "partial - missing schema"
    },
    "update_mcp_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from enhance_ipfs_mcp_tools.py",
      "has_implementation": true,
      "implementation": "update_mcp_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/setup/setup_storacha_implementation.py",
      "name": "update_mcp_config",
      "status": "partial - missing schema"
    },
    "update_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from setup_storage_backends.py",
      "has_implementation": true,
      "implementation": "update_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/api/implement_real_apis.py",
      "name": "update_mcp_server",
      "status": "partial - missing schema"
    },
    "update_mcp_server_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_ipfs_mcp_tools_integration.py",
      "has_implementation": true,
      "implementation": "update_mcp_server_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_ipfs_mcp_tools_integration.py",
      "name": "update_mcp_server_integration",
      "status": "partial - missing schema"
    },
    "update_mcp_server_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from register_ipfs_tools_with_mcp.py",
      "has_implementation": true,
      "implementation": "update_mcp_server_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/register_ipfs_tools_with_mcp.py",
      "name": "update_mcp_server_tools",
      "status": "partial - missing schema"
    },
    "update_mcp_server_with_proxies": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_storage_backends.py",
      "has_implementation": true,
      "implementation": "update_mcp_server_with_proxies",
      "implementation_file": "/home/barberb/ipfs_kit_py/backup_patches/fix_storage_backends.py",
      "name": "update_mcp_server_with_proxies",
      "status": "partial - missing schema"
    },
    "update_mcp_server_with_sse": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_initialize_endpoint.py",
      "has_implementation": true,
      "implementation": "update_mcp_server_with_sse",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_mcp_initialize_endpoint.py",
      "name": "update_mcp_server_with_sse",
      "status": "partial - missing schema"
    },
    "update_node_info": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_prometheus.py",
      "has_implementation": true,
      "implementation": "update_node_info",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/monitoring/ipfs_prometheus.py",
      "name": "update_node_info",
      "status": "partial - missing schema"
    },
    "update_pins_method": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from update_pins_method.py",
      "has_implementation": true,
      "implementation": "update_pins_method",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/fixes/update_pins_method.py",
      "name": "update_pins_method",
      "status": "partial - missing schema"
    },
    "update_prometheus_metrics_async": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from wal_telemetry_ai_ml_anyio.py",
      "has_implementation": true,
      "implementation": "update_prometheus_metrics_async",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/wal_telemetry_ai_ml_anyio.py",
      "name": "update_prometheus_metrics_async",
      "status": "partial - missing schema"
    },
    "update_server_info": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_discovery_mock.py",
      "has_implementation": true,
      "implementation": "update_server_info",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/test_discovery/mcp_discovery_mock.py",
      "name": "update_server_info",
      "status": "partial - missing schema"
    },
    "update_system_info": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from debug_server.py",
      "has_implementation": true,
      "implementation": "update_system_info",
      "implementation_file": "/home/barberb/ipfs_kit_py/debug/mcp/debug_server.py",
      "name": "update_system_info",
      "status": "partial - missing schema"
    },
    "update_visualizations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_monitor_integration.py",
      "has_implementation": true,
      "implementation": "update_visualizations",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/test/webrtc_monitor_integration.py",
      "name": "update_visualizations",
      "status": "partial - missing schema"
    },
    "update_vscode_mcp_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from update_vscode_mcp_config.py",
      "has_implementation": true,
      "implementation": "update_vscode_mcp_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/update_vscode_mcp_config.py",
      "name": "update_vscode_mcp_config",
      "status": "partial - missing schema"
    },
    "update_vscode_settings": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from vscode_mcp_extension.py",
      "has_implementation": true,
      "implementation": "update_vscode_settings",
      "implementation_file": "/home/barberb/ipfs_kit_py/fix_vscode_mcp_integration.py",
      "name": "update_vscode_settings",
      "status": "partial - missing schema"
    },
    "update_wrapper_attributes": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from _validate_call.py",
      "has_implementation": true,
      "implementation": "update_wrapper_attributes",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/pydantic/_internal/_validate_call.py",
      "name": "update_wrapper_attributes",
      "status": "partial - missing schema"
    },
    "upgrade_to_worker": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_dynamic_role_switching.py",
      "has_implementation": true,
      "implementation": "upgrade_to_worker",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ipfs_kit.py",
      "name": "upgrade_to_worker",
      "status": "partial - missing schema"
    },
    "upload_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from s3_storage.py",
      "has_implementation": true,
      "implementation": "upload_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/patches/storage/s3_storage.py",
      "name": "upload_file",
      "status": "partial - missing schema"
    },
    "validate_command_args": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ipfs_bridge.py",
      "has_implementation": true,
      "implementation": "validate_command_args",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/storage_manager/backends/ipfs_bridge.py",
      "name": "validate_command_args",
      "status": "partial - missing schema"
    },
    "validate_name_or_cid": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from ai_ml_integration.py",
      "has_implementation": true,
      "implementation": "validate_name_or_cid",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/ai_ml_integration.py",
      "name": "validate_name_or_cid",
      "status": "partial - missing schema"
    },
    "validates": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from validators.py",
      "has_implementation": true,
      "implementation": "validates",
      "implementation_file": "/home/barberb/ipfs_kit_py/venv/lib64/python3.12/site-packages/jsonschema/validators.py",
      "name": "validates",
      "status": "partial - missing schema"
    },
    "vector_search_workflow": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from high_level_api_ai_ml_example.py",
      "has_implementation": true,
      "implementation": "vector_search_workflow",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/high_level_api_ai_ml_example.py",
      "name": "vector_search_workflow",
      "status": "partial - missing schema"
    },
    "verify_connectivity": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from all_in_one_verify.py",
      "has_implementation": true,
      "implementation": "verify_connectivity",
      "implementation_file": "/home/barberb/ipfs_kit_py/verify_enhanced_mcp.py",
      "name": "verify_connectivity",
      "status": "partial - missing schema"
    },
    "verify_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_backends_full.py",
      "has_implementation": true,
      "implementation": "verify_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/storage_controller_anyio_example.py",
      "name": "verify_content",
      "status": "partial - missing schema"
    },
    "verify_enhanced_tools": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_fs_tool_integration.py",
      "has_implementation": true,
      "implementation": "verify_enhanced_tools",
      "implementation_file": "/home/barberb/ipfs_kit_py/verify_fs_tool_integration.py",
      "name": "verify_enhanced_tools",
      "status": "partial - missing schema"
    },
    "verify_filecoin_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from fix_mcp_integration.py",
      "has_implementation": true,
      "implementation": "verify_filecoin_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/fix_mcp_integration.py",
      "name": "verify_filecoin_integration",
      "status": "partial - missing schema"
    },
    "verify_fs_operations": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_fs_tool_integration.py",
      "has_implementation": true,
      "implementation": "verify_fs_operations",
      "implementation_file": "/home/barberb/ipfs_kit_py/verify_fs_tool_integration.py",
      "name": "verify_fs_operations",
      "status": "partial - missing schema"
    },
    "verify_health_check": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from all_in_one_verify.py",
      "has_implementation": true,
      "implementation": "verify_health_check",
      "implementation_file": "/home/barberb/ipfs_kit_py/all_in_one_verify.py",
      "name": "verify_health_check",
      "status": "partial - missing schema"
    },
    "verify_ipfs_backend": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_ipfs_backend.py",
      "has_implementation": true,
      "implementation": "verify_ipfs_backend",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/verify_ipfs_backend.py",
      "name": "verify_ipfs_backend",
      "status": "partial - missing schema"
    },
    "verify_ipfs_cat": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from all_in_one_verify.py",
      "has_implementation": true,
      "implementation": "verify_ipfs_cat",
      "implementation_file": "/home/barberb/ipfs_kit_py/all_in_one_verify.py",
      "name": "verify_ipfs_cat",
      "status": "partial - missing schema"
    },
    "verify_ipfs_content": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_fs_journal_mcp.py",
      "has_implementation": true,
      "implementation": "verify_ipfs_content",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/core/test_fs_journal_fixed.py",
      "name": "verify_ipfs_content",
      "status": "partial - missing schema"
    },
    "verify_ipfs_mcp_tools_integration": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from update_and_restart_mcp_server.py",
      "has_implementation": true,
      "implementation": "verify_ipfs_mcp_tools_integration",
      "implementation_file": "/home/barberb/ipfs_kit_py/update_and_restart_mcp_server.py",
      "name": "verify_ipfs_mcp_tools_integration",
      "status": "partial - missing schema"
    },
    "verify_ipfs_pin_add": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from all_in_one_verify.py",
      "has_implementation": true,
      "implementation": "verify_ipfs_pin_add",
      "implementation_file": "/home/barberb/ipfs_kit_py/all_in_one_verify.py",
      "name": "verify_ipfs_pin_add",
      "status": "partial - missing schema"
    },
    "verify_ipfs_pin_ls": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from all_in_one_verify.py",
      "has_implementation": true,
      "implementation": "verify_ipfs_pin_ls",
      "implementation_file": "/home/barberb/ipfs_kit_py/all_in_one_verify.py",
      "name": "verify_ipfs_pin_ls",
      "status": "partial - missing schema"
    },
    "verify_ipfs_pin_rm": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from all_in_one_verify.py",
      "has_implementation": true,
      "implementation": "verify_ipfs_pin_rm",
      "implementation_file": "/home/barberb/ipfs_kit_py/all_in_one_verify.py",
      "name": "verify_ipfs_pin_rm",
      "status": "partial - missing schema"
    },
    "verify_jsonrpc_support": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from all_in_one_verify.py",
      "has_implementation": true,
      "implementation": "verify_jsonrpc_support",
      "implementation_file": "/home/barberb/ipfs_kit_py/all_in_one_verify.py",
      "name": "verify_jsonrpc_support",
      "status": "partial - missing schema"
    },
    "verify_lotus_with_daemon": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_lotus_with_daemon.py",
      "has_implementation": true,
      "implementation": "verify_lotus_with_daemon",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/integration/lotus/test_lotus_with_daemon.py",
      "name": "verify_lotus_with_daemon",
      "status": "partial - missing schema"
    },
    "verify_mcp_config": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_and_restart_mcp.py",
      "has_implementation": true,
      "implementation": "verify_mcp_config",
      "implementation_file": "/home/barberb/ipfs_kit_py/verify_and_restart_mcp.py",
      "name": "verify_mcp_config",
      "status": "partial - missing schema"
    },
    "verify_mcp_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_and_restart_mcp.py",
      "has_implementation": true,
      "implementation": "verify_mcp_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/verify_mcp_server.py",
      "name": "verify_mcp_server",
      "status": "partial - missing schema"
    },
    "verify_server_health": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from improved_mcp_server.py",
      "has_implementation": true,
      "implementation": "verify_server_health",
      "implementation_file": "/home/barberb/ipfs_kit_py/applied_patches/improved_mcp_server.py",
      "name": "verify_server_health",
      "status": "partial - missing schema"
    },
    "verify_simulation_retrieval": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from test_storage_backends_simulation.py",
      "has_implementation": true,
      "implementation": "verify_simulation_retrieval",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/unit/storage/test_storage_backends_simulation.py",
      "name": "verify_simulation_retrieval",
      "status": "partial - missing schema"
    },
    "verify_sse_endpoints": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from verify_enhanced_mcp.py",
      "has_implementation": true,
      "implementation": "verify_sse_endpoints",
      "implementation_file": "/home/barberb/ipfs_kit_py/verify_enhanced_mcp.py",
      "name": "verify_sse_endpoints",
      "status": "partial - missing schema"
    },
    "verify_storage_backends": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from all_in_one_verify.py",
      "has_implementation": true,
      "implementation": "verify_storage_backends",
      "implementation_file": "/home/barberb/ipfs_kit_py/all_in_one_verify.py",
      "name": "verify_storage_backends",
      "status": "partial - missing schema"
    },
    "vfs_delete": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "vfs_delete",
      "implementation_file": "/home/barberb/ipfs_kit_py/minimal_mcp_server.py",
      "name": "vfs_delete",
      "status": "partial - missing schema"
    },
    "vfs_mount": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "vfs_mount",
      "implementation_file": "/home/barberb/ipfs_kit_py/minimal_mcp_server.py",
      "name": "vfs_mount",
      "status": "partial - missing schema"
    },
    "vfs_read": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "vfs_read",
      "implementation_file": "/home/barberb/ipfs_kit_py/minimal_mcp_server.py",
      "name": "vfs_read",
      "status": "partial - missing schema"
    },
    "vfs_status": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "vfs_status",
      "implementation_file": "/home/barberb/ipfs_kit_py/minimal_mcp_server.py",
      "name": "vfs_status",
      "status": "partial - missing schema"
    },
    "vfs_write": {
      "auto_discovered": true,
      "description": "Tool implementation found in minimal_mcp_server.py",
      "has_implementation": true,
      "implementation": "vfs_write",
      "implementation_file": "/home/barberb/ipfs_kit_py/minimal_mcp_server.py",
      "name": "vfs_write",
      "status": "partial - missing schema"
    },
    "visualization_examples": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from data_science_examples.py",
      "has_implementation": true,
      "implementation": "visualization_examples",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/data_science_examples.py",
      "name": "visualization_examples",
      "status": "partial - missing schema"
    },
    "visualize_benchmark": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from webrtc_benchmark_helpers.py",
      "has_implementation": true,
      "implementation": "visualize_benchmark",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/high_level_api/webrtc_benchmark_helpers_anyio.py",
      "name": "visualize_benchmark",
      "status": "partial - missing schema"
    },
    "visualize_results": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from probabilistic_data_structures_integration_example.py",
      "has_implementation": true,
      "implementation": "visualize_results",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/probabilistic_data_structures_integration_example.py",
      "name": "visualize_results",
      "status": "partial - missing schema"
    },
    "vs_code_initialize": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server.py",
      "has_implementation": true,
      "implementation": "vs_code_initialize",
      "implementation_file": "/home/barberb/ipfs_kit_py/direct_mcp_server.py",
      "name": "vs_code_initialize",
      "status": "partial - missing schema"
    },
    "wait_for_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from start_and_test_anyio_server.py",
      "has_implementation": true,
      "implementation": "wait_for_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/scripts/server/start_and_test_anyio_server.py",
      "name": "wait_for_server",
      "status": "partial - missing schema"
    },
    "webrtc_signaling": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server.py",
      "has_implementation": true,
      "implementation": "webrtc_signaling",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/direct_mcp_server.py",
      "name": "webrtc_signaling",
      "status": "partial - missing schema"
    },
    "websocket_endpoint": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_websocket.py",
      "has_implementation": true,
      "implementation": "websocket_endpoint",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/direct_mcp_server.py",
      "name": "websocket_endpoint",
      "status": "partial - missing schema"
    },
    "websocket_server": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from websocket.py",
      "has_implementation": true,
      "implementation": "websocket_server",
      "implementation_file": "/home/barberb/ipfs_kit_py/docs/mcp-python-sdk/src/mcp/server/websocket.py",
      "name": "websocket_server",
      "status": "partial - missing schema"
    },
    "weights_sum_to_one": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from routing.py",
      "has_implementation": true,
      "implementation": "weights_sum_to_one",
      "implementation_file": "/home/barberb/ipfs_kit_py/mcp_final_20250414_082801/extensions/routing.py",
      "name": "weights_sum_to_one",
      "status": "partial - missing schema"
    },
    "welcome": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from mcp_server_anyio_example.py",
      "has_implementation": true,
      "implementation": "welcome",
      "implementation_file": "/home/barberb/ipfs_kit_py/examples/storage_controller_anyio_example.py",
      "name": "welcome",
      "status": "partial - missing schema"
    },
    "with_pyarrow_mocks": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from pyarrow_test_utils.py",
      "has_implementation": true,
      "implementation": "with_pyarrow_mocks",
      "implementation_file": "/home/barberb/ipfs_kit_py/test/helpers/pyarrow_test_utils.py",
      "name": "with_pyarrow_mocks",
      "status": "partial - missing schema"
    },
    "write_file": {
      "auto_discovered": true,
      "description": "Auto-discovered tool from direct_mcp_server.py",
      "has_implementation": true,
      "implementation": "write_file",
      "implementation_file": "/home/barberb/ipfs_kit_py/ipfs_kit_py/mcp/controllers/ipfs_controller.py",
      "name": "write_file",
      "status": "partial - missing schema"
    }
  },
  "total_tools": 2538
}