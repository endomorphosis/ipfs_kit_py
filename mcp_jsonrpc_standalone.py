#!/usr/bin/env python3"""Simplified MCP JSON-RPC Standalone ServerThis is a minimal JSON-RPC server that only handles the initialize request from VS Code.It's designed to be more reliable and faster than the full proxy."""import osimport sysimport loggingimport argparsefrom http.server import HTTPServer, BaseHTTPRequestHandlerimport jsonimport threadingimport time# Configure logginglogging.basicConfig(    level=logging.INFO,    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',    filename='simple_jsonrpc_server.log')logger = logging.getLogger("simple_jsonrpc")class JSONRPCHandler(BaseHTTPRequestHandler):    """    Simple HTTP request handler with JSON-RPC support.    This only handles the requests required by VS Code.    """        def _set_headers(self):        self.send_response(200)        self.send_header('Content-type', 'application/json')        self.send_header('Access-Control-Allow-Origin', '*')        self.send_header('Access-Control-Allow-Methods', 'POST, OPTIONS')        self.send_header('Access-Control-Allow-Headers', 'Content-Type')        self.end_headers()        def do_OPTIONS(self):        """Handle OPTIONS requests for CORS."""        self._set_headers()        def do_GET(self):        """Handle GET request to root path."""        if self.path == '/':            self._set_headers()            response = {                "message": "Simple MCP JSON-RPC Server is running",                "jsonrpc_endpoint": "/jsonrpc"            }            self.wfile.write(json.dumps(response).encode())        else:            self.send_response(404)            self.end_headers()        def do_POST(self):        """Handle POST request to JSON-RPC endpoint."""        if self.path == '/jsonrpc':            content_length = int(self.headers['Content-Length'])            post_data = self.rfile.read(content_length)                        try:                data = json.loads(post_data.decode())                logger.info(f"Received JSON-RPC request: {data}")                                method = data.get("method")                request_id = data.get("id")                                # Handle initialize request                if method == "initialize":                    logger.info("Processing initialize request from VS Code")                    response = {                        "jsonrpc": "2.0",                        "id": request_id,                        "result": {                            "capabilities": {                                "textDocumentSync": {                                    "openClose": True,                                    "change": 1  # Full document sync                                },                                "completionProvider": {                                    "resolveProvider": False,                                    "triggerCharacters": ["/"]                                },                                "hoverProvider": True,                                "definitionProvider": True,                                "referencesProvider": True                            },                            "serverInfo": {                                "name": "MCP IPFS Tools Server",                                "version": "0.3.0"                            }                        }                    }                                    # Handle shutdown request                elif method == "shutdown":                    logger.info("Received shutdown request from VS Code")                    response = {                        "jsonrpc": "2.0",                        "id": request_id,                        "result": None                    }                                    # Handle exit notification                elif method == "exit":                    logger.info("Received exit notification from VS Code")                    response = {                        "jsonrpc": "2.0",                        "id": request_id,                        "result": None                    }                                    # For any other method, return a 'method not found' error                else:                    logger.warning(f"Unhandled JSON-RPC method: {method}")                    response = {                        "jsonrpc": "2.0",                        "id": request_id,                        "error": {                            "code": -32601,                            "message": f"Method '{method}' not found"                        }                    }                                self._set_headers()                self.wfile.write(json.dumps(response).encode())                            except Exception as e:                logger.error(f"Error handling JSON-RPC request: {e}")                response = {                    "jsonrpc": "2.0",                    "id": None,                    "error": {                        "code": -32603,                        "message": f"Internal error: {str(e)}"                    }                }                self._set_headers()                self.wfile.write(json.dumps(response).encode())        else:            self.send_response(404)            self.end_headers()        def log_message(self, format, *args):        """Override to disable default HTTP server logging."""        returndef run_server(port, debug=False):    """Run the HTTP server with the JSON-RPC handler."""    if debug:        logger.setLevel(logging.DEBUG)        server_address = ('', port)    httpd = HTTPServer(server_address, JSONRPCHandler)        print(f"Starting Simple MCP JSON-RPC Server on port {port}...")    logger.info(f"Starting Simple MCP JSON-RPC Server on port {port}")        try:        httpd.serve_forever()
    except KeyboardInterrupt:
        logger.info("Server stopped by user")
        print("Server stopped by user")
    except Exception as e:
        logger.error(f"Server error: {e}")
        print(f"Server error: {e}")
    finally:
        httpd.server_close()
        logger.info("Server closed")
        print("Server closed")

def main():
    """Parse arguments and start the server."""
    parser = argparse.ArgumentParser(description="Start the Simple MCP JSON-RPC Server")
    parser.add_argument("--port", type=int, default=9995,
                      help="Port number to use (default: 9995)")
    parser.add_argument("--debug", action="store_true", help="Enable debug mode")
    
    args = parser.parse_args()
    
    # Write PID file for easier management
    with open('/tmp/simple_jsonrpc_server.pid', 'w') as f:
        f.write(str(os.getpid()))
    
    run_server(args.port, args.debug)

if __name__ == "__main__":
    main()
