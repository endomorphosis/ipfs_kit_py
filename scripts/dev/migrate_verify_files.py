#!/usr/bin/env python3
"""
Migration Script for Verification Files

This script migrates verification files from the root directory to the test directory.
It handles:
1. Moving files to appropriate test directories
2. Renaming files from 'verify_*' to 'test_*'
3. Creating necessary directories if they don't exist
4. Preserving the execution permissions
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path

# Define the migration mapping
MIGRATION_MAP = {
    "verify_lotus_daemon_enhancements.py": "test/integration/lotus/test_lotus_daemon_enhancements.py",
    "verify_lotus_client.py": "test/integration/lotus/test_lotus_client_verification.py",
    "verify_lotus_snapshot.py": "test/integration/lotus/test_lotus_snapshot_integration.py",
    "verify_lotus_auto_daemon.py": "test/integration/lotus/test_lotus_auto_daemon.py",
    "verify_lotus_with_daemon.py": "test/integration/lotus/test_lotus_with_daemon.py",
    "verify_ipfs_cluster_wrappers.py": "test/integration/ipfs/test_ipfs_cluster_wrappers.py",
    "verify_backup_system.py": "test/integration/backup/test_backup_system.py",
}

# Root directory
ROOT_DIR = Path(__file__).resolve().parent

def ensure_directories_exist():
    """Create necessary directories if they don't exist."""
    for dest_path in MIGRATION_MAP.values():
        dest_dir = os.path.dirname(os.path.join(ROOT_DIR, dest_path))
        if not os.path.exists(dest_dir):
            print(f"Creating directory: {dest_dir}")
            os.makedirs(dest_dir, exist_ok=True)

def migrate_files():
    """Migrate files according to the migration map."""
    for source_name, dest_path in MIGRATION_MAP.items():
        source_path = os.path.join(ROOT_DIR, source_name)
        dest_full_path = os.path.join(ROOT_DIR, dest_path)
        
        # Check if source file exists
        if not os.path.exists(source_path):
            print(f"Source file not found, skipping: {source_path}")
            continue
        
        # Check if destination file already exists
        if os.path.exists(dest_full_path):
            print(f"Destination file already exists: {dest_full_path}")
            response = input("Do you want to overwrite? (y/n): ")
            if response.lower() != 'y':
                print(f"Skipping: {source_name}")
                continue
        
        # Get file permissions
        source_perms = os.stat(source_path).st_mode
        
        # Copy file to destination
        print(f"Moving {source_name} to {dest_path}")
        shutil.copy2(source_path, dest_full_path)
        
        # Fix imports in the new file
        fix_imports(dest_full_path)
        
        # Modify the shebang if necessary
        fix_shebang(dest_full_path)
        
        # Remove the original file after successful copy
        os.remove(source_path)
        
        print(f"Successfully migrated {source_name}")

def fix_imports(file_path):
    """Fix imports in the migrated file to reflect its new location."""
    # This is a placeholder - actual implementation would be more complex
    # For now, we won't modify the imports as they might be using absolute imports
    # If relative imports are found causing issues, they should be fixed manually
    pass

def fix_shebang(file_path):
    """Ensure the shebang line is correct for test files."""
    with open(file_path, 'r') as f:
        content = f.read()
    
    # Replace shebang if needed (e.g., from #!/usr/bin/env python to #!/usr/bin/env python3)
    if content.startswith("#!/usr/bin/env python\n") and not content.startswith("#!/usr/bin/env python3\n"):
        content = content.replace("#!/usr/bin/env python\n", "#!/usr/bin/env python3\n")
        with open(file_path, 'w') as f:
            f.write(content)
        print(f"Updated shebang in {file_path}")

def update_test_imports():
    """Add necessary imports to __init__.py files to make the tests discoverable."""
    # Add empty __init__.py files to ensure the directories are recognized as packages
    init_paths = [
        "test/integration/backup/__init__.py",
    ]
    
    for init_path in init_paths:
        full_path = os.path.join(ROOT_DIR, init_path)
        if not os.path.exists(full_path):
            with open(full_path, 'w') as f:
                f.write("# This file is automatically generated to make this directory a package\n")
            print(f"Created {init_path}")

def main():
    """Main function to execute the migration."""
    print("Starting migration of verification files...")
    
    # Create necessary directories
    ensure_directories_exist()
    
    # Migrate files
    migrate_files()
    
    # Update test imports
    update_test_imports()
    
    print("Migration completed!")

if __name__ == "__main__":
    main()