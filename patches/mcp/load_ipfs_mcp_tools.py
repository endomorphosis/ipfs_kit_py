#!/usr/bin/env python3
"""
Load IPFS MCP Tools Configuration

This script loads the enhanced IPFS tool definitions into the direct MCP server.
It should be run before starting the server or included in the server startup process.
"""

import os
import sys
import json
import argparse
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def load_ipfs_tools(server_module_path=None):
    """Load IPFS tools definitions into the MCP server module."""
    try:
        # Get the path to the tools configuration file
        config_dir = os.path.expanduser('~/.config/Code/User/globalStorage/saoudrizwan.claude-dev/settings/')
        tools_config_path = os.path.join(config_dir, 'mcp_tools_config.json')

        if not os.path.exists(tools_config_path):
            logger.error(f"❌ Tools configuration file not found at {tools_config_path}")
            logger.error("Run enhance_ipfs_mcp_tools.py first to create the tools configuration")
            return False

        # Load the tools configuration
        with open(tools_config_path, 'r') as f:
            tools_config = json.load(f)

        if 'servers' not in tools_config or len(tools_config['servers']) == 0:
            logger.error("❌ Invalid tools configuration: no servers defined")
            return False

        server = tools_config['servers'][0]
        if 'tools' not in server or len(server['tools']) == 0:
            logger.error("❌ Invalid tools configuration: no tools defined")
            return False

        tools = server['tools']
        logger.info(f"📋 Loaded {len(tools)} IPFS tool definitions")

        # Create a tool registry file that can be imported by the server
        tools_registry_path = os.path.join(os.getcwd(), 'ipfs_tools_registry.py')

        with open(tools_registry_path, 'w') as f:
            f.write('"""IPFS MCP Tools Registry - Auto-generated by load_ipfs_mcp_tools.py"""\n\n')
            f.write('IPFS_TOOLS = [\n')

            for tool in tools:
                # Format the tool definition as Python code
                tool_name = tool.get('name', 'unknown_tool')
                tool_desc = tool.get('description', '')
                tool_schema = json.dumps(tool.get('schema', {}), indent=4)

                f.write(f'    {{\n')
                f.write(f'        "name": "{tool_name}",\n')
                f.write(f'        "description": "{tool_desc}",\n')
                f.write(f'        "schema": {tool_schema}\n')
                f.write(f'    }},\n')

            f.write(']\n\n')
            f.write('def get_ipfs_tools():\n')
            f.write('    """Get all IPFS tool definitions"""\n')
            f.write('    return IPFS_TOOLS\n')

        logger.info(f"✅ Created IPFS tools registry at {tools_registry_path}")

        # Create a simple integration script for the direct MCP server
        integration_path = os.path.join(os.getcwd(), 'ipfs_mcp_tools_integration.py')

        with open(integration_path, 'w') as f:
            f.write('"""IPFS MCP Tools Integration - Auto-generated by load_ipfs_mcp_tools.py"""\n\n')
            f.write('import logging\n')
            f.write('from ipfs_tools_registry import get_ipfs_tools\n\n')
            f.write('logger = logging.getLogger(__name__)\n\n')
            f.write('def register_ipfs_tools(mcp_server):\n')
            f.write('    """Register all IPFS tools with the MCP server"""\n')
            f.write('    tools = get_ipfs_tools()\n')
            f.write('    logger.info(f"Registering {len(tools)} IPFS tools with MCP server")\n')
            f.write('    \n')
            f.write('    # Register each tool with mock implementations for now\n')
            f.write('    for tool in tools:\n')
            f.write('        tool_name = tool["name"]\n')
            f.write('        tool_schema = tool["schema"]\n')
            f.write('        \n')
            f.write('        # Define a mock implementation that returns success\n')
            f.write('        async def mock_handler(params):\n')
            f.write('            logger.info(f"Called {tool_name} with params: {params}")\n')
            f.write('            return {"success": True, "message": f"Mock implementation of {tool_name}"}\n')
            f.write('        \n')
            f.write('        # Register the tool with the server\n')
            f.write('        mcp_server.register_tool(tool_name, mock_handler, tool_schema)\n')
            f.write('        logger.info(f"Registered tool: {tool_name}")\n')
            f.write('    \n')
            f.write('    logger.info("✅ Successfully registered all IPFS tools")\n')
            f.write('    return True\n')

        logger.info(f"✅ Created IPFS tools integration module at {integration_path}")
        logger.info("🔄 To use these tools, import and call register_ipfs_tools() in your MCP server")

        # Create an example patch file for the direct_mcp_server.py script
        patch_path = os.path.join(os.getcwd(), 'patch_direct_mcp_server.py')

        with open(patch_path, 'w') as f:
            f.write('"""Patch for direct_mcp_server.py to add IPFS tools"""\n\n')
            f.write('import os\n')
            f.write('import sys\n')
            f.write('import re\n')
            f.write('import logging\n\n')
            f.write('logger = logging.getLogger(__name__)\n\n')
            f.write('def patch_direct_mcp_server(file_path="direct_mcp_server.py"):\n')
            f.write('    """Patch the direct_mcp_server.py file to add IPFS tools"""\n')
            f.write('    try:\n')
            f.write('        if not os.path.exists(file_path):\n')
            f.write('            logger.error(f"❌ File not found: {file_path}")\n')
            f.write('            return False\n')
            f.write('        \n')
            f.write('        with open(file_path, "r") as f:\n')
            f.write('            content = f.read()\n')
            f.write('        \n')
            f.write('        # Add the import statement if not already present\n')
            f.write('        import_line = "from ipfs_mcp_tools_integration import register_ipfs_tools"\n')
            f.write('        if import_line not in content:\n')
            f.write('            # Find the last import statement\n')
            f.write('            import_pattern = r"(^import .*$|^from .* import .*$)"\n')
            f.write('            matches = re.finditer(import_pattern, content, re.MULTILINE)\n')
            f.write('            last_import = None\n')
            f.write('            for match in matches:\n')
            f.write('                last_import = match\n')
            f.write('            \n')
            f.write('            if last_import:\n')
            f.write('                # Insert after the last import\n')
            f.write('                pos = last_import.end()\n')
            f.write('                content = content[:pos] + "\\n" + import_line + content[pos:]\n')
            f.write('                logger.info("✅ Added import statement for IPFS tools integration")\n')
            f.write('            else:\n')
            f.write('                logger.error("❌ Could not find a suitable location to add import")\n')
            f.write('                return False\n')
            f.write('        \n')
            f.write('        # Add call to register_ipfs_tools if not already present\n')
            f.write('        register_call = "register_ipfs_tools(fastmcp)"\n')
            f.write('        if register_call not in content:\n')
            f.write('            # Find where the FastMCP is created and tools are registered\n')
            f.write('            app_pattern = r"(app\s*=\s*fastmcp\.get_app\(\))"\n')
            f.write('            app_match = re.search(app_pattern, content)\n')
            f.write('            \n')
            f.write('            if app_match:\n')
            f.write('                # Insert before the app is created\n')
            f.write('                pos = app_match.start()\n')
            f.write('                content = content[:pos] + "    # Register IPFS tools\\n    " + register_call + "\\n\\n    " + content[pos:]\n')
            f.write('                logger.info("✅ Added call to register IPFS tools")\n')
            f.write('            else:\n')
            f.write('                logger.error("❌ Could not find a suitable location to add register call")\n')
            f.write('                return False\n')
            f.write('        \n')
            f.write('        # Write the updated content back to the file\n')
            f.write('        with open(file_path, "w") as f:\n')
            f.write('            f.write(content)\n')
            f.write('        \n')
            f.write('        logger.info(f"✅ Successfully patched {file_path} to add IPFS tools")\n')
            f.write('        return True\n')
            f.write('    except Exception as e:\n')
            f.write('        logger.error(f"❌ Error patching direct_mcp_server.py: {e}")\n')
            f.write('        return False\n')
            f.write('\n')
            f.write('if __name__ == "__main__":\n')
            f.write('    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")\n')
            f.write('    file_path = sys.argv[1] if len(sys.argv) > 1 else "direct_mcp_server.py"\n')
            f.write('    patch_direct_mcp_server(file_path)\n')

        logger.info(f"✅ Created MCP server patch script at {patch_path}")
        logger.info("📋 Run './patch_direct_mcp_server.py' to patch your direct_mcp_server.py file")

        return True
    except Exception as e:
        logger.error(f"❌ Error loading IPFS tools: {e}")
        return False

def main():
    """Main function."""
    parser = argparse.ArgumentParser(description='Load IPFS MCP Tools Configuration')
    parser.add_argument('--server-module', help='Path to the MCP server module')
    args = parser.parse_args()

    logger.info("🔧 Loading IPFS MCP Tools...")

    if load_ipfs_tools(args.server_module):
        logger.info("✅ Successfully loaded IPFS MCP tools")
        logger.info("🔄 Follow the instructions above to integrate the tools with your MCP server")
    else:
        logger.error("❌ Failed to load IPFS MCP tools")
        sys.exit(1)

if __name__ == "__main__":
    main()
