apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ipfs-gateway-ingress
  namespace: ipfs-kit
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - ipfs-gateway.example.com
    secretName: ipfs-gateway-tls
  rules:
  - host: ipfs-gateway.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ipfs-master
            port:
              name: gateway
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ipfs-api-ingress
  namespace: ipfs-kit
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # Optional: Enable authentication
    # nginx.ingress.kubernetes.io/auth-type: basic
    # nginx.ingress.kubernetes.io/auth-secret: ipfs-api-auth
    # nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
spec:
  tls:
  - hosts:
    - ipfs-api.example.com
    secretName: ipfs-api-tls
  rules:
  - host: ipfs-api.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ipfs-master
            port:
              name: api